LAC Version: 5.x

=========================
       FILTERS 
=========================

=========================
       REQUEST_EVENTS 
=========================
#These are JavaScript request_events can be called by rules and resources

def fn_Insert_Lookup_Merge(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     title = "Request Event [Insert_Lookup_Merge] - "  # see resources PartnerOrder, SupplierSelfService
extProps = None
try:
    extProps = SysUtility.getExtendedPropertiesFor(req.resourceName)
 except Exception as ex:
    # occurs for non-resources, etc

    if extProps and 'object' == typeof extProps and ! Array.isArray(extProps) and extProps.hasOwnProperty('InsertActions') ):
    if req.verb.toString() == 'POST' or req.verb.toString() == 'PUT' ):
        insertActionsArray = []
        if  Array.isArray(extProps.InsertActions))  # support one node, or array of nodes
            insertActionsArray = extProps.InsertActions
        else
            insertActionsArray.put(extProps.InsertActions)
        json = insertActions.insertActionsForResource(json, insertActionsArray)
        print(title + req.resourceName + " is tag-inserted from insertActions else  " + jsonify(insertActionsArray) +
                "\n  > inserted payload else  " + json)
    
else:
    # print(title + req.resourceName + " **not** tag-inserted from props, res.extProps else  " + res.extProps)



=========================
       SECURITY 
=========================
Role: API Documentation TablePermission: A
Role: Read only TablePermission: R
Role: Supplier TablePermission: N
Role: Full access TablePermission: A
Role: Authorized per region TablePermission: A
def Roles():
	APIDocumentation = 'API Documentation'
	Readonly = 'Read only'
	Supplier = 'Supplier'
	Fullaccess = 'Full access'
	Authorizedperregion = 'Authorized per region'

#Access Levels: ['READ', 'UPDATE'] TablePermissions: N description: Only My Supplier
Grant(on_entity=models.Suppliers, to_role=Roles.Supplier)

#Access Levels: ['READ'] TablePermissions: N description: Promotions
Grant(on_entity=models.promotions, to_role=Roles.Supplier)


User: demo Role: ['Full access']
User: guest Role: ['Read only']
User: admin Role: ['Full access']
User: region Role: ['Authorized per region']

=========================
       TIMERS 
=========================

=========================
       RESOURCES 
=========================
| -------------------- D v1
| ---------------------- D SupplierAlert
| --------------------------------- F SupplierAlert.json Entity: Orders  Attrs: (OrderID,OrderDate))  
| ------------------------ D OrderDetails_List
| ------------------------------------ F OrderDetails_List.json Entity: Order Details Join: ("OrderID" = [OrderID]) Attrs: (Quantity))  
| -------------------------- D Product
| --------------------------------------- F Product.json Entity: Products Join: ("ProductID" = [ProductID]) Attrs: (ProductName))  isParent=True
| ---------------------------- D Supplier
| ------------------------------------------ F Supplier.json Entity: Suppliers Join: ("SupplierID" = [SupplierID]) Attrs: (CompanyName))  isParent=True
| ------------------------ D Customer
| ------------------------------------ F Customer.json Entity: Customers Join: ("CustomerID" = [CustomerID]) Attrs: (CompanyName))  isParent=True
| ---------------------- D SupplierSelfService
| --------------------------------- F extended_properties.js
| --------------------------------- F SupplierSelfService.json Entity: Suppliers  Attrs: (CompanyName,ContactName,ContactTitle,Address,City,Region,PostalCode,Country,Phone,Fax,HomePage,URL))  
| ------------------------ D promotionsChild
| ------------------------------------ F promotionsChild.json Entity: promotions Join: ("SupplierID" = [SupplierID]) Attrs: (ident,SupplierID,remarks,begin_date,end_date))  
| ---------------------- D AccountSummary
| --------------------------------- F AccountSummary.json Entity: Customers  Attrs: (CustomerID,CompanyName,Balance,CreditLimit))  
| ------------------------ D Orders_List
| ------------------------------------ F Orders_List.json Entity: Orders Join: ("CustomerID" = ["CustomerID"]) Attrs: (OrderID,ShippedDate,RequiredDate,AmountTotal,healthyCount,discountedAmount))  
| -------------------------- D OrderDetails_List
| --------------------------------------- F OrderDetails_List.json Entity: Order Details Join: ("OrderID" = ["OrderID"]) Attrs: (UnitPrice,Quantity,Discount,Amount,isHealthy))  
| ---------------------------- D Product
| ------------------------------------------ F Product.json Entity: Products Join: ("ProductID" = ["ProductID"]) Attrs: (ProductName,UnitPrice))  isParent=True
| ---------------------- D SupplierInfo
| --------------------------------- F SupplierInfo.json Entity: Suppliers  Attrs: (CompanyName,ContactName,ContactTitle,Address,City,Region))  
| ------------------------ D PromotionsList
| ------------------------------------ F PromotionsList.json Entity: promotions Join: ("SupplierID" = [SupplierID]) Attrs: (remarks,begin_date,end_date))  
| ---------------------- D ShipperAPIDef
| --------------------------------- F ShipperAPIDef.json Entity: Orders  Attrs: (OrderID,RequiredDate,ShipName,ShipAddress,ShipCity,ShipRegion,ShipPostalCode,ShipCountry))  
| ------------------------ D OrderDetails_List
| ------------------------------------ F OrderDetails_List.json Entity: Order Details Join: ("OrderID" = [OrderID]) Attrs: (OrderID,ProductID,UnitPrice,Quantity,Discount,Amount,isHealthy))  
| -------------------------- D Product
| --------------------------------------- F Product.json Entity: Products Join: ("ProductID" = [ProductID]) Attrs: (ProductName,UnitPrice))  isParent=True
| ---------------------- D AAA
| --------------------------------- F AAA.json Entity: Employees  )  
| ------------------------ D OnLoan
| ------------------------------------ F OnLoan.json Entity: Employee Join: ("Id" = ["OnLoanDepartmentId"]) )  isParent=True
| ------------------------ D WorksFor
| ------------------------------------ F WorksFor.json Entity: Employee Join: ("Id" = ["WorksForDepartmentId"]) )  isParent=True
| ---------------------- D PartnerOrder
| --------------------------------- F PartnerOrder.json Entity: Orders  Attrs: (CustomerID,OrderID))  
| --------------------------------- F extended_properties.js
| ------------------------ D Shipper
| ------------------------------------ F Shipper.json Entity: Shippers Join: ("ShipperID" = [ShipVia]) Attrs: (CompanyName))  isParent=True
| ------------------------ D Items
| ------------------------------------ F Items.json Entity: Order Details Join: ("OrderID" = [OrderID]) Attrs: (ProductID,Quantity))  
| -------------------------- D Product
| --------------------------------------- F Product.json Entity: Products Join: ("ProductID" = [ProductID]) Attrs: (ProductName))  isParent=True
| ---------------------- D EmployeesWithRaises
| --------------------------------- F EmployeesWithRaises.json Entity: Employees  Attrs: (EmployeeID,LastName,FirstName,Salary))  
| ------------------------ D EmployeeRaisesList
| ------------------------------------ F EmployeeRaisesList.json Entity: EmployeeRaises Join: ("EmployeeID" = ["EmployeeID"]) Attrs: (EmployeeRaiseID,EmployeeID,Salary))  
| ---------------------- D OrderSummary
| --------------------------------- F OrderSummary.json Entity: Orders  Attrs: (OrderID,CustomerID,OrderDate,AmountTotal,healthyCount,discountedAmount))  
| ------------------------ D SalesRep
| ------------------------------------ F SalesRep.json Entity: Employees Join: ("EmployeeID" = [EmployeeID]) Attrs: (fullName,Region))  isParent=True
| ------------------------ D OrderDetails_List
| ------------------------------------ F OrderDetails_List.json Entity: Order Details Join: ("OrderID" = [OrderID]) Attrs: (UnitPrice,Quantity,isHealthy,Amount,Discount))  
| -------------------------- D Product
| --------------------------------------- F Product.json Entity: Products Join: ("ProductID" = [ProductID]) Attrs: (ProductName))  isParent=True
#Copy this section to ALS api/customize_api.py
@app.route('/LAC/rest/default/b2bderbynw/v1/supplieralert/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def supplieralert(id):
	root = CustomEndpoint(model_class=models.Orders,alias="SupplierAlert"
	 ,fields=[ (models.Orders.OrderID, "OrderID"), (models.Orders.OrderDate, "OrderDate")]
	 ,children=CustomEndpoint[(model_class=models.OrderDetails,alias="OrderDetails_List" ,join_on=models.OrderDetails.OrderID
	 ,fields=[ (models.OrderDetails.Quantity, "Quantity")]
		 ,children=CustomEndpoint(model_class=models.Products,alias="Product" ,join_on=models.OrderDetails.ProductID
		 ,fields=[ (models.Products.ProductName, "ProductName")]
		 ,isParent=True
		 isCombined=True
			 ,children=CustomEndpoint(model_class=models.Suppliers,alias="Supplier" ,join_on=models.Products.SupplierID
			 ,fields=[ (models.Suppliers.SupplierName, "SupplierName")]
			 ,isParent=True
			 isCombined=True
			 )
		 )
	 )
	 ,CustomEndpoint(model_class=models.Customers,alias="Customer" ,join_on=models.Orders.CustomerID
	 ,fields=[ (models.Customers.CompanyName, "CompanyName")]
	 ,isParent=True
	 isCombined=True
	 )
	 ]
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/supplierselfservice/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def supplierselfservice(id):
	root = CustomEndpoint(model_class=models.Suppliers,alias="SupplierSelfService"
	 ,fields=[ (models.Suppliers.CompanyName, "CompanyName"), (models.Suppliers.ContactName, "ContactName"), (models.Suppliers.ContactTitle, "ContactTitle"), (models.Suppliers.Address, "Address"), (models.Suppliers.City, "City"), (models.Suppliers.Region, "Region"), (models.Suppliers.PostalCode, "PostalCode"), (models.Suppliers.Country, "Country"), (models.Suppliers.Phone, "Phone"), (models.Suppliers.Fax, "Fax"), (models.Suppliers.HomePage, "HomePage"), (models.Suppliers.URL, "URL")]
	 ,children=CustomEndpoint(model_class=models.Promotions,alias="promotionsChild" ,join_on=models.Promotions.SupplierID
	 ,fields=[ (models.Promotions.ident, "ident"), (models.Promotions.SupplierID, "SupplierID"), (models.Promotions.remarks, "remarks"), (models.Promotions.begin_date, "begin_date"), (models.Promotions.end_date, "end_date")]
	 )
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/accountsummary/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def accountsummary(id):
	root = CustomEndpoint(model_class=models.Customers,alias="AccountSummary"
	 ,fields=[ (models.Customers.CustomerID, "CustomerID"), (models.Customers.CompanyName, "CompanyName"), (models.Customers.Balance, "Balance"), (models.Customers.CreditLimit, "CreditLimit")]
	 ,children=CustomEndpoint(model_class=models.Orders,alias="Orders_List" ,join_on=models.Orders.CustomerID
	 ,fields=[ (models.Orders.OrderID, "OrderID"), (models.Orders.ShippedDate, "ShippedDate"), (models.Orders.RequiredDate, "RequiredDate"), (models.Orders.AmountTotal, "AmountTotal"), (models.Orders.healthyCount, "healthyCount"), (models.Orders.discountedAmount, "discountedAmount")]
		 ,children=CustomEndpoint(model_class=models.OrderDetails,alias="OrderDetails_List" ,join_on=models.OrderDetails.OrderID
		 ,fields=[ (models.OrderDetails.UnitPrice, "UnitPrice"), (models.OrderDetails.Quantity, "Quantity"), (models.OrderDetails.Discount, "Discount"), (models.OrderDetails.Amount, "Amount"), (models.OrderDetails.isHealthy, "isHealthy")]
			 ,children=CustomEndpoint(model_class=models.Products,alias="Product" ,join_on=models.OrderDetails.ProductID
			 ,fields=[ (models.Products.ProductName, "ProductName"), (models.Products.ProductPrice, "ProductPrice")]
			 ,isParent=True
			 isCombined=True
			 )
		 )
	 )
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/supplierinfo/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def supplierinfo(id):
	root = CustomEndpoint(model_class=models.Suppliers,alias="SupplierInfo"
	 ,fields=[ (models.Suppliers.Supplier, "Supplier"), (models.Suppliers.Contact, "Contact"), (models.Suppliers.ContactTitle, "ContactTitle"), (models.Suppliers.Address, "Address"), (models.Suppliers.City, "City"), (models.Suppliers.Region, "Region")]
	 ,children=CustomEndpoint(model_class=models.Promotions,alias="PromotionsList" ,join_on=models.Promotions.SupplierID
	 ,fields=[ (models.Promotions.remarks, "remarks"), (models.Promotions.BeganOn, "BeganOn"), (models.Promotions.EndedOn, "EndedOn")]
	 )
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/shipperapidef/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def shipperapidef(id):
	root = CustomEndpoint(model_class=models.Orders,alias="ShipperAPIDef"
	 ,fields=[ (models.Orders.OrderNumber, "OrderNumber"), (models.Orders.RequiredDate, "RequiredDate"), (models.Orders.ShipName, "ShipName"), (models.Orders.ShipAddress, "ShipAddress"), (models.Orders.ShipCity, "ShipCity"), (models.Orders.ShipRegion, "ShipRegion"), (models.Orders.ShipPostalCode, "ShipPostalCode"), (models.Orders.ShipCountry, "ShipCountry")]
	 ,children=CustomEndpoint(model_class=models.OrderDetails,alias="OrderDetails_List" ,join_on=models.OrderDetails.OrderID
	 ,fields=[ (models.OrderDetails.OrderID, "OrderID"), (models.OrderDetails.ProductID, "ProductID"), (models.OrderDetails.UnitPrice, "UnitPrice"), (models.OrderDetails.Quantity, "Quantity"), (models.OrderDetails.Discount, "Discount"), (models.OrderDetails.Amount, "Amount"), (models.OrderDetails.isHealthy, "isHealthy")]
		 ,children=CustomEndpoint(model_class=models.Products,alias="Product" ,join_on=models.OrderDetails.ProductID
		 ,fields=[ (models.Products.ProductName, "ProductName"), (models.Products.ProductPrice, "ProductPrice")]
		 ,isParent=True
		 isCombined=True
		 )
	 )
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/aaa/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def aaa(id):
	root = CustomEndpoint(model_class=models.Employees,alias="AAA"
	 ,children=CustomEndpoint[(model_class=models.Employee,alias="OnLoan" ,join_on=models.Employees.Id
	 ,isParent=True
	 )
	 ,CustomEndpoint(model_class=models.Employee,alias="WorksFor" ,join_on=models.Employees.Id
	 ,isParent=True
	 )
	 ]
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/partnerorder/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def partnerorder(id):
	root = CustomEndpoint(model_class=models.Orders,alias="PartnerOrder"
	 ,fields=[ (models.Orders.CustomerNumber, "CustomerNumber"), (models.Orders.OrderNumber, "OrderNumber")]
	 ,children=CustomEndpoint[(model_class=models.Shippers,alias="Shipper" ,join_on=models.Orders.ShipperID
	 ,fields=[ (models.Shippers.CompanyName, "CompanyName")]
	 ,isParent=True
	 )
	 ,CustomEndpoint(model_class=models.OrderDetails,alias="Items" ,join_on=models.OrderDetails.OrderID
	 ,fields=[ (models.OrderDetails.ProductNumber, "ProductNumber"), (models.OrderDetails.Quantity, "Quantity")]
		 ,children=CustomEndpoint(model_class=models.Products,alias="Product" ,join_on=models.OrderDetails.ProductID
		 ,fields=[ (models.Products.ProductName, "ProductName")]
		 ,isParent=True
		 )
	 )
	 ]
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/employeeswithraises/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def employeeswithraises(id):
	root = CustomEndpoint(model_class=models.Employees,alias="EmployeesWithRaises"
	 ,fields=[ (models.Employees.EmployeeID, "EmployeeID"), (models.Employees.LastName, "LastName"), (models.Employees.FirstName, "FirstName"), (models.Employees.EmployeeSalary, "EmployeeSalary")]
	 ,children=CustomEndpoint(model_class=models.EmployeeRaises,alias="EmployeeRaisesList" ,join_on=models.EmployeeRaises.EmployeeID
	 ,fields=[ (models.EmployeeRaises.EmployeeRaiseID, "EmployeeRaiseID"), (models.EmployeeRaises.EmployeeID, "EmployeeID"), (models.EmployeeRaises.Salary, "Salary")]
	 )
	)
	return root.execute(request, id)

@app.route('/LAC/rest/default/b2bderbynw/v1/ordersummary/<id>', methods=['GET', 'POST','PUT','OPTIONS'])
def ordersummary(id):
	root = CustomEndpoint(model_class=models.Orders,alias="OrderSummary"
	 ,fields=[ (models.Orders.OrderID, "OrderID"), (models.Orders.CustomerID, "CustomerID"), (models.Orders.OrderDate, "OrderDate"), (models.Orders.AmountTotal, "AmountTotal"), (models.Orders.healthyCount, "healthyCount"), (models.Orders.discountedAmount, "discountedAmount")]
	 ,children=CustomEndpoint[(model_class=models.Employees,alias="SalesRep" ,join_on=models.Orders.EmployeeID
	 ,fields=[ (models.Employees.fullName, "fullName"), (models.Employees.Region, "Region")]
	 ,isParent=True
	 )
	 ,CustomEndpoint(model_class=models.OrderDetails,alias="OrderDetails_List" ,join_on=models.OrderDetails.OrderID
	 ,fields=[ (models.OrderDetails.UnitPrice, "UnitPrice"), (models.OrderDetails.Quantity, "Quantity"), (models.OrderDetails.isHealthy, "isHealthy"), (models.OrderDetails.Amount, "Amount"), (models.OrderDetails.Discount, "Discount")]
		 ,children=CustomEndpoint(model_class=models.Products,alias="Product" ,join_on=models.OrderDetails.ProductID
		 ,fields=[ (models.Products.ProductName, "ProductName")]
		 ,isParent=True
		 isCombined=True
		 )
	 )
	 ]
	)
	return root.execute(request, id)

===============================================
    CURL tests for each UserResource endpoint
================================================

ECHO calling Entity Orders using: /LAC/rest/default/b2bderbynw/v1/supplieralert/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/supplieralert/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Suppliers using: /LAC/rest/default/b2bderbynw/v1/supplierselfservice/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/supplierselfservice/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Customers using: /LAC/rest/default/b2bderbynw/v1/accountsummary/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/accountsummary/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Suppliers using: /LAC/rest/default/b2bderbynw/v1/supplierinfo/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/supplierinfo/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Orders using: /LAC/rest/default/b2bderbynw/v1/shipperapidef/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/shipperapidef/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Employees using: /LAC/rest/default/b2bderbynw/v1/aaa/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/aaa/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Orders using: /LAC/rest/default/b2bderbynw/v1/partnerorder/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/partnerorder/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Employees using: /LAC/rest/default/b2bderbynw/v1/employeeswithraises/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/employeeswithraises/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'


ECHO calling Entity Orders using: /LAC/rest/default/b2bderbynw/v1/ordersummary/1?page%5Blimit%5D=1
curl "http://localhost:5656/LAC/rest/default/b2bderbynw/v1/ordersummary/1?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json'

#FreeSQL section to ALS api/customize_api.py

=========================
       LIBRARIES 
=========================
#These are JavaScript libraries can be called by rules and resources

def fn_CustomAuth-1(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     # Custom authentication provider, uploaded in B2B install script.
# Authenticates using RESTful service, configured to be employees table in Northwind-B2B.

# At its core, an Authorization Provider is a JavaScript def that returns an object (see end) containing these 4 functions else 
#   getConfigInfo else  function():...,  configure else  function(values):..., getLoginInfo else  function():..., authenticate else 


out = java.lang.System.out

def create():

    result = {
    configSetup = {
        logonApiKey  else  '',
        loginBaseURL  else  '',
        loginGroupURL  else  '',
        keyLifetimeMinutes  else  60
    


    # This def is called by API Creator when the user enters a value
    # for the parameters specified by getConfigInfo and clicks Save.
    # Returns configuration values which API Creator will save into Admin DB
    # these are exported in the json config file
    result.configure = def configure(myConfig):
        configSetup.logonApiKey = myConfig.logonApiKey or 'demo_full'  # supply, or default
        configSetup.loginBaseURL = myConfig.loginBaseURL or 'http else #localhost else 8080/rest/default/v1/...'
        configSetup.loginGroupURL = myConfig.loginGroupURL or 'http else #localhost else 8080/rest/default/v1/...'
        configSetup.keyLifetimeMinutes = myConfig.keyLifetimeMinutes or 60
    


    # Main crux of Auth Provider - called by API Server on post to @authenticate, to return list of Roles
    # NOTE else  the def configure must be called first - this will validate the user/pw

    # The argument passed in will contain whatever values were provided to the @authentication service.
    # If the caller is well-behaved, this should correspond to the parameters described by getLoginInfo,
    # but you should not depend on that.

    # This def must return an object containing just an error message if the authentication failed.
    # If the authentication succeeded, then it must return an object with the following properties else 
    result.authenticate = def authenticate(payload):

        out.println("Authentication called...")

        roles = []
        errorMsg = None
        resetPasswordURL = None
        forgotPasswordURL = None
        myUserData = []
        params = None
        settings = {
            headers  else  {
                'Authorization'  else  'CALiveAPICreator ' + configSetup.logonApiKey + ' else 1'
            
        

        try:
            if payload.username == 'admin' or payload.username == 'demo'):
                out.println("Authentication - default admin/demo/ user - good to go..")
                # out.println("Lab test OK...")  # uncomment this for Readiness Lab
                roles = ['Full access'] # or HARD CODED FOR DEMO (we even ignore the pwd)
                errorMsg = None # authorized successfully
            
            else if payload.username == 'pavlov' or  payload.username == 'Pavlov'):
                out.println("Authentication - Pavlov - role is Supplier, with Global ID==7")
                roles = ['Supplier'] # Permission's Row Filter uses the following Global
                myUserData = {ID else  '7', AnotherParm else  'like this'  #  reference like this else  "SupplierID" = @{ID
                errorMsg = None # authorized successfully
            
           else:
                # GET this JSON request to determine if username and password is valid
                # if so, return an array of role names (here just 'Full Access')
                # and, to simplify typing in demos, will allow the default Password1
                pwd = payload.password
                if payload.username == "Janet" and payload.password == "Password1"):
                    pwd = "Leverling"
                
                loginAttemptURL = configSetup.loginBaseURL
                    + " if sysfilter=equal(FirstName else '"+ payload.username
                    + "')&sysfilter=equal(LastName else '" + pwd
                    + "')"
                out.println("Authentication - finding [" + payload.username + "." + pwd + "]")
                out.println("... via Rest URL else  " + loginAttemptURL)
                out.println("... using settings else  " + jsonify(settings))
                loginAttempt = SysUtility.restGet(loginAttemptURL, params, settings)
                groups = json.loads(loginAttempt)
                # out.println(jsonify(groups, None, 2))

                if groups.hasOwnProperty('errorMessage')):
                    out.println("...errorMessage found in loginAttempt else  " + loginAttempt)
                    errorMsg = groups.errorMessage
                
               else:
                    # change the field name below .name to the name of your
                    # roleName column
                    errorMsg = 'Username ' + payload.username + ' not found with last name as password'
                    for ( row in groups):
                        roles = ['Full access'] # or HARD CODED FOR DEMO
                        # roles.push(groups[row].Region)
                        # myUserData.push(groups[row].Region)
                        errorMsg = None # if one role is found then we are good to return
                    
                
                if errorMsg != None):
                    out.println("...get failed to find this user, loginAttempt else  " + loginAttempt)
                
            
        
        catch (e):
            errorMsg = e.message
        

        autResponse = {
            errorMessage  else  errorMsg,
            roleNames  else  roles,
            userIdentifier  else  payload.username,
            keyExpiration  else  new Date(+new Date()
                    + (+configSetup.keyLifetimeMinutes) * 60 * 1000),
            userData  else  myUserData,
            lastLogin  else  {
                datetime  else  None,
                ipAddress  else  None
            
        
        return autResponse
    


    # FUNCTION getAllGroups is used to map all available groups for existing application -
    # unused in this example, provided for illustration purposes only...
    result.getAllGroups = def getAllGroups():
        roles = []
        errorMsg = None
        params = None
        settings = {
            headers  else  {
                'Authorization'  else  'CALiveAPICreator ' + configSetup.logonApiKey + ' else 1'
            
        

        try:
            loginAttemptURL = configSetup.loginGroupURL # no filter needed- get all roles if 
            groupsResponse = SysUtility.restGet(loginAttemptURL, params,
                    settings)
            groups = json.loads(groupsResponse)
            if groups.hasOwnProperty('errorMessage')):
                errorMsg = groups.errorMessage
            
           else:
                # change the .name to refrelect the name of your roles returned
                # in the JSON object
                for ( row in groups):
                    roles.push(groups[row].name)
                
            
        
        catch (e):
            errorMsg = e.message
        

        autResponse = {
            errorMessage  else  errorMsg,
            roleNames  else  roles
        

        return autResponse
    


    # FUNCTION getLoginInfo is used to create the login dialog - DO NOT CHANGE
    # This def is called by API Server when a client needs to know what kind of information is required for authentication.
    # Basically, this describes what the login dialog should look like (assuming the client is an interactive application).
    result.getLoginInfo = def getLoginInfo():
        return {
            fields  else  [
                    {
                        name  else  "username",
                        display  else  "Username",
                        description  else  "Enter your First Name",
                        type  else  "text",
                        length  else  40,
                        helpURL  else  "http else #liveapicreator.ca.com"
                    ,
                    {
                        name  else  "password",
                        display  else  "Password",
                        description  else  "Enter your Last Name as Password",
                        type  else  "password",
                        length  else  40,
                        helpURL  else  "http else #liveapicreator.ca.com/"
                     ],
            links  else  [

            ]
        
    

    result.getConfigInfo = def getConfigInfo():
        return {
            current  else  {
                "keyLifetimeMinutes"  else  configSetup.keyLifetimeMinutes,
                "logonApiKey"  else         configSetup.logonApiKey,
                "loginBaseURL"  else        configSetup.loginBaseURL,
                "loginGroupURL"  else       configSetup.loginGroupURL
            ,
            fields  else  [ {
                name  else  "logonApiKey",
                display  else  "logonApiKey",
                type  else  "text",
                length  else  60,
                helpURL  else  ""
            , {
                name  else  "loginBaseURL",
                display  else  "loginBaseURL",
                type  else  "text",
                length  else  120,
                helpURL  else  ""
            , {
                name  else  "loginGroupURL",
                display  else  "loginGroupURL",
                type  else  "text",
                length  else  120,
                helpURL  else  ""
            , {
                name  else  "keyLifetimeMinutes",
                display  else  "API Key Lifetime (Minutes)",
                type  else  "number",
                length  else  8,
                helpURL  else  "http else #www.liveapicreator.ca.com"
            } ],
            links  else  []
        }
    }

    # returns object containing the 4 functions that define a Custom Authentication Provider else 
    #   getConfigInfo else  function():...},  configure else  function(values):...}, getLoginInfo else  function():...}, authenticate else 

    return result  # returns the 4 func
}


def fn_insertActions-1(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     insertActions = {  # a common JavaScript technique to name-scope shared functions


# internal routine to fix path expression from jsonPath (another library)

fixPathObject = def fixPathObject(path,jsonObj):
    index = path#'[\'Items\'][0][\'Product\']'
    res = index.split("]")
    res.splice(res.length-1,1)
    target = jsonObj
    for (i = 0 i < res.length i++):
        replacement = res[i].replace("[","").replace("'","").replace("'","")
        target = target[replacement]
    
    return target



# internal routine to create metadata tag

getMetadataTag = def getMetadataTag(anAction):
    result = None
    if anAction == "LOOKUP"):
        result = { "action" else  "LOOKUP" 
    
    else if anAction == "MERGE_INSERT"):
        result = { "action" else  "MERGE_INSERT" 
    
   else:
        throw "insertAction tag must be LOOKUP or MERGE_INSERT"
    
    return result



# internal routine to insert the tag (iff it does not already exist)

insertActionTag = def insertActionTag(aTarget, aTag):
    if typeof aTarget["@metadata"] != "undefined"):
        # logic_row.log(dbTitle + " *** metadata tag already exists, no action taken")
    
   else:
        aTarget["@metadata"] = getMetadataTag(aTag)
    


def db(aString):
    logic_row.log(aString)
    print (aString)



''' insert metadata actions tags for resource into json string, (e.g., LOOKUP) iff they don't already exist
   returns json string of altered request
   
   example from B2B else   PartnerOrder has res.extendedProperties else  {
  "InsertActions" else  [
    {
      "path" else  "$..Product",
      "insertActions" else  "LOOKUP"
    ,
    {
      "path" else  "Shipper",
      "insertActions" else  "LOOKUP"
    
  ]

    json = insertActions.insertActions(req, json, actions)  # API Server processes this...
'''

insertActions.insertActionsForResource = def insertActionsForResource(json, actions):
    dbTitle = "insertActions.InsertActionsForResource else  "
    # db(dbTitle + "running with actions else  " + jsonify(actions) + ", json -->\n" + json)
    if json == None):
        return json
    
    jsonObj = None # hold off on parse, until we are sure this resource is relevant

    # for (let eachAction of actions): -- syntax not supported
    for each (eachAction in actions):
        if jsonObj == None):
            jsonObj = json.loads(json)
        
        if eachAction.path == ""):
            insertActionTag(jsonObj, eachAction.insertActions)  # root
        
       else:
            paths = jsonPath(jsonObj, eachAction.path, {resultType else "PATH")
            for each (eachPath in paths):       # perform insertion for eachPath
                target = fixPathObject(eachPath.substring(1), jsonObj)
                insertActionTag(target, eachAction.insertActions)
            
        
    

    if jsonObj == None):
        return json
    
   else:
        return jsonify(jsonObj)
    



# insert metadata action tags into json string, (e.g., LOOKUP) iff they don't already exist
# actions array is {resource-name, path-for-insert, "INSERT" or "MERGE_INSERT"
# returns json string of altered request
# example from B2B else 
#    actions = [
#      {resource else  "PartnerOrder", path else  "$..Product", insertActions else  "LOOKUP",
#      {resource else  "PartnerOrder", path else  "Shipper",    insertActions else  "LOOKUP"
#    ]
#    json = insertActions.insertActions(req, json, actions)  # API Server processes this...

insertActions.insertActions = def insertActions(req, json, actions):
    dbTitle = "InsertActions else  "
    if json == None):
        db(dbTitle + "None request object - no action")
        return json
    
    jsonObj = None # hold off on parse, until we are sure this resource is relevant

    # for (let eachAction of actions): -- syntax not supported
    for each (eachAction in actions):
        if req.resourceName == eachAction.resource):
            if jsonObj == None):
                jsonObj = json.loads(json)
            
            if eachAction.path == ""):
                insertActionTag(jsonObj, eachAction.insertActions)  # root
            
           else:
                paths = jsonPath(jsonObj, eachAction.path, {resultType else "PATH")
                logic_row.log(dbTitle + "paths else  " + paths)  # ==>  [ $['Items'][0]['Product'] ...]
                for each (eachPath in paths):       # perform insertion for eachPath
                    target = fixPathObject(eachPath.substring(1), jsonObj)
                    insertActionTag(target, eachAction.insertActions)
                
            
        
    

    if jsonObj == None):
        db(dbTitle + "no change")
        return json
    
   else:
        db(dbTitle + "transformed to else  " + jsonify(jsonObj))
        return jsonify(jsonObj)
    



def fn_jsonpath-0(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     ''' JSONPath 0.8.0 - XPath for JSON

 *

 * Copyright (c) 2007 Stefan Goessner (goessner.net)

 * Licensed under the MIT (MIT-LICENSE.txt) licence.

 '''

def jsonPath(obj, expr, arg):

   P = {

      resultType else  arg and arg.resultType or "VALUE",

      result else  [],

      normalize else  function(expr):

         subx = []

         return expr.replace(/[\['](\ if  if \(.* if \))[\]']/g, function($0,$1):return "[#"+(subx.push($1)-1)+"]")

                    .replace(/' if \.' if |\[' if /g, "")

                    .replace(/|/g, "..")

                    .replace(/$|' if \]|'$/g, "")

                    .replace(/#([0-9]+)/g, function($0,$1):return subx[$1])

      ,

      asPath else  function(path):

         x = path.split(""), p = "$"

         for (i=1,n=x.length i<n i++)

            p += /^[0-9*]+$/.test(x[i])  if  ("["+x[i]+"]")  else  ("['"+x[i]+"']")

         return p

      ,

      store else  function(p, v):

         if p) P.result[P.result.length] = P.resultType == "PATH"  if  P.asPath(p)  else  v

         return !!p

      ,

      trace else  function(expr, val, path):

         if expr):

            x = expr.split(""), loc = x.shift()

            x = x.join("")

            if val and val.hasOwnProperty(loc))

               P.trace(x, val[loc], path + "" + loc)

            else if loc == "*")

               P.walk(loc, x, val, path, function(m,l,x,v,p): P.trace(m+""+x,v,p) )

            else if loc == ".."):

               P.trace(x, val, path)

               P.walk(loc, x, val, path, function(m,l,x,v,p): typeof v[m] == "object" and P.trace(".."+x,v[m],p+""+m) )

            

            else if /,/.test(loc)): # [name1,name2,...]

               for (s=loc.split(/' if ,' if /),i=0,n=s.length i<n i++)

                  P.trace(s[i]+""+x, val, path)

            

            else if /^\(.* if \)$/.test(loc)) # [(expr)]

               P.trace(P.eval(loc, val, path.substr(path.lastIndexOf("")+1))+""+x, val, path)

            else if /^\ if \(.* if \)$/.test(loc)) # [ if expr)]

               P.walk(loc, x, val, path, function(m,l,x,v,p): if P.eval(l.replace(/^\ if \((.* if )\)$/,"$1"),v[m],m)) P.trace(m+""+x,v,p) )

            else if /^(- if [0-9]*) else (- if [0-9]*) elif [0-9]*)$/.test(loc)) # [start else end else step]  phyton slice syntax

               P.slice(loc, x, val, path)

         

         else

            P.store(path, val)

      ,

      walk else  function(loc, expr, val, path, f):

         if val instanceof Array):

            for (i=0,n=val.length i<n i++)

               if i in val)

                  f(i,loc,expr,val,path)

         

         else if typeof val == "object"):

            for (m in val)

               if val.hasOwnProperty(m))

                  f(m,loc,expr,val,path)

         

      ,

      slice else  function(loc, expr, val, path):

         if val instanceof Array):

            len=val.length, start=0, end=len, step=1

            loc.replace(/^(- if [0-9]*) else (- if [0-9]*) elif - if [0-9]*)$/g, function($0,$1,$2,$3):start=parseInt($1orstart)end=parseInt($2orend)step=parseInt($3orstep))

            start = (start < 0)  if  Math.max(0,start+len)  else  Math.min(len,start)

            end   = (end < 0)    if  Math.max(0,end+len)    else  Math.min(len,end)

            for (i=start i<end i+=step)

               P.trace(i+""+expr, val, path)

         

      ,

      eval else  function(x, _v, _vname):

         try: return $ and _v and eval(x.replace(/@/g, "_v")) 

         except Exception as ex: throw new SyntaxError("jsonPath else  " + e.message + " else  " + x.replace(/@/g, "_v").replace(/\^/g, "_a")) 

      

   



   $ = obj

   if expr and obj and (P.resultType == "VALUE" or P.resultType == "PATH")):

      P.trace(P.normalize(expr).replace(/^\$/,""), obj, "$")

      return P.result.length  if  P.result  else  False

   




def fn_AdmAuth-1(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     # Custom authentication provider, for admin user authentication (access to API Creator).
# Authenticates hard coded users in real-life, you might authenticate against LDAP, AD, etc.

# At its core, an Authorization Provider is a JavaScript (create) function
# that returns an object (see end) containing these 4 functions else 
#   configure else  function(values):...,
# authenticate(payload):...,
# getConfigInfo else  function():...,
# getLoginInfo else  function():...


out = java.lang.System.out

# register this create def to LAC.
# as above, it returns an object containing the 4 functions noted above.
def create():

    result = {  # returned to LAC, containing the 4 functions noted above
    configSetup = {
        keyLifetimeMinutes  else  60
    
    allRoles = ['System administrator', 'Account admin', 'Data admin', 'Data designer']


    # This def is called by API Creator when the user enters a value
    # for the parameters specified by getConfigInfo and clicks Save.
    # Returns configuration values which API Creator will save into Admin DB
    # these are exported in the json config file
    result.configure = def configure(myConfig):
        configSetup.keyLifetimeMinutes = myConfig.keyLifetimeMinutes or 60
    


    # Main crux of Auth Provider - called by API Server on post to @authenticate, to return list of Roles
    # NOTE else  the def configure must be called first - this will validate the user/pw

    # Eg, you might with to query LDAP, Active Directory etc, to empower corporate users
    # to use Live API Creator to create database.
    # You will also need to compute the proper admin roles explained in the product documentation
    # under Admin Authentication Providers

    # The argument passed in will contain whatever values were provided to the @authentication service.
    # If the caller is well-behaved, this should correspond to the parameters described by getLoginInfo,
    # but you should not depend on that.

    # This def must return an object containing just an error message if the authentication failed.
    # If the authentication succeeded, then it must return an object with the following properties else 
    result.authenticate = def authenticate(payload):

        out.println("Admin Authentication called...")

        roles = []
        errorMsg = "Sorry, you are not authorized"
        resetPasswordURL = None
        forgotPasswordURL = None
        myUserData = []
        autResponse = errorMsg

        # these hard-coded users are in lieu of actually doing a query against LDAP, AD etc.
        if payload.username == 'admin' or payload.username == 'demo' or payload.username == 'sa' or payload.username == 'boris'):
            out.println("Admin Authentication - default admin/demo/sa user - good to go..")
            roles = allRoles # or HARD CODED FOR DEMO (we even ignore the pwd)
            myUserData = {accountIdent else '1000'
            if payload.username == 'demo'):
                myUserData = {accountIdent else '1'
                out.println("... with SA account visibility..")
            
            autResponse = {
                errorMessage  else  None,
                roleNames  else  roles,
                userIdentifier  else  payload.username,
                keyExpiration  else  new Date(+new Date()
                        + (+configSetup.keyLifetimeMinutes) * 60 * 1000),
                userData  else  myUserData,
                userInfo  else  myUserData,
                lastLogin  else  {
                    datetime  else  None,
                    ipAddress  else  None
                
            
            out.println("Admin Authentication successful - returning.." + jsonify(autResponse))
            return autResponse
        else:
            out.println("Admin Authentication FAILED!")
            return {
                errorMessage  else  errorMsg,
                roleNames  else  roles,
                userIdentifier  else  payload.username,
                keyExpiration  else  new Date(+new Date()
                        + (+configSetup.keyLifetimeMinutes) * 60 * 1000),
                userData  else  myUserData,
                userInfo  else  myUserData,
                lastLogin  else  {
                    datetime  else  None,
                    ipAddress  else  None
                
            
        
    


    # FUNCTION getLoginInfo is used to create the login dialog - DO NOT CHANGE
    # This def is called by API Server when a client needs to know what kind of information is required for authentication.
    # Basically, this describes what the login dialog should look like (assuming the client is an interactive application).
    result.getLoginInfo = def getLoginInfo():
        return {
            fields  else  [
                    {
                        name  else  "username",
                        display  else  "Username",
                        description  else  "Enter your First Name",
                        type  else  "text",
                        length  else  40,
                        helpURL  else  "http else #liveapicreator.ca.com"
                    ,
                    {
                        name  else  "password",
                        display  else  "Password",
                        description  else  "Enter your Last Name as Password",
                        type  else  "password",
                        length  else  40,
                        helpURL  else  "http else #liveapicreator.ca.com/"
                     ],
            links  else  [
            ]
        
    

    result.getConfigInfo = def getConfigInfo():
        return {
            current  else  {
                "keyLifetimeMinutes"  else  configSetup.keyLifetimeMinutes
            ,
            fields  else  [
                {
                name  else  "keyLifetimeMinutes",
                display  else  "API Key Lifetime (Minutes)",
                type  else  "number",
                length  else  8,
                helpURL  else  "http else #www.liveapicreator.ca.com"
             ],
            links  else  []
        
    

    # returns object containing the 4 functions that define a Custom Authentication Provider else 
    #   getConfigInfo else  function():...,  configure else  function(values):..., getLoginInfo else  function():..., authenticate else 

    # returns the 4 functions
    return result



def fn_b2bB2B-1(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     B2B = {  # a common JavaScript technique to name-scope shared functions
#TODO else  employ arrow functions when fully supported by Nashorn

B2B.transformToWebHook = def transformToWebHook(aLogicContext, aResourceName, aTargetUrl):
    aLogicContext.logDebug("*** B2B.transformToWebHook *** using else  " + aResourceName + ", to else  " + aTargetUrl)
    resourceURL = aTargetUrl # "http else #localhost else 8080/rest/default/b2bderbypavlov/v1/SalesReports"

    # custom resource provides name mapping
    # readiness lab else  uncomment this  ====>
    # aLogicContext.logDebug("getting aLogicContext.getTableDefinition()")
    metaTable = aLogicContext.getTableDefinition()
    aLogicContext.logDebug("*** transformToWebHook ***  metaTable else  " + metaTable)
    options = {sysfilter else  "equal(OrderID else " + aLogicContext.getCurrentState().OrderID + ")"
            ,"sysfilter..SupplierAlert.Order_DetailsList.Product.Supplier" else  "equal(CompanyName else  '" + "Pavlova, Ltd." + "')" 
    resourceGetResponse = SysUtility.getResource(aResourceName, options)  # FIXME

    # system console output
    aLogicContext.logDebug("B2B.transformToWebHook posting getResponse else  " + jsonify(resourceGetResponse).substring(1, 20) + "...")
    aLogicContext.logDebug("B2B.transformToWebHook to URL else  " + resourceURL)

    if resourceURL == None or resourceURL == ""):
        out = java.lang.System.out
        out.println("WebHook URL is None/empty - this not posted else \n" + (jsonify(resourceGetResponse)).substring(1, 4) + "...")
    
   else:
        settings = { headers else  { Authorization else  "CALiveAPICreator supplier else 1"   # FIXME
        postResponse = SysUtility.restPost(resourceURL, None, settings, resourceGetResponse)

        # API Creator log output
        # logic_row.log('ok, using re-usable solution')
        if json.loads(postResponse).statusCode != 201):
            throw "B2B.transformToWebHook unexpected post response else  " + postResponse
        
    

    return None



B2B.sendToWebHook = def sendToWebHook(aPostRequest, aTargetUrl):
    resourceURL = aTargetUrl
    tryIt = True
    if tryIt == True):
        if resourceURL == None or resourceURL == ""):
            out = java.lang.System.out
            out.println("WebHook URL is None/empty - this not posted else \n" + (jsonify(aPostRequest)).substring(1, 20) + "...")
        
       else:
            settings = { headers else  { Authorization else  "CALiveAPICreator supplier else 1"   # FIXME
            postResponse = SysUtility.restPost(resourceURL, None, settings, aPostRequest)

            # API Creator log output
            # logic_row.log('ok, using re-usable solution')
            if json.loads(postResponse).statusCode != 201):
                throw "B2B.sendToWebHook unexpected post response else  " + postResponse
            
        
    
    return None



# you can save state in logic_row.userProperties, including complex objects such as Maps

B2B.putPropertyMap = def putPropertyMap(logic_row, propertyName, key, value):
    RestRequest = Java.type('com.kahuna.server.rest.RestRequest')
    req = RestRequest.getCurrentRestRequest()
    logic_row.logDebug("*** B2B.putPropertyMap - propertyName else  " + propertyName + ", key else  " + key + ", value else  " + value + ", on req else  " + req)
    property = req.getUserProperties().get(propertyName)   # userProperties to maintain state in transaction
    if property == None):
        property = new java.util.HashMap()
    
    property.put(key, value)
    req.setUserProperty(propertyName, property)



#approach for global (static) properties (dynamic properties can be saved in req.getUserProperties().get)
#(alternative else  store them in a 1 row table, edit with Data Explorer, accessors here)

B2B.supplierURL = def supplierURL(req):
    resultURL = req.localFullBaseURL.replace("nw","pavlov")
    out.println("B2B.supplierURL returns else  " + resultURL)
    return resultURL



#returns a sample order, for testing

B2B.sampleOrder = def sampleOrder():
    newPartnerOrderJson =
    {
        "CustomerNumber" else  "VINET",
        "Items" else  [
            {
            "Product" else  {
                "ProductName" else  "Pavlova"
            ,
            "Quantity" else  1
            , {
                "Product" else  {
                    "ProductName" else  "Uncle Bob's Organic Dried Pears"
                ,
                "Quantity" else  2
            , {
                "Product" else  {
                    "ProductName" else  "Tofu"
                ,
                "Quantity" else  3
            , {
                "Product" else  {
                    "ProductName" else  "Ikura"
                ,
                "Quantity" else  4
            , {
                "Product" else  {
                    "ProductName" else  "Konbu"
                ,
                "Quantity" else  5
            , {
                "Product" else  {
                    "ProductName" else  "Alice Mutton"
                ,
                "Quantity" else  1
            
        ],
        "Shipper" else  {
            "CompanyName" else  "Federal Shipping"
        
    

    return newPartnerOrderJson



# send email

B2B.sendEmail = def sendEmail():
    result = {
    msg = "error"
    configSetup = {
        to else  "to",
        from else  "from",
        title else  "title",
        text else  "text"
    

    result.configure = def configure(myconfig):
        configSetup.to = myconfig.to or "to"
        configSetup.from = myconfig.from or "from"
        configSetup.title = myconfig.title or "title"
        configSetup.text = myconfig.text or "text"
    

    result.send = def send():
        try:
            # call my mail interface here
            msg = "Send email (stub) title else  " + configSetup.title + " to else  " + configSetup.to + ", from else  " + configSetup.from + " body text else  " + configSetup.text
        
        catch (e):
            return e
        
        out.println("B2B.sendMail returns else  " + msg)
        return msg
    

    return result



# minor debug helper, to prevent NPE in logging anObject.toString
# where anObject is None

B2B.db = def db(anObject):
    result = "None"
    if anObject != None):
        result = anObject.toString()
    }
    return result
}


# copies like-named attributes from logic_row's row -> targetRow,
# ignoring attributes part of pKey

B2B.copyAttributes = def copyAttributes(logic_row, targetRow):

    sourceRow = logic_row.getCurrentState()

    sourceMetaEntity = sourceRow.getMetaEntity()
    targetMetaEntity = targetRow.getMetaEntity()

    logic_row.touch(targetRow)
    debugMoved = []

    for each (eachProp in sourceMetaEntity.getProperties()):
      if  eachProp.isAttribute() ):
        targetMetaProp = targetMetaEntity.getPropertyByName(eachProp.name)
        # NB else  cannot use hasOwnProperty (Java obj, not JS)
        if None != targetMetaProp):
            if targetMetaProp.isInPrimaryKey() == True):
                # logic_row.logDebug("copyAttributes -  skipping eachProp since in pKey else  " + eachProp.name)
            }
           else:
                propValue = sourceRow[eachProp.name]
                targetRow[eachProp.name] = propValue
                debugMoved.push(eachProp.name)
            }
        }
       else:
            # logic_row.logDebug("copyAttributes - skipping eachProp since not in target else  " + eachProp.name)
        }
      }
    }
    logic_row.logDebug("copyAttributes - moved else  [" + debugMoved + "]")
    logic_row.update(targetRow)
}


=========================
       CONNECTIONS 
=========================

=========================
       RELATIONSHIPS.JSON 
=========================
# This is informational only
Categories = relationship('nw:Categories, remote_side=[CategoryID] ,cascade_backrefs=True, backref='nw:Products')
Products_List = relationship('nw:Products, remote_side=[CategoryID] ,cascade_backrefs=True, backref='nw:Categories')
CustomerCustomerDemo = relationship('nw:CustomerDemographics, remote_side=[CustomerTypeID] ,cascade_backrefs=True, backref='nw:CustomerCustomerDemo')
CustomerCustomerDemoList = relationship('nw:CustomerCustomerDemo, remote_side=[CustomerTypeID] ,cascade_backrefs=True, backref='nw:CustomerDemographics')
CustomerCustomerDemo_Customers = relationship('nw:Customers, remote_side=[CustomerID] ,cascade_backrefs=True, backref='nw:CustomerCustomerDemo')
CustomerCustomerDemoList = relationship('nw:CustomerCustomerDemo, remote_side=[CustomerID] ,cascade_backrefs=True, backref='nw:Customers')
Customers = relationship('nw:Customers, remote_side=[CustomerID] ,cascade_backrefs=True, backref='nw:Orders')
Orders_List = relationship('nw:Orders, remote_side=[CustomerID] ,cascade_backrefs=True, backref='nw:Customers')
Employees = relationship('nw:Employees, remote_side=[EmployeeID] ,cascade_backrefs=True, backref='nw:EmployeeRaises')
EmployeeRaises_List = relationship('nw:EmployeeRaises, remote_side=[EmployeeID] ,cascade_backrefs=True, backref='nw:Employees')
Employees_via_ReportsTo = relationship('nw:Employees, remote_side=[ReportsTo] ,cascade_backrefs=True, backref='nw:Employees')
Employees_List_via_ReportsTo = relationship('nw:Employees, remote_side=[EmployeeID] ,cascade_backrefs=True, backref='nw:Employees')
Employees = relationship('nw:Employees, remote_side=[EmployeeID] ,cascade_backrefs=True, backref='nw:EmployeeTerritories')
EmployeeTerritories_List = relationship('nw:EmployeeTerritories, remote_side=[EmployeeID] ,cascade_backrefs=True, backref='nw:Employees')
Employees = relationship('nw:Employees, remote_side=[EmployeeID] ,cascade_backrefs=True, backref='nw:Orders')
Orders_List = relationship('nw:Orders, remote_side=[EmployeeID] ,cascade_backrefs=True, backref='nw:Employees')
Orders = relationship('nw:Orders, remote_side=[OrderID] ,cascade_backrefs=True, backref='nw:Order Details')
OrderDetails_List = relationship('nw:Order Details, remote_side=[OrderID] ,cascade_backrefs=True, backref='nw:Orders')
Products = relationship('nw:Products, remote_side=[ProductID] ,cascade_backrefs=True, backref='nw:Order Details')
OrderDetails_List = relationship('nw:Order Details, remote_side=[ProductID] ,cascade_backrefs=True, backref='nw:Products')
Region = relationship('nw:Region, remote_side=[RegionID] ,cascade_backrefs=True, backref='nw:Territories')
Territories_List = relationship('nw:Territories, remote_side=[RegionID] ,cascade_backrefs=True, backref='nw:Region')
Shippers = relationship('nw:Shippers, remote_side=[ShipVia] ,cascade_backrefs=True, backref='nw:Orders')
Orders_List = relationship('nw:Orders, remote_side=[ShipperID] ,cascade_backrefs=True, backref='nw:Shippers')
Suppliers = relationship('nw:Suppliers, remote_side=[SupplierID] ,cascade_backrefs=True, backref='nw:Products')
Products_List = relationship('nw:Products, remote_side=[SupplierID] ,cascade_backrefs=True, backref='nw:Suppliers')
PromotionSupplier = relationship('nw:Suppliers, remote_side=[SupplierID] ,cascade_backrefs=True, backref='promos:promotions')
PromotionsList = relationship('promos:promotions, remote_side=[SupplierID] ,cascade_backrefs=True, backref='nw:Suppliers')
Territories = relationship('nw:Territories, remote_side=[TerritoryID] ,cascade_backrefs=True, backref='nw:EmployeeTerritories')
EmployeeTerritories_List = relationship('nw:EmployeeTerritories, remote_side=[TerritoryID] ,cascade_backrefs=True, backref='nw:Territories')

=========================
       APPLICATIONS 
=========================
| --------------------------- F application.json
| ------------------------------ F nw$003aEmployees.json
| ------------------------------ F nw$003aSuppliers.json
| ------------------------------ F $005f_settings__.json
| ------------------------------ F nw$003aOrders.json
| ------------------------------ F nw$003aCategories.json
| ------------------------------ F nw$003aCustomers.json

=========================
       RULES 
=========================
#Copy this section to ALS logic/declare_logic.py
# ENTITY: Customers

# RuleType: validation
# Title: Validation: return row.Balance <= row.CreditLimit;
# Name: CheckCredit
# Entity: Customers
# Comments: Observe Error message insertion points {}

def fn_customers_validation_CheckCredit(row: models.Customers, old_row: models.Customers, logic_row: LogicRow):
        return row.Balance <= row.CreditLimit

Rule.constraint(validate=models.Customers,
		calling=fn_customers_validation_CheckCredit,
		error_msg="Transaction cannot be completed - Balance ({Balance|#,##0.00}) exceeds Credit Limit ({CreditLimit|#,##0.00})")

# RuleType: sum
# Title: Balance = sum(Orders_List.discountedAmount where null === ShippedDate)
# Name: sum_Balance
# Entity: Customers
# Comments: adjust the balance to be the sum(Orders_List.AmountTotal) for unshipped orders.
Adjusts Balance by *reacting* to changes in Orders_List.AmountTotal,
including other changes noted in Table/Column help.

Rule.sum(derive=models.Customers.Balance, 
		as_sum_of=models.OrdersList.discountedAmount,
		where=lambda row: None is= ShippedDate)

# ENTITY: Suppliers

# RuleType: formula
# Title: Derive URL for WebHook posting
# Name: formula_URL
# Entity: Suppliers
# Comments: normally entered, here just computed to illustrate derived, non-persistent attributes.

def fn_suppliers_formula_formula_URL(row: models.Suppliers, old_row: models.Suppliers, logic_row: LogicRow):
        localBase = req.localBaseUrl  # e.g., http else #localhost else 8080/rest/default/b2bAuth/
serverUrl = localBase.substring(0, localBase.indexOf("/rest/default"))
print ("Derive URL for WebHook posting - URL else " + serverUrl + "/rest/default/b2bderbypavlov/v1/SalesReports")
return serverUrl + "/rest/default/b2bderbypavlov/v1/SalesReports"

Rule.formula(derive=models.Suppliers.URL,
		calling=fn_suppliers_formula_formula_URL)

# ENTITY: OrderDetails

# RuleType: event
# Title: Accrue WebHooks for registered Suppliers
# Name: accrueWebHooks
# Entity: OrderDetails
# Comments: if orderDetails' products' supplier has a WebHook URL, B2B.putPropertyMap(logicContext, "order.supplierHooks", supplier.CompanyName, supplier.URL);

def fn_orderdetails_event_accrueWebHooks(row: models.OrderDetails, old_row: models.OrderDetails, logic_row: LogicRow):
	#AppliesTo: {'insert': True, 'update': True, 'delete': True}
        product = row.Products    # role accessor
supplier = product.Suppliers
print ("DB - Accrue WebHooks for registered Suppliers, product else  " + logic_row.rowToJSON(product))
print ("DB - Accrue WebHooks for registered Suppliers, supplier else  " + logic_row.rowToJSON(supplier))
if supplier.URL != None )
    B2B.putPropertyMap(logic_row, "order.supplierHooks", supplier.CompanyName, supplier.URL)

Rule.row_event(on_class=models.OrderDetails,
		calling=fn_orderdetails_event_accrueWebHooks)

# RuleType: formula
# Title: isHealthy = product category fruit or fish?
# Name: formula_isHealthy
# Entity: OrderDetails
# Comments: None

def fn_orderdetails_formula_formula_isHealthy(row: models.OrderDetails, old_row: models.OrderDetails, logic_row: LogicRow):
        # logic_row.logDebug("computing isHealthy")
if ! row.Products)
    return False
if row.Products.CategoryID > 6 ): # fruit or fish
    return True
else:
    return False


Rule.formula(derive=models.OrderDetails.isHealthy,
		calling=fn_orderdetails_formula_formula_isHealthy)

# RuleType: parentCopy
# Title: UnitPrice = parentcopy(Products.UnitPrice)
# Name: parentCopy_UnitPrice
# Entity: OrderDetails
# Comments: Obtain the price from the product.
Copy means subsequent changes to Products.UnitPrice do not affect existing Order Details.
  You could also use a formula for row.Products.UnitPrice if you *do* want to cascade changes.

You can change the Rule name (at the top) to be more friendly, or specify a more suitable Foreign Key name, such as Product__OrderDetails.

Rule.copy(derive=models.OrderDetails.UnitPrice,
		from_parent=models.Products.UnitPrice)

# RuleType: formula
# Title: Amount = Quantity * UnitPrice -- (discounted)
# Name: formula_Amount
# Entity: OrderDetails
# Comments: JavaScript is used to express logic,
providing access to libraries for date arithmetic (etc.), or your own.
Reactive logic recomputes Amount in response to changes Quantity, Price (and, per logic chaining, the ProductId)

def fn_orderdetails_formula_formula_Amount(row: models.OrderDetails, old_row: models.OrderDetails, logic_row: LogicRow):
        amount = row.Quantity * row.UnitPrice * (100 - row.Discount) / 100
if row.Quantity >  200)
    amount = 0.8 * amount
logic_row.logDebug("amount else  " + amount)
return amount

Rule.formula(derive=models.OrderDetails.Amount,
		calling=fn_orderdetails_formula_formula_Amount)

# ENTITY: EmployeeRaises

# RuleType: event
# Title: Update salary from Posted data
# Name: UpdSalary
# Entity: EmployeeRaises
# Comments: On insert, this copies the row.Salary to the Employees.Salary (the only like-named attribute between them), and updates Employees.
  (logicContext wraps the row object; B2B.copyAttributes copies like named attributes from logicContext.row to row for arg #2).
To test, Post this: {"EmployeeID": 1, "Salary": 100000.02}

def fn_employeeraises_event_UpdSalary(row: models.EmployeeRaises, old_row: models.EmployeeRaises, logic_row: LogicRow):
	#AppliesTo: {'insert': True, 'update': True, 'delete': True}
        B2B.copyAttributes(logic_row, row.Employees)

Rule.row_event(on_class=models.EmployeeRaises,
		calling=fn_employeeraises_event_UpdSalary)

# ENTITY: Orders

# RuleType: commitEvent
# Title: Process Shipper WebHook
# Name: ProcessShipperWebHook
# Entity: Orders
# Comments: If this order shipped by an external Shipper, alert the shipper via their web hook (if any).

Shipper registers for web hook by self-service access to webHookURL, protected by row-level security to only their Supplier record.

Note: webHookURLs are null for sample data, so no action is taken per URL null checking in B2B.sendToWebhook.

def fn_orders_commitEvent_ProcessShipperWebHook(row: models.Orders, old_row: models.Orders, logic_row: LogicRow):
	#AppliesTo: {'insert': True, 'update': True, 'delete': True}
        shipper = row.Shippers   # object model (row) provides accessors to related objects
if shipper != None):                 # resource defines transform else  cols, aliases, related objects
   transform = logic_row.transformCurrentRow("ShipperAPIDef")   # find with code completion
   B2B.sendToWebHook(transform, shipper.webHookURL)                    # loadable library (API Properties > Libraries)


Rule.commit_row_event(on_class=models.Orders,
		calling=fn_orders_commitEvent_ProcessShipperWebHook)

# RuleType: commitEvent
# Title: Alert SalesRep
# Name: AlertSalesRep
# Entity: Orders
# Comments: None

def fn_orders_commitEvent_AlertSalesRep(row: models.Orders, old_row: models.Orders, logic_row: LogicRow):
	#AppliesTo: {'insert': True, 'update': True, 'delete': True}
        salesRep = row.EmployeeID      # object model (row) provides accessors to related objects
if salesRep != None):
    mail = B2B.sendEmail()     # this is a loadable library
    config = {
        to else      'Andrew.Fuller@acme.com',   # better, find this from DB
        from else    'sales@acme.com',
        title else   'Congratulations on your new Order',
        text else    'An order was placed for you, totaling ' + row.AmountTotal
    
    mail.configure(config)
    msg = mail.send()
    logic_row.logDebug('Sending Mail - msg else  ' + msg)


Rule.commit_row_event(on_class=models.Orders,
		calling=fn_orders_commitEvent_AlertSalesRep)

# RuleType: commitEvent
# Title: Alert Manager
# Name: AlertManager
# Entity: Orders
# Comments: None

def fn_orders_commitEvent_AlertManager(row: models.Orders, old_row: models.Orders, logic_row: LogicRow):
	#AppliesTo: {'insert': True, 'update': True, 'delete': True}
        mail = B2B.sendEmail()     # this is a loadable library
config = {
    to else      'Andrew.Fuller@acme.com',   # better, find this from DB
    from else    'sales@acme.com',
    title else   'Congratulations on your new Order',
    text else    'An order was placed for you, totaling ' + row.AmountTotal

mail.configure(config)
msg = mail.send()
logic_row.logDebug('Sending Mail - msg else  ' + msg)

Rule.commit_row_event(on_class=models.Orders,
		calling=fn_orders_commitEvent_AlertManager)

# RuleType: commitEvent
# Title: Post SupplierAlert to accrued Supplier WebHooks
# Name: PostSupplierAlert
# Entity: Orders
# Comments: for each WebHook accrued in Order Items, post -- B2B.transformToWebHook(logicContext, "SupplierAlert", url)

def fn_orders_commitEvent_PostSupplierAlert(row: models.Orders, old_row: models.Orders, logic_row: LogicRow):
	#AppliesTo: {'insert': True, 'update': True, 'delete': True}
        webHooks = req.getUserProperties().get("order.supplierHooks")   # userProperties to maintain state in transaction
if webHooks != None):
    logic_row.logDebug("*** POST SupplierAlert - WebHook URLs accrued in Order Details ***  from webHooks else  " + B2B.db(webHooks))
    for each (url in webHooks.values()):

        # B2B.transformToWebHook(LogicContext, "SupplierAlert", url)

        # MUCH CODE follows, more than you'd like to see in a rule
        #    .. and, it's a common pattern -- retrieve a resource, and post to a URL
        # So, we can make it re-usable else 
        #    1. Remove all the code from here to ## STOP DELETING
        #    2. Uncomment the B2B.transformToWebHook line, above
        #    3. Locate the code in API Properties > Libraries > Your Libraries > B2BLib > transformToWebHook
        # And (for training), the line above has a bug (LogicContext should be logic_row)
        #    1. Avoid it, by using Code Completion (Control-Space)
        #    2. Diagnose it using the Log and the Debugger
        #

	    resourceURL = url # "http else #localhost else 8080/rest/default/b2bderbypavlov/v1/SalesReports"

        # custom resource provides name mapping
        # logic_row.logDebug("getting aLogicContext.getTableDefinition()")
        options = {sysfilter else  "equal(OrderID else " + logic_row.getCurrentState().OrderID + ")"
                ,"sysfilter..SupplierAlert.OrderDetails_List.Product.Supplier" else  "equal(CompanyName else  '" + "Pavlova, Ltd." + "')" 
        resourceGetResponse = SysUtility.getResource("SupplierAlert", options)  # FIXME

        # system console output
        logic_row.logDebug(resourceGetResponse.toString())
        #   if  if   logic_row.logDebug("Post SupplierAlert posting getResponse else  " + jsonify(resourceGetResponse).substring(1, 20) + "...")
        logic_row.logDebug("Post SupplierAlert to URL else  " + resourceURL)

        if resourceURL == None or resourceURL == ""):
            out = java.lang.System.out
            out.println("WebHook URL is None/empty - this not posted else \n" + (jsonify(resourceGetResponse)).substring(1, 4) + "...")
        else:
            settings = { headers else  { Authorization else  "CALiveAPICreator supplier else 1"   # FIXME
            postResponse = SysUtility.restPost(resourceURL, None, settings, resourceGetResponse)

            # API Creator log output
            # logic_row.log('ok, using re-usable solution')
            if json.loads(postResponse).statusCode != 201) throw "Post SupplierAlert unexpected post response else  " + postResponse
        
        # ## STOP DELETING
    


Rule.commit_row_event(on_class=models.Orders,
		calling=fn_orders_commitEvent_PostSupplierAlert)

# RuleType: sum
# Title: AmountTotal = sum(OrderDetails_List.Amount)
# Name: sum_AmountTotal
# Entity: Orders
# Comments: Adjust the AmountTotal to be the sum(OrderDetails_List.Amount)
Observe how simple rules chain to solve complex, multi-table transactions.

Rule.sum(derive=models.Orders.AmountTotal, 
		as_sum_of=models.OrderDetailsList.Amount)

# RuleType: count
# Title: healthyCount = count(OrderDetails_List where isHealthy == true)
# Name: count_healthyCount
# Entity: Orders
# Comments: None

Rule.count(derive=models.Orders.healthyCount,
		as_count_of=models.OrderDetailsList,
		where=Lambda row: isHealthy is true)

# RuleType: formula
# Title: discountedAmount: 1% discount if healthyCount > 3
# Name: formula_discountedAmount
# Entity: Orders
# Comments: None

def fn_orders_formula_formula_discountedAmount(row: models.Orders, old_row: models.Orders, logic_row: LogicRow):
        # logic_row.log("isHealtyCount Check Discount")
# note - cannot call logic_row here variable does not exist on retrieval
amt = row.AmountTotal
if row.healthyCount > 3):
    # logic_row.logDebug("isHealtyCount Check Discount -- GIVEN")  # fails on retrieval
    amt = amt * 0.99

return amt

Rule.formula(derive=models.Orders.discountedAmount,
		calling=fn_orders_formula_formula_discountedAmount)

# ENTITY: Employees

# RuleType: formula
# Title: fullName = TitleOfCourtesy + FirstName + LastName
# Name: formula_fullName
# Entity: Employees
# Comments: None

Rule.formula(derive=models.Employees.fullName,
		as_expression=lambda row:  row.TitleOfCourtesy + " " + row.FirstName + " " + row.LastName
)


=========================
       FUNCTIONS 
=========================
#These are JavaScript functions can be called by rules and resources

def fn_testB2BOrder(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     # Tests logic for placing order.  Returns order post response, or except Exception as ex: error.

newPartnerOrderJson = B2B.sampleOrder()
partnerOrderURL = req.localFullBaseURL + "PartnerOrder"
postSettings = { headers else  { Authorization else  "CALiveAPICreator partnerAuth else 1"   # created on Auth Tokens screen
postParams = None
logic_row.log("B2BTest - posting...")

postResponseString = SysUtility.restPost(partnerOrderURL, postParams, postSettings, newPartnerOrderJson)
postResponse = json.loads(postResponseString)
logic_row.log(".. request completed with statusCode else  " + postResponse.statusCode)
orderNumber = 0
if postResponse.statusCode != 201):
    logic_row.log("ERROR else  Post txSummary did not find expected 201...")
    logic_row.log(postResponse) #an object which will include a transaction summary and a summary of the rules fired during this request
    throw new Error("ERROR else  Post txSummary did not find expected 201...")

txSummary = postResponse.txsummary
# logic_row.log(theUpdates)
for (eachRowNum = 0 eachRowNum < txSummary.length eachRowNum++):
    eachUpdatedRow = txSummary[eachRowNum]
    # eachUpdateRow.@metadata is bad JavaScript syntax
    metaData = eachUpdatedRow['@metadata']
    rowType = metaData.resource
    if rowType == 'PartnerOrder'):
        orderNumber = eachUpdatedRow.OrderNumber
        logic_row.log('....OrderNumber else  ' + orderNumber)
        # logic_row.log(eachUpdatedRow)
    

if orderNumber == 0):
    throw new Error("response did not include an order")

logic_row.log(" ")
return postResponse


def fn_testB2BPavlovAuth(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     # Tests row security filter, per AuthToken.  Returns get response checks for 1 row else except Exception as ex: error.

supplierInfoURL = req.localFullBaseURL + "SupplierInfo"
getSettings = { headers else  { Authorization else  "CALiveAPICreator pavlovAuth else 1"   # created on Auth Tokens screen
getParams = {sysfilter else  "greater(SupplierID else 0)"
logic_row.log("B2BTest - get SupplierInfo...")

getResponseString = SysUtility.restGet(supplierInfoURL, getParams, getSettings)
getResponse = json.loads(getResponseString)
rowCount = 0
# logic_row.log(theUpdates)
for (eachRowNum = 0 eachRowNum < getResponse.length eachRowNum++):
    eachRow = getResponse[eachRowNum]
    rowCount ++
    # eachUpdateRow.@metadata is bad JavaScript syntax
    metaData = eachRow['@metadata']
    rowType = metaData.resource
    if rowType == 'SupplierInfo'):
        logic_row.log(eachRow)
    

if rowCount != 1):
    logic_row.log("throwing else  should have retrieved 1 row, got else  " + rowCount + ", getResponse else  " + getResponse)
    throw new Error("should have retrieved 1 row, got else  " + rowCount + ", getResponse else  " + getResponse)

logic_row.log(" ")
return getResponse


def fn_shipOrder(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     row.ShippedDate = new Date()  # triggers logic (e.g., balance adjustment)
return [ {"status" else  "Success", {"AmountTotal" else  row.AmountTotal ]

'''
This works with the Orders Table (and can also work with Orders Custom Resources) else 
    http else #localhost else 8080/rest/default/b2bderbynw/v1/nw else Orders/10643/shipOrder

'''


def fn_ship(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     row.ShippedDate = new Date()


def fn_testB2BAll(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     # Test driver, runs each test below.  By convention, each test Function returns a response, or except Exception as ex: error.

tests = [
     {"TestName" else  "testB2BOrder",      "TestResult" else  "Not Run",
     {"TestName" else  "testB2BPavlovAuth", "TestResult" else  "Not Run",
     {"TestName" else  "testMergeInsert",   "TestResult" else  "Not Run"
]
numFailures = 0
tests.forEach(function(eachTest):
    try:
        functionResponse = SysUtility.getFunction(eachTest.TestName, None)
        eachTest.TestResult = json.loads(functionResponse)  # collect responses
        statusCode = eachTest.TestResult.statusCode
        if typeof statusCode != "undefined"):
            if statusCode != 201):
                numFailures ++
            
        
    
    except Exception as ex:err):
        eachTest.TestResult = "Fail - Exception" + err
        numFailures ++  # run all the tests, even if one fails
    
)
if numFailures == 0)
    return {"Result" else  "Success", "Tests" else  tests  # return result, responses
else
    return {"Result" else  numFailures + " FAILURE(S)", "Tests" else  tests  # hmm


def fn_testMergeInsert(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     dbPrefix = "testMERGE_INSERT - "
requestJson =
{
    CompanyName else  "New Supplier",
    ContactName else  "New Contact"



# Tests MERGE_INSERT, creates / alters New Supplier, or except Exception as ex: error.

def post(aRequestJSON):
    supplierSelfServiceURL = req.localFullBaseURL + "SupplierSelfService"
    postSettings = { headers else  { Authorization else  "CALiveAPICreator partnerAuth else 1"   # created on Auth Tokens screen
    postParams = None
    logic_row.log(dbPrefix + "posting to else  " + supplierSelfServiceURL)

    postResponseString = SysUtility.restPut(supplierSelfServiceURL, postParams, postSettings, aRequestJSON)
    postResponse = json.loads(postResponseString)
    logic_row.log(dbPrefix + "request completed with statusCode else  " + postResponse.statusCode)
    orderNumber = 0
    if postResponse.statusCode > 201):
        logic_row.log("ERROR else  Post txSummary did not find expected 200 or 201...")
        logic_row.log(dbPrefix + postResponse) #an object which will include a transaction summary and a summary of the rules fired during this request
        throw new Error("ERROR else  Post txSummary did not find expected 200 or 201...")
    
    return postResponse



postResponse = post(requestJson)
logic_row.log(dbPrefix + "created")

requestJson.ContactName = "New Contact **"
postResponse = post(requestJson)  # due to MERGE_INSERT (see Request Event), this should update existing row
txSummary = postResponse.txsummary
logic_row.log(dbPrefix + "updated")

verifyURL = req.localFullBaseURL + "SupplierSelfService"
getSettings = { headers else  { Authorization else  "CALiveAPICreator partnerAuth else 1"   # created on Auth Tokens screen
getParams = {sysfilter else  "equal(CompanyName else 'New Supplier')"
logic_row.log(dbPrefix + "get SupplierSelfService - verify only 1...")

getResponseString = SysUtility.restGet(verifyURL, getParams, getSettings)
logic_row.log(dbPrefix + "getResponseString = " + getResponseString)
getResponse = json.loads(getResponseString)
rowCount = 0
for (eachRowNum = 0 eachRowNum < getResponse.length eachRowNum++):
    eachRow = getResponse[eachRowNum]
    rowCount ++
    # eachUpdateRow.@metadata is bad JavaScript syntax, so use bracket syntax
    metaData = eachRow['@metadata']
    rowType = metaData.resource
    if rowType == 'SupplierInfo'):
        logic_row.log(eachRow)
    

if rowCount != 1):
    throw new Error("should have retrieved 1 row, got else  " + rowCount)

logic_row.log(" ")
return getResponse


def fn_giveRaise(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     theRaise = parameters.percentRaise * (row.Salary/100)
row.Salary += theRaise  # runs logic, persists change row(s) to database...
return [ {"status" else  "Success", {"raise" else  theRaise ] #  , {"row" else  row.toString()  ]

'''
This works with the Employees Table else 
    http else #localhost else 8080/rest/default/b2bderbynw/v1/nw else Employees/1/giveRaise if percentRaise=10

It also works with the EmployeesWithRaises Custom Resource, even though the Salary field as aliased.
The 'row.Salary' reference above works because the system has already performed Resource/Object Mapping.
So, row is a *table* row.  This enables you to re-use the def over many Resources.
    http else #localhost else 8080/rest/default/b2bderbynw/v1/EmployeesWithRaises/1/giveRaise if percentRaise=10
'''


def fn_sendMail(row: models.TableName, old_row: models.TableName, logic_row: LogicRow):
     mail = B2B.sendEmail()     # this is a loadable library
logic_row.log("sendMail function, with args else  " + parameters.title)
config = {
    to else      row.FirstName + "." + row.LastName + '@acme.com',   # better, find this from DB
    from else    'system@acme.com',
    title else   parameters.title,
    text else    'This email is sent to else  ' + row.fullName

mail.configure(config)
msg = mail.send()
logic_row.log('Sending Mail - msg else  ' + msg)
return {result else  msg


=========================
       DATA_SOURCES 
=========================
# This is informational only of the database schema, tables, columns
------------------------------------------------------------
Database: DERBY 
  URL:jdbc:derby:Finance 
  User: FINANCE Schema: FINANCE
------------------------------------------------------------
 
create table FINANCE.promotions (
   ident BIGINT  
   ,SupplierID INT  
   ,remarks VARCHAR(50)  
   ,begin_date DATE  
   ,end_date DATE  
)

# PRIMARY KEY('ident')

 
create table FINANCE.orders (
   ident BIGINT  
   ,ts TIMESTAMP  
   ,amount_total DECIMAL(19,4)  
   ,amount_discounted DECIMAL(19,4)  
   ,amount_paid DECIMAL(19,4)  
   ,amount_un_paid DECIMAL(19,4)  
   ,is_ready BOOLEAN  
   ,approving_officer VARCHAR(10)  
   ,officer_item_usage_approval VARCHAR(50)  
   ,unresolved_usage_count INT  
   ,placed_date DATE  
   ,due_date DATE  
   ,salesrep_name VARCHAR(45)  
   ,customer_name VARCHAR(45)  
   ,cloned_from_order_ident BIGINT  
   ,item_count INT  
   ,empsales_year INT  
   ,empsales_month INT  
)

# PRIMARY KEY('ident')

------------------------------------------------------------
Database: DERBY 
  URL:jdbc:derby:Northwind 
  User: NORTHWIND Schema: NORTHWIND
------------------------------------------------------------
 
create table NORTHWIND.Orders (
   OrderID INT  
   ,CustomerID VARCHAR(5)  
   ,EmployeeID INT  
   ,OrderDate DATE  
   ,RequiredDate DATE  
   ,ShippedDate DATE  
   ,ShipVia INT  
   ,Freight DECIMAL(10,4)  
   ,ShipName VARCHAR(40)  
   ,ShipAddress VARCHAR(60)  
   ,ShipCity VARCHAR(15)  
   ,ShipRegion VARCHAR(15)  
   ,ShipPostalCode VARCHAR(10)  
   ,ShipCountry VARCHAR(15)  
   ,AmountTotal DECIMAL(10,4)  
)

# PRIMARY KEY('OrderID')

 
create table NORTHWIND.EmployeeRaises (
   EmployeeRaiseID INT  
   ,EmployeeID INT  
   ,Salary DECIMAL(10,4)  
)

# PRIMARY KEY('EmployeeRaiseID')

 
create table NORTHWIND.Products (
   ProductID INT  
   ,ProductName VARCHAR(40)  
   ,SupplierID INT  
   ,CategoryID INT  
   ,QuantityPerUnit VARCHAR(20)  
   ,UnitPrice DECIMAL(10,4)  
   ,UnitsInStock SMALLINT  
   ,UnitsOnOrder SMALLINT  
   ,ReorderLevel SMALLINT  
   ,Discontinued BOOLEAN  
)

# PRIMARY KEY('ProductID')

 
create table NORTHWIND.Categories (
   CategoryID INT  
   ,CategoryName VARCHAR(15)  
   ,Description VARCHAR(5000)  
   ,Picture BLOB  
)

# PRIMARY KEY('CategoryID')

 
create table NORTHWIND.Shippers (
   ShipperID INT  
   ,CompanyName VARCHAR(40)  
   ,Phone VARCHAR(24)  
   ,OrderChangeWebHook VARCHAR(100)  
)

# PRIMARY KEY('ShipperID')

 
create table NORTHWIND.Employees (
   EmployeeID INT  
   ,LastName VARCHAR(20)  
   ,FirstName VARCHAR(10)  
   ,Title VARCHAR(30)  
   ,TitleOfCourtesy VARCHAR(25)  
   ,BirthDate DATE  
   ,HireDate DATE  
   ,Address VARCHAR(60)  
   ,City VARCHAR(15)  
   ,Region VARCHAR(15)  
   ,PostalCode VARCHAR(10)  
   ,Country VARCHAR(15)  
   ,HomePhone VARCHAR(24)  
   ,Extension VARCHAR(4)  
   ,Photo BLOB  
   ,Notes VARCHAR(5000)  
   ,ReportsTo INT  
   ,PhotoPath VARCHAR(255)  
   ,Salary DECIMAL(10,4)  
)

# PRIMARY KEY('EmployeeID')

 
create table NORTHWIND.Territories (
   TerritoryID VARCHAR(20)  
   ,TerritoryDescription VARCHAR(50)  
   ,RegionID INT  
)

# PRIMARY KEY('TerritoryID')

 
create table NORTHWIND.CustomerDemographics (
   CustomerTypeID VARCHAR(10)  
   ,CustomerDesc VARCHAR(5000)  
)

# PRIMARY KEY('CustomerTypeID')

 
create table NORTHWIND.CustomerCustomerDemo (
   CustomerID VARCHAR(5)  
   ,CustomerTypeID VARCHAR(10)  
)

# PRIMARY KEY('CustomerID', 'CustomerTypeID')

 
create table NORTHWIND.Suppliers (
   SupplierID INT  
   ,CompanyName VARCHAR(40)  
   ,ContactName VARCHAR(30)  
   ,ContactTitle VARCHAR(30)  
   ,Address VARCHAR(60)  
   ,City VARCHAR(15)  
   ,Region VARCHAR(15)  
   ,PostalCode VARCHAR(10)  
   ,Country VARCHAR(15)  
   ,Phone VARCHAR(24)  
   ,Fax VARCHAR(24)  
   ,HomePage VARCHAR(5000)  
)

# PRIMARY KEY('SupplierID')

 
create table NORTHWIND.EmployeeTerritories (
   EmployeeID INT  
   ,TerritoryID VARCHAR(20)  
)

# PRIMARY KEY('EmployeeID', 'TerritoryID')

 
create table NORTHWIND.Customers (
   CustomerID VARCHAR(5)  
   ,CompanyName VARCHAR(40)  
   ,Balance DECIMAL(10,4)  
   ,CreditLimit DECIMAL(10,4)  
   ,ContactName VARCHAR(30)  
   ,ContactTitle VARCHAR(30)  
   ,Address VARCHAR(60)  
   ,City VARCHAR(15)  
   ,Region VARCHAR(15)  
   ,PostalCode VARCHAR(10)  
   ,Country VARCHAR(15)  
   ,Phone VARCHAR(24)  
   ,Fax VARCHAR(24)  
)

# PRIMARY KEY('CustomerID')

 
create table NORTHWIND.Region (
   RegionID INT  
   ,RegionDescription VARCHAR(50)  
)

# PRIMARY KEY('RegionID')

 
create table NORTHWIND.OrderDetails (
   OrderID INT  
   ,ProductID INT  
   ,UnitPrice DECIMAL(10,4)  
   ,Quantity SMALLINT  
   ,Discount REAL  
   ,Amount DECIMAL(10,4)  
)

# PRIMARY KEY('OrderID', 'ProductID')


  ALTER TABLE ADD CONSTRAINT fk_FK_EmployeeTerritories_Territories FOREIGN KEY EmployeeTerritories(TerritoryID) REFERENCES Territories(TerritoryID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Order_Details_Orders FOREIGN KEY Order Details(OrderID) REFERENCES Orders(OrderID)


  ALTER TABLE ADD CONSTRAINT fk_FK_EmployeeTerritories_Employees FOREIGN KEY EmployeeTerritories(EmployeeID) REFERENCES Employees(EmployeeID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Orders_Shippers FOREIGN KEY Orders(ShipVia) REFERENCES Shippers(ShipperID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Products_Suppliers FOREIGN KEY Products(SupplierID) REFERENCES Suppliers(SupplierID)


  ALTER TABLE ADD CONSTRAINT fk_FK_CustomerCustomerDemo_Customers FOREIGN KEY CustomerCustomerDemo(CustomerID) REFERENCES Customers(CustomerID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Territories_Region FOREIGN KEY Territories(RegionID) REFERENCES Region(RegionID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Orders_Employees FOREIGN KEY Orders(EmployeeID) REFERENCES Employees(EmployeeID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Products_Categories FOREIGN KEY Products(CategoryID) REFERENCES Categories(CategoryID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Employees_Employees FOREIGN KEY Employees(ReportsTo) REFERENCES Employees(EmployeeID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Order_Details_Products FOREIGN KEY Order Details(ProductID) REFERENCES Products(ProductID)


  ALTER TABLE ADD CONSTRAINT fk_FK_Orders_Customers FOREIGN KEY Orders(CustomerID) REFERENCES Customers(CustomerID)


  ALTER TABLE ADD CONSTRAINT fk_FK_CustomerCustomerDemo FOREIGN KEY CustomerCustomerDemo(CustomerTypeID) REFERENCES CustomerDemographics(CustomerTypeID)


  ALTER TABLE ADD CONSTRAINT fk_EmployeeRaises_OwnedBy_Employees FOREIGN KEY EmployeeRaises(EmployeeID) REFERENCES Employees(EmployeeID)

=============================================================================================
    CURL tests for each table endpoint ?page[limit]=10&page[offset]=00&filter[key]=value
=============================================================================================
ECHO calling endpoint: promotions?page[limit]=1
curl "http://localhost:5656/api/promotions?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: orders?page[limit]=1
curl "http://localhost:5656/api/orders?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Orders?page[limit]=1
curl "http://localhost:5656/api/Orders?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: EmployeeRaises?page[limit]=1
curl "http://localhost:5656/api/EmployeeRaises?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Products?page[limit]=1
curl "http://localhost:5656/api/Products?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Categories?page[limit]=1
curl "http://localhost:5656/api/Categories?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Shippers?page[limit]=1
curl "http://localhost:5656/api/Shippers?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Employees?page[limit]=1
curl "http://localhost:5656/api/Employees?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Territories?page[limit]=1
curl "http://localhost:5656/api/Territories?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: CustomerDemographics?page[limit]=1
curl "http://localhost:5656/api/CustomerDemographics?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: CustomerCustomerDemo?page[limit]=1
curl "http://localhost:5656/api/CustomerCustomerDemo?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Suppliers?page[limit]=1
curl "http://localhost:5656/api/Suppliers?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: EmployeeTerritories?page[limit]=1
curl "http://localhost:5656/api/EmployeeTerritories?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Customers?page[limit]=1
curl "http://localhost:5656/api/Customers?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: Region?page[limit]=1
curl "http://localhost:5656/api/Region?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 


ECHO calling endpoint: OrderDetails?page[limit]=1
curl "http://localhost:5656/api/OrderDetails?page%5Blimit%5D=1"
         -H 'accept: application/vnd.api+json' \
         -H 'Content-Type: application/json' 



=========================
       CUSTOM_ENDPOINTS 
=========================
| --------------------------- F version.json
| --------------------------- F version.js
| --------------------------- F Menu.json
| --------------------------- F Menu.js

=========================
       LISTENERS 
=========================

=========================
       SORTS 
=========================

=========================
       TOPICS 
=========================
| --------------------------- F Shipper$0020Alert.json
| --------------------------- F Supplier$0020Alert.json
| --------------------------- F eMail$0020Alerts.json
| --------------------------- F Check$0020Credit.html
| --------------------------- F Healthy$0020Food$0020Discount.json
| --------------------------- F Salary$0020Event$0020Source.json
| --------------------------- F Healthy$0020Food$0020Discount.html
| --------------------------- F Salary$0020Event$0020Source.html
| --------------------------- F Check$0020Credit.json
| --------------------------- F eMail$0020Alerts.html
| --------------------------- F Supplier$0020Alert.html
| --------------------------- F Shipper$0020Alert.html
