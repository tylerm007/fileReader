
=========================
       security 
=========================
Role: backoffice TablePermission: R
Role: ClientReportDetailer TablePermission: R
Role: masterPlanner TablePermission: N
Role: clientUser TablePermission: N
Role: recaster TablePermission: R
Role: Read only TablePermission: R
Role: recastUploader TablePermission: N
Role: winter17 TablePermission: N
Role: Full access TablePermission: A
User: sjb Roles: ['backoffice', 'masterPlanner', 'recaster', 'recastUploader']

=========================
       resources 
=========================
=========================
       RESOURCES 
=========================
| ------------------------------ D v1
| --------------------------------- D actorPlanTemplate
| --------------------------------- F actorPlanTemplate.json Entity: actorTemplate  ) 
| ------------------------------------ D impactTemplate
| ------------------------------------ F impactTemplate.json Entity: impactTemplate Join: (actorTemplateId = [id]) ) 
| --------------------------------- D valuesForReportGrouped
| --------------------------------- F valuesForReportGrouped.json Entity: valuesForReport  Attrs: (id,reportYear,yearClient,itemSequenceId,clientId,name,year2,year3,year1,year4,year5,average,slope,createdByUserId,grade,modifiedByUserId)) 
| ------------------------------------ D reportSection
| ------------------------------------ F reportSection.json Entity: hpa_chart_table_control Join: (itemSequenceId = [itemSequenceId]) Attrs: (id,report_element_id,section_id)) 
| --------------------------------- D fiveYearNested
| --------------------------------- F fiveYearNested.json Entity: sourceData  Attrs: (id,dataYear,priorYear,priorFiveYear,clientId,locked,createdByUserId,forecastType,modifiedByUserId,costOfGoods,grossRevenue,productionExpense,netInterest,netDistributionsAndTax,currentLiabilities,currentAssets,nonCurrentAssets,nonCurrentLiabilities,creditLimit,createdTs,modifiedTs,deletedTs,fte,acreage)) 
| ------------------------------------ D PriorYear
| ------------------------------------ F PriorYear.json Entity: sourceData Join: (clientId = [clientId] and dataYear = [priorYear]) ) 
| ------------------------------------ D PriorFiveYear
| ------------------------------------ F PriorFiveYear.json Entity: sourceData Join: (clientId = [clientId] and dataYear = [priorFiveYear]) ) 
| --------------------------------- D actionPlanScenarioReport
| --------------------------------- F actionPlanScenarioReport.json Entity: actionPlanScenario  ) 
| ------------------------------------ D actionPlanScenarioDetailList
| ------------------------------------ F actionPlanScenarioDetailList.json Entity: actionPlanScenarioDetail Join: ("actionPlanSecenarioId" = ["id"]) ) 
| --------------------------------- D availUploadMap
| --------------------------------- F availUploadMap.sql
| --------------------------------- F availUploadMap.json Entity:   ) 
| --------------------------------- D leafJctnFirst
| --------------------------------- F leafJctnFirst.sql
| --------------------------------- F leafJctnFirst.json Entity:   ) 
| --------------------------------- D defaultBlurb
| --------------------------------- F defaultBlurb.json Entity: hpa_verbiage_default  Attrs: (verbiage_default_id,remark_name,is_inactive_status,remark_class,hpa_report_section,remark,comment_assessment,hpa_analysis_factor_id,report_element_id,hpa_report_subsection_id,hpa_report_section_order)) Filter: (remark_class = 'template_text')
| ------------------------------------ D factor
| ------------------------------------ F factor.json Entity: hpa_analysis_factor Join: (hpa_analysis_factor_id = [hpa_analysis_factor_id]) Attrs: (description_short)) 
| --------------------------------- D user
| --------------------------------- F user.json Entity: user  ) 
| ------------------------------------ D userPerson
| ------------------------------------ F userPerson.json Entity: person Join: ("id" = ["personId"]) ) 
| ------------------------------------ D userClient
| ------------------------------------ F userClient.json Entity: client Join: ("id" = ["clientId"]) ) 
| --------------------------------------- D mainContact
| --------------------------------------- F mainContact.json Entity: person Join: ("id" = ["mainContactId"]) ) 
| --------------------------------- D recastTarget
| --------------------------------- F recastTarget.json Entity: analysisTarget  Attrs: (id,name)) 
| ------------------------------------ D data
| ------------------------------------ F data.json Entity: targetArea Join: (targetId = [id]) Attrs: (name,areaOrder,balance,areaCode,id)) 
| --------------------------------------- D data
| --------------------------------------- F data.json Entity: targetSubArea Join: (accountAreaId = [id]) Attrs: (name,subAreaCode,subAreaOrder,balance,id)) 
| ------------------------------------------ D data
| ------------------------------------------ F data.json Entity: targetFirstLevel Join: (accountSubAreaId = [id]) Attrs: (accountFirstOrder,name,accountFirstCode,leaf,balance,id,isAccrualAdjustable,targetForAccrualAdj)) 
| --------------------------------------------- D data
| --------------------------------------------- F data.json Entity: targetSecondLevel Join: (accountFirstId = [id]) Attrs: (name,leaf,balance,accountSecondOrder,accountSecondCode,id,isAccrualAdjustable,targetForAccrualAdj)) 
| --------------------------------- D appliedBlurb
| --------------------------------- F appliedBlurb.json Entity: hpa_verbiage_applied  Attrs: (verbiage_applied_id,verbiage_default_id,yearClient,clientId,hpa_report_section_order,remark)) 
| ------------------------------------ D defaults
| ------------------------------------ F defaults.json Entity: hpa_verbiage_default Join: (verbiage_default_id = [verbiage_default_id]) Attrs: (hpa_report_section,remark,hpa_report_section_order,report_element_id,hpa_report_subsection_id)) 
| --------------------------------------- D element
| --------------------------------------- F element.json Entity: hpa_chart_table_control Join: (report_element_id = [report_element_id ]) Attrs: (element_name)) 
| --------------------------------------- D factor
| --------------------------------------- F factor.json Entity: hpa_analysis_factor Join: (hpa_analysis_factor_id = [hpa_analysis_factor_id]) Attrs: (description_short)) 
| --------------------------------- D fiveYearBenchmarkNested
| --------------------------------- F fiveYearBenchmarkNested.json Entity: sourceBenchmarkData  ) 
| ------------------------------------ D PriorYear
| ------------------------------------ F PriorYear.json Entity: sourceBenchmarkData Join: (benchmarkPeriod = [benchmarkPeriod] and dataYear = [priorYear]) ) 
| ------------------------------------ D PriorFiveYear
| ------------------------------------ F PriorFiveYear.json Entity: sourceBenchmarkData Join: (benchmarkPeriod= [benchmarkPeriod] and dataYear = [priorFiveYear]) ) 
| --------------------------------- D availReportData
| --------------------------------- F availReportData.json Entity: clientReportDetail  Attrs: (yearClient,clientId,isBenchmarkable,reportLevel,isFfTeam,hasSignificantNonCrop,typeConsolidation,accountingBasis,reportName,clientPersonDisplayName,companyDisplayName)) 
| --------------------------------- D actorPlan
| --------------------------------- F actorPlan.json Entity: actor  ) 
| ------------------------------------ D actorTemplate
| ------------------------------------ F actorTemplate.json Entity: actorTemplate Join: ("id" = ["actorTemplateId"]) ) 
| ------------------------------------ D impact
| ------------------------------------ F get_event.js
| ------------------------------------ F impact.json Entity: impact Join: (actorId = [id]) ) 
| --------------------------------- D mappedTree
| --------------------------------- F mappedTree.json Entity: mappedArea  Attrs: (balance,name,areaOrder,clientId,entityId,scenarioYearId,areaCode,targetId,targetIdStructured)) 
| ------------------------------------ D data
| ------------------------------------ F data.json Entity: mappedSubArea Join: (mappedAreaId = [id]) Attrs: (balance,subAreaCode,subAreaOrder,name,clientId,entityId,scenarioYearId,mappedAreaId,targetId,targetIdStructured)) 
| --------------------------------------- D data
| --------------------------------------- F data.json Entity: mappedFirstLevel Join: (mappedSubAreaId = [id]) Attrs: (accountFirstOrder,name,accountFirstCode,leaf,balance,clientId,entityId,scenarioYearId,accountFirstUniqueNum,mappedSubAreaId,mappedBalance,targetId,targetIdStructured,isAccrualAdjustable,targetForAccrualAdj)) 
| ------------------------------------------ D data
| ------------------------------------------ F data.json Entity: mappedSecondLevel Join: (mappedFirstId = [id]) Attrs: (accountSecondOrder,name,accountSecondCode,leaf,balance,clientId,entityId,scenarioYearId,mappedBalance,mappedFirstId,targetId,targetIdStructured,isAccrualAdjustable,targetForAccrualAdj)) 
| --------------------------------- D planResult
| --------------------------------- F planResult.sql
| --------------------------------- F planResult.json Entity:   ) 
| --------------------------------- D leafJctnSecond
| --------------------------------- F leafJctnSecond.json Entity:   ) 
| --------------------------------- F leafJctnSecond.sql
| --------------------------------- D scenarioList
| --------------------------------- F scenarioList.json Entity: scenarioYear  ) 
| ------------------------------------ D is_scenarioYear_of_clientEntity_
| ------------------------------------ F is_scenarioYear_of_clientEntity_.json Entity: entity Join: (id = [entityId]) Attrs: (entityNumber,name)) 
| --------------------------------- D uploadMappingGlobal
| --------------------------------- F uploadMappingGlobal.sql
| --------------------------------- F uploadMappingGlobal.json Entity:   ) 
| --------------------------------- D elimination
| --------------------------------- F elimination.json Entity:   ) 
| --------------------------------- F elimination.sql
| --------------------------------- D uploadMapping
| --------------------------------- F uploadMapping.json Entity:   ) 
| --------------------------------- F uploadMapping.sql
| --------------------------------- D availPeriod
| --------------------------------- F availPeriod.json Entity: sourceData  Attrs: (dataYear,priorYear,priorFiveYear,clientId)) Filter: (priorFiveYear is not null)
| --------------------------------- D recastMapped
| --------------------------------- F recastMapped.json Entity: scenarioYear  Attrs: (id,clientId,entityId,name,analysisYear,scenarioCode,accrualBalance,targetId)) 
| --------------------------------- F get_event.js
| ------------------------------------ D data
| ------------------------------------ F get_event.js
| ------------------------------------ F data.json Entity: mappedArea Join: (scenarioYearId = [id]) Attrs: (targetIdStructured,id,areaOrder,name,balance,comment,clientId,areaCode,entityId,scenarioYearId,targetId,accrualBalance,mappedBalance)) 
| --------------------------------------- D data
| --------------------------------------- F get_event.js
| --------------------------------------- F data.json Entity: mappedSubArea Join: (mappedAreaId = [id]) Attrs: (targetIdStructured,id,subAreaOrder,name,subAreaCode,scenarioYearId,mappedAreaId,balance,comment,clientId,entityId,targetId,accrualBalance,mappedBalance)) 
| ------------------------------------------ D data
| ------------------------------------------ F get_event.js
| ------------------------------------------ F data.json Entity: mappedFirstLevel Join: (mappedSubAreaId = [id]) Attrs: (targetIdStructured,id,accountFirstOrder,name,accountFirstUniqueNum,accountFirstCode,scenarioYearId,mappedSubAreaId,balance,leaf,mappedBalance,comment,clientId,entityId,targetId,accrualBalance,balanceChildren,mappedBalChildren,accrualBalChildren,isAccrualAdjustable,targetForAccrualAdj)) 
| --------------------------------------------- D data
| --------------------------------------------- F get_event.js
| --------------------------------------------- F data.json Entity: mappedSecondLevel Join: (mappedFirstId = [id]) Attrs: (targetIdStructured,id,accountSecondOrder,name,accountSecondUniqueNum,accountSecondCode,scenarioYearId,mappedFirstId,balance,mappedBalance,leaf,comment,clientId,entityId,targetId,accrualBalance,isAccrualAdjustable,targetForAccrualAdj)) 
| --------------------------------- D testTree
| --------------------------------- F testTree.json Entity: client  ) 
| ------------------------------------ D entity_List
| ------------------------------------ F entity_List.json Entity: entity Join: ("clientId" = ["id"]) ) 
| --------------------------------- D recastSetMembers
| --------------------------------- F recastSetMembers.json Entity: recastSet  ) 
| ------------------------------------ D members
| ------------------------------------ F get_event.js
| ------------------------------------ F members.json Entity: recastSetMembership Join: (recastSetId = [id]) ) 
| --------------------------------- D mappedSetTree
| --------------------------------- F mappedSetTree.json Entity: assembledArea  ) 
| ------------------------------------ D data
| ------------------------------------ F data.json Entity: assembledSubArea Join: (assembledAreaId = [id]) ) 
| --------------------------------------- D data
| --------------------------------------- F data.json Entity: assembledFirstLevel Join: (assembledSubAreaId = [id]) ) 
| ------------------------------------------ D data
| ------------------------------------------ F data.json Entity: assembledSecondLevel Join: (assembledFirstId = [id]) ) 
| --------------------------------- D motivationActor
| --------------------------------- F motivationActor.json Entity: motivation  ) 
| ------------------------------------ D link
| ------------------------------------ F link.json Entity: motivatedActor Join: (motivationId = [id] and sourceDataId = [sourceDataId ]) ) 
| --------------------------------------- D actor
| --------------------------------------- F actor.json Entity: actor Join: (id = [actorId]) ) 
| --------------------------------- D recastAssembled
| --------------------------------- F get_event.js
| --------------------------------- F recastAssembled.json Entity: recastSet  Attrs: (id,name,clientId,scenarioMemberCount,recastSetTypeName,assembledMemberCount,targetId,recastSetSeq,recastSetCode,locked,analysisYear,hasTarget,comment,inactive,eliminationBalance)) 
| ------------------------------------ D data
| ------------------------------------ F get_event.js
| ------------------------------------ F data.json Entity: assembledArea Join: (recastSetId = [id]) Attrs: (targetIdStructured,id,clientId,areaOrder,name,balance,comment,areaCode,recastSetId,targetId,combinedBalance,locked,eliminationBalance,inactive)) 
| --------------------------------------- D data
| --------------------------------------- F get_event.js
| --------------------------------------- F data.json Entity: assembledSubArea Join: (assembledAreaId = [id]) Attrs: (targetIdStructured,id,subAreaOrder,name,subAreaCode,clientId,assembledAreaId,balance,comment,targetId,recastSetId,combinedBalance,eliminationBalance,inactive,locked,alteredBalance)) 
| ------------------------------------------ D data
| ------------------------------------------ F get_event.js
| ------------------------------------------ F data.json Entity: assembledFirstLevel Join: (assembledSubAreaId = [id]) Attrs: (targetIdStructured,id,accountFirstOrder,name,accountFirstCode,clientId,assembledSubAreaId,leaf,balance,comment,recastSetId,targetId,locked,combinedBalance,eliminationBalance,inactive,alteredBalance)) 
| --------------------------------------------- D data
| --------------------------------------------- F get_event.js
| --------------------------------------------- F data.json Entity: assembledSecondLevel Join: (assembledFirstId = [id]) Attrs: (targetIdStructured,id,accountSecondOrder,name,accountSecondCode,clientId,assembledFirstId,leaf,balance,comment,targetId,recastSetId,locked,combinedBalance,eliminationBalance,inactive,alteredBalance)) 
'''
Name: actorPlanTemplate Entity: ActorTemplate  ResourceType: TableBased ChildName: impactTemplate
     @app.route('/actorplantemplate')
     def actorplantemplate:')
           db = safrs.DB
           actorplantemplate_id = request.args.get('Id')
           session = db.session
           actorplantemplate = session.query(models.ActorTemplate).filter(models.ActorTemplate.Id == actorplantemplate_id).one()
           result_std_dict = util.row_to_dict(actorplantemplate, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: impactTemplate Entity: ImpactTemplate ResourceType: TableBased
'''

'''
Name: valuesForReportGrouped Entity: ValuesForReport  ResourceType: TableBased ChildName: reportSection
     @app.route('/valuesforreportgrouped')
     def valuesforreportgrouped:')
           db = safrs.DB
           valuesforreportgrouped_id = request.args.get('Id')
           session = db.session
           valuesforreportgrouped = session.query(models.ValuesForReport).filter(models.ValuesForReport.Id == valuesforreportgrouped_id).one()
           result_std_dict = util.row_to_dict(valuesforreportgrouped, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: reportSection Entity: HpaChartTableControl ResourceType: TableBased
'''

'''
Name: fiveYearNested Entity: SourceData  ResourceType: TableBased ChildName: PriorYear
     @app.route('/fiveyearnested')
     def fiveyearnested:')
           db = safrs.DB
           fiveyearnested_id = request.args.get('Id')
           session = db.session
           fiveyearnested = session.query(models.SourceData).filter(models.SourceData.Id == fiveyearnested_id).one()
           result_std_dict = util.row_to_dict(fiveyearnested, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: PriorYear Entity: SourceData  ResourceType: TableBased ChildName: PriorFiveYear
   Name: PriorFiveYear Entity: SourceData ResourceType: TableBased
'''

'''
Name: actionPlanScenarioReport Entity: ActionPlanScenario  ResourceType: TableBased ChildName: actionPlanScenarioDetailList
     @app.route('/actionplanscenarioreport')
     def actionplanscenarioreport:')
           db = safrs.DB
           actionplanscenarioreport_id = request.args.get('Id')
           session = db.session
           actionplanscenarioreport = session.query(models.ActionPlanScenario).filter(models.ActionPlanScenario.Id == actionplanscenarioreport_id).one()
           result_std_dict = util.row_to_dict(actionplanscenarioreport, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: actionPlanScenarioDetailList Entity: ActionPlanScenarioDetail ResourceType: TableBased
'''

'''
Name: availUploadMap Entity: AvailUploadMap ResourceType: FreeSQL
     @app.route('/availuploadmap')
     def availuploadmap:')
           db = safrs.DB
           availuploadmap_id = request.args.get('Id')
           session = db.session
           availuploadmap = session.query(models.AvailUploadMap).filter(models.AvailUploadMap.Id == availuploadmap_id).one()
           result_std_dict = util.row_to_dict(availuploadmap, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: leafJctnFirst Entity: LeafJctnFirst ResourceType: FreeSQL
     @app.route('/leafjctnfirst')
     def leafjctnfirst:')
           db = safrs.DB
           leafjctnfirst_id = request.args.get('Id')
           session = db.session
           leafjctnfirst = session.query(models.LeafJctnFirst).filter(models.LeafJctnFirst.Id == leafjctnfirst_id).one()
           result_std_dict = util.row_to_dict(leafjctnfirst, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: defaultBlurb Entity: HpaVerbiageDefault  ResourceType: TableBased ChildName: factor
     @app.route('/defaultblurb')
     def defaultblurb:')
           db = safrs.DB
           defaultblurb_id = request.args.get('Id')
           session = db.session
           defaultblurb = session.query(models.HpaVerbiageDefault).filter(models.HpaVerbiageDefault.Id == defaultblurb_id).one()
           result_std_dict = util.row_to_dict(defaultblurb, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: factor Entity: HpaAnalysisFactor ResourceType: TableBased
'''

'''
Name: user Entity: User  ResourceType: TableBased ChildName: userPerson
     @app.route('/user')
     def user:')
           db = safrs.DB
           user_id = request.args.get('Id')
           session = db.session
           user = session.query(models.User).filter(models.User.Id == user_id).one()
           result_std_dict = util.row_to_dict(user, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: userPerson Entity: Person  ResourceType: TableBased ChildName: userClient
   Name: userClient Entity: Client  ResourceType: TableBased ChildName: mainContact
     Name: mainContact Entity: Person ResourceType: TableBased
'''

'''
Name: recastTarget Entity: AnalysisTarget  ResourceType: TableBased ChildName: data
     @app.route('/recasttarget')
     def recasttarget:')
           db = safrs.DB
           recasttarget_id = request.args.get('Id')
           session = db.session
           recasttarget = session.query(models.AnalysisTarget).filter(models.AnalysisTarget.Id == recasttarget_id).one()
           result_std_dict = util.row_to_dict(recasttarget, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: data Entity: TargetArea  ResourceType: TableBased ChildName: data
   Name: data Entity: TargetSubArea  ResourceType: TableBased ChildName: data
     Name: data Entity: TargetFirstLevel  ResourceType: TableBased ChildName: data
       Name: data Entity: TargetSecondLevel ResourceType: TableBased
'''

'''
Name: appliedBlurb Entity: HpaVerbiageApplied  ResourceType: TableBased ChildName: defaults
     @app.route('/appliedblurb')
     def appliedblurb:')
           db = safrs.DB
           appliedblurb_id = request.args.get('Id')
           session = db.session
           appliedblurb = session.query(models.HpaVerbiageApplied).filter(models.HpaVerbiageApplied.Id == appliedblurb_id).one()
           result_std_dict = util.row_to_dict(appliedblurb, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: defaults Entity: HpaVerbiageDefault  ResourceType: TableBased ChildName: element
   Name: element Entity: HpaChartTableControl  ResourceType: TableBased ChildName: factor
     Name: factor Entity: HpaAnalysisFactor ResourceType: TableBased
'''

'''
Name: fiveYearBenchmarkNested Entity: SourceBenchmarkData  ResourceType: TableBased ChildName: PriorYear
     @app.route('/fiveyearbenchmarknested')
     def fiveyearbenchmarknested:')
           db = safrs.DB
           fiveyearbenchmarknested_id = request.args.get('Id')
           session = db.session
           fiveyearbenchmarknested = session.query(models.SourceBenchmarkData).filter(models.SourceBenchmarkData.Id == fiveyearbenchmarknested_id).one()
           result_std_dict = util.row_to_dict(fiveyearbenchmarknested, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: PriorYear Entity: SourceBenchmarkData  ResourceType: TableBased ChildName: PriorFiveYear
   Name: PriorFiveYear Entity: SourceBenchmarkData ResourceType: TableBased
'''

'''
Name: availReportData Entity: ClientReportDetail ResourceType: TableBased
     @app.route('/availreportdata')
     def availreportdata:')
           db = safrs.DB
           availreportdata_id = request.args.get('Id')
           session = db.session
           availreportdata = session.query(models.ClientReportDetail).filter(models.ClientReportDetail.Id == availreportdata_id).one()
           result_std_dict = util.row_to_dict(availreportdata, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: actorPlan Entity: Actor  ResourceType: TableBased ChildName: actorTemplate
     @app.route('/actorplan')
     def actorplan:')
           db = safrs.DB
           actorplan_id = request.args.get('Id')
           session = db.session
           actorplan = session.query(models.Actor).filter(models.Actor.Id == actorplan_id).one()
           result_std_dict = util.row_to_dict(actorplan, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: actorTemplate Entity: ActorTemplate  ResourceType: TableBased ChildName: impact
   Name: impact Entity: Impact ResourceType: TableBased
'''

'''
Name: mappedTree Entity: MappedArea  ResourceType: TableBased ChildName: data
     @app.route('/mappedtree')
     def mappedtree:')
           db = safrs.DB
           mappedtree_id = request.args.get('Id')
           session = db.session
           mappedtree = session.query(models.MappedArea).filter(models.MappedArea.Id == mappedtree_id).one()
           result_std_dict = util.row_to_dict(mappedtree, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: data Entity: MappedSubArea  ResourceType: TableBased ChildName: data
   Name: data Entity: MappedFirstLevel  ResourceType: TableBased ChildName: data
     Name: data Entity: MappedSecondLevel ResourceType: TableBased
'''

'''
Name: planResult Entity: PlanResult ResourceType: FreeSQL
     @app.route('/planresult')
     def planresult:')
           db = safrs.DB
           planresult_id = request.args.get('Id')
           session = db.session
           planresult = session.query(models.PlanResult).filter(models.PlanResult.Id == planresult_id).one()
           result_std_dict = util.row_to_dict(planresult, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: leafJctnSecond Entity: LeafJctnSecond ResourceType: FreeSQL
     @app.route('/leafjctnsecond')
     def leafjctnsecond:')
           db = safrs.DB
           leafjctnsecond_id = request.args.get('Id')
           session = db.session
           leafjctnsecond = session.query(models.LeafJctnSecond).filter(models.LeafJctnSecond.Id == leafjctnsecond_id).one()
           result_std_dict = util.row_to_dict(leafjctnsecond, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: scenarioList Entity: ScenarioYear  ResourceType: TableBased ChildName: is_scenarioYear_of_clientEntity_
     @app.route('/scenariolist')
     def scenariolist:')
           db = safrs.DB
           scenariolist_id = request.args.get('Id')
           session = db.session
           scenariolist = session.query(models.ScenarioYear).filter(models.ScenarioYear.Id == scenariolist_id).one()
           result_std_dict = util.row_to_dict(scenariolist, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: is_scenarioYear_of_clientEntity_ Entity: Entity ResourceType: TableBased
'''

'''
Name: uploadMappingGlobal Entity: UploadMappingGlobal ResourceType: FreeSQL
     @app.route('/uploadmappingglobal')
     def uploadmappingglobal:')
           db = safrs.DB
           uploadmappingglobal_id = request.args.get('Id')
           session = db.session
           uploadmappingglobal = session.query(models.UploadMappingGlobal).filter(models.UploadMappingGlobal.Id == uploadmappingglobal_id).one()
           result_std_dict = util.row_to_dict(uploadmappingglobal, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: elimination Entity: Elimination ResourceType: FreeSQL
     @app.route('/elimination')
     def elimination:')
           db = safrs.DB
           elimination_id = request.args.get('Id')
           session = db.session
           elimination = session.query(models.Elimination).filter(models.Elimination.Id == elimination_id).one()
           result_std_dict = util.row_to_dict(elimination, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: uploadMapping Entity: UploadMapping ResourceType: FreeSQL
     @app.route('/uploadmapping')
     def uploadmapping:')
           db = safrs.DB
           uploadmapping_id = request.args.get('Id')
           session = db.session
           uploadmapping = session.query(models.UploadMapping).filter(models.UploadMapping.Id == uploadmapping_id).one()
           result_std_dict = util.row_to_dict(uploadmapping, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: availPeriod Entity: SourceData ResourceType: TableBased
     @app.route('/availperiod')
     def availperiod:')
           db = safrs.DB
           availperiod_id = request.args.get('Id')
           session = db.session
           availperiod = session.query(models.SourceData).filter(models.SourceData.Id == availperiod_id).one()
           result_std_dict = util.row_to_dict(availperiod, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
'''

'''
Name: recastMapped Entity: ScenarioYear  ResourceType: TableBased ChildName: data
     @app.route('/recastmapped')
     def recastmapped:')
           db = safrs.DB
           recastmapped_id = request.args.get('Id')
           session = db.session
           recastmapped = session.query(models.ScenarioYear).filter(models.ScenarioYear.Id == recastmapped_id).one()
           result_std_dict = util.row_to_dict(recastmapped, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: data Entity: MappedArea  ResourceType: TableBased ChildName: data
   Name: data Entity: MappedSubArea  ResourceType: TableBased ChildName: data
     Name: data Entity: MappedFirstLevel  ResourceType: TableBased ChildName: data
       Name: data Entity: MappedSecondLevel ResourceType: TableBased
'''

'''
Name: testTree Entity: Client  ResourceType: TableBased ChildName: entity_List
     @app.route('/testtree')
     def testtree:')
           db = safrs.DB
           testtree_id = request.args.get('Id')
           session = db.session
           testtree = session.query(models.Client).filter(models.Client.Id == testtree_id).one()
           result_std_dict = util.row_to_dict(testtree, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: entity_List Entity: Entity ResourceType: TableBased
'''

'''
Name: recastSetMembers Entity: RecastSet  ResourceType: TableBased ChildName: members
     @app.route('/recastsetmembers')
     def recastsetmembers:')
           db = safrs.DB
           recastsetmembers_id = request.args.get('Id')
           session = db.session
           recastsetmembers = session.query(models.RecastSet).filter(models.RecastSet.Id == recastsetmembers_id).one()
           result_std_dict = util.row_to_dict(recastsetmembers, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: members Entity: RecastSetMembership ResourceType: TableBased
'''

'''
Name: mappedSetTree Entity: AssembledArea  ResourceType: TableBased ChildName: data
     @app.route('/mappedsettree')
     def mappedsettree:')
           db = safrs.DB
           mappedsettree_id = request.args.get('Id')
           session = db.session
           mappedsettree = session.query(models.AssembledArea).filter(models.AssembledArea.Id == mappedsettree_id).one()
           result_std_dict = util.row_to_dict(mappedsettree, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: data Entity: AssembledSubArea  ResourceType: TableBased ChildName: data
   Name: data Entity: AssembledFirstLevel  ResourceType: TableBased ChildName: data
     Name: data Entity: AssembledSecondLevel ResourceType: TableBased
'''

'''
Name: motivationActor Entity: Motivation  ResourceType: TableBased ChildName: link
     @app.route('/motivationactor')
     def motivationactor:')
           db = safrs.DB
           motivationactor_id = request.args.get('Id')
           session = db.session
           motivationactor = session.query(models.Motivation).filter(models.Motivation.Id == motivationactor_id).one()
           result_std_dict = util.row_to_dict(motivationactor, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: link Entity: MotivatedActor  ResourceType: TableBased ChildName: actor
   Name: actor Entity: Actor ResourceType: TableBased
'''

'''
Name: recastAssembled Entity: RecastSet  ResourceType: TableBased ChildName: data
     @app.route('/recastassembled')
     def recastassembled:')
           db = safrs.DB
           recastassembled_id = request.args.get('Id')
           session = db.session
           recastassembled = session.query(models.RecastSet).filter(models.RecastSet.Id == recastassembled_id).one()
           result_std_dict = util.row_to_dict(recastassembled, replace_attribute_tag='data', remove_links_relationships=True
           return result_std_dict
 Name: data Entity: AssembledArea  ResourceType: TableBased ChildName: data
   Name: data Entity: AssembledSubArea  ResourceType: TableBased ChildName: data
     Name: data Entity: AssembledFirstLevel  ResourceType: TableBased ChildName: data
       Name: data Entity: AssembledSecondLevel ResourceType: TableBased
'''


=========================
       pipeline_events 
=========================
| --------------------------- F recastMapped.js
| --------------------------- F recastMapped.json
| --------------------------- F responsePipelineForRecastMappedAndAssembled.js
| --------------------------- F recastAssembled.js
| --------------------------- F planResults.json
| --------------------------- F recastTarget.json
| --------------------------- F recastSetMembers.js
| --------------------------- F recastAssembled.json
| --------------------------- F recastSetMembers.json
| --------------------------- F recastTarget.js
| --------------------------- F planResults.js
| --------------------------- F responsePipelineForRecastMappedAndAssembled.json

=========================
       libraries 
=========================

=========================
       connections 
=========================

=========================
       relationships.json 
=========================
=========================
    RELATIONSHIPS 
=========================
accountUpload = relationship('main:accountUpload, remote_side=[accountUploadId] ,cascade_backrefs=True, backref='main:mapping')
mapping_List = relationship('main:mapping, remote_side=[id] ,cascade_backrefs=True, backref='main:accountUpload')
actionPlanScenario = relationship('main:actionPlanScenario, remote_side=[actionPlanSecenarioId] ,cascade_backrefs=True, backref='main:actionPlanScenarioDetail')
actionPlanScenarioDetail_List = relationship('main:actionPlanScenarioDetail, remote_side=[id] ,cascade_backrefs=True, backref='main:actionPlanScenario')
actor = relationship('main:actor, remote_side=[actorId] ,cascade_backrefs=True, backref='main:impact')
impact_List = relationship('main:impact, remote_side=[id] ,cascade_backrefs=True, backref='main:actor')
actor = relationship('main:actor, remote_side=[actorId] ,cascade_backrefs=True, backref='main:motivatedActor')
motivatedActor_List = relationship('main:motivatedActor, remote_side=[id] ,cascade_backrefs=True, backref='main:actor')
actorTemplate = relationship('main:actorTemplate, remote_side=[actorTemplateId] ,cascade_backrefs=True, backref='main:actor')
actor_List = relationship('main:actor, remote_side=[id] ,cascade_backrefs=True, backref='main:actorTemplate')
actorTemplate = relationship('main:actorTemplate, remote_side=[actorTemplateId] ,cascade_backrefs=True, backref='main:impactTemplate')
impactTemplate_List = relationship('main:impactTemplate, remote_side=[id] ,cascade_backrefs=True, backref='main:actorTemplate')
actorTemplateClass = relationship('main:actorTemplateClass, remote_side=[actorTemplateClassId] ,cascade_backrefs=True, backref='main:actorTemplate')
actorTemplate_List = relationship('main:actorTemplate, remote_side=[id] ,cascade_backrefs=True, backref='main:actorTemplateClass')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:assembledArea')
assembledArea_List = relationship('main:assembledArea, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledFirstLevel_List = relationship('main:assembledFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:assembledSecondLevel')
assembledSecondLevel_List = relationship('main:assembledSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:assembledSubArea')
assembledSubArea_List = relationship('main:assembledSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:mappedArea')
mappedArea_List = relationship('main:mappedArea, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel_List = relationship('main:mappedFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSecondLevel_List = relationship('main:mappedSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:mappedSubArea')
mappedSubArea_List = relationship('main:mappedSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:recastSet')
recastSet_List = relationship('main:recastSet, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear_List = relationship('main:scenarioYear, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:targetArea')
targetArea_List = relationship('main:targetArea, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:targetFirstLevel')
targetFirstLevel_List = relationship('main:targetFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:targetSecondLevel')
targetSecondLevel_List = relationship('main:targetSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTarget = relationship('main:analysisTarget, remote_side=[targetId] ,cascade_backrefs=True, backref='main:targetSubArea')
targetSubArea_List = relationship('main:targetSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTarget')
analysisTemplate = relationship('main:analysisTemplate, remote_side=[analysisTemplateId] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear_List = relationship('main:scenarioYear, remote_side=[id] ,cascade_backrefs=True, backref='main:analysisTemplate')
assembledArea = relationship('main:assembledArea, remote_side=[assembledAreaId] ,cascade_backrefs=True, backref='main:assembledSubArea')
assembledSubArea_List = relationship('main:assembledSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:assembledArea')
assembledFirstLevel = relationship('main:assembledFirstLevel, remote_side=[assembledFirstId] ,cascade_backrefs=True, backref='main:assembledSecondLevel')
assembledSecondLevel_List = relationship('main:assembledSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledFirstLevel = relationship('main:assembledFirstLevel, remote_side=[assembledFirstId] ,cascade_backrefs=True, backref='main:eliminationFirstLevel')
eliminationFirstLevel_List = relationship('main:eliminationFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledFirstLevel = relationship('main:assembledFirstLevel, remote_side=[assembledFirstId] ,cascade_backrefs=True, backref='main:leafJctnFirstLevel')
leafJctnFirstLevel_List = relationship('main:leafJctnFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledSecondLevel = relationship('main:assembledSecondLevel, remote_side=[assembledSecondId] ,cascade_backrefs=True, backref='main:eliminationSecondLevel')
eliminationSecondLevel_List = relationship('main:eliminationSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:assembledSecondLevel')
assembledSecondLevel = relationship('main:assembledSecondLevel, remote_side=[assembledSecondId] ,cascade_backrefs=True, backref='main:leafJctnSecondLevel')
leafJctnSecondLevel_List = relationship('main:leafJctnSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:assembledSecondLevel')
assembledSubArea = relationship('main:assembledSubArea, remote_side=[assembledSubAreaId] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledFirstLevel_List = relationship('main:assembledFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:assembledSubArea')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:actionPlanScenario')
actionPlanScenario_List = relationship('main:actionPlanScenario, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:actionPlanScenarioDetail')
actionPlanScenarioDetail_List = relationship('main:actionPlanScenarioDetail, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:actor')
actor_List = relationship('main:actor, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:alteration')
alteration_List = relationship('main:alteration, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:assembledAlteration')
assembledAlteration_List = relationship('main:assembledAlteration, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:assembledArea')
assembledArea_List = relationship('main:assembledArea, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledFirstLevel_List = relationship('main:assembledFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:assembledSecondLevel')
assembledSecondLevel_List = relationship('main:assembledSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:assembledSubArea')
assembledSubArea_List = relationship('main:assembledSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:clientReportDetail')
clientReportDetail_List = relationship('main:clientReportDetail, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:eliminationFirstLevel')
eliminationFirstLevel_List = relationship('main:eliminationFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:eliminationSecondLevel')
eliminationSecondLevel_List = relationship('main:eliminationSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:entity')
entity_List = relationship('main:entity, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:hpa_verbiage_applied')
hpa_verbiage_applied_List = relationship('main:hpa_verbiage_applied, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:impact')
impact_List = relationship('main:impact, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:leafJctnFirstLevel')
leafJctnFirstLevel_List = relationship('main:leafJctnFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:leafJctnSecondLevel')
leafJctnSecondLevel_List = relationship('main:leafJctnSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:mappedArea')
mappedArea_List = relationship('main:mappedArea, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel_List = relationship('main:mappedFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSecondLevel_List = relationship('main:mappedSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:mappedSubArea')
mappedSubArea_List = relationship('main:mappedSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:motivation')
motivation_List = relationship('main:motivation, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:recastSet')
recastSet_List = relationship('main:recastSet, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear_List = relationship('main:scenarioYear, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:sourceData')
sourceData_List = relationship('main:sourceData, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[createdByUserId] ,cascade_backrefs=True, backref='main:sourceDataFeedsForBenchmark')
sourceDataFeedsForBenchmark_List = relationship('main:sourceDataFeedsForBenchmark, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client_via_modifiedByUserId = relationship('main:client, remote_side=[modifiedByUserId] ,cascade_backrefs=True, backref='main:sourceDataFeedsForBenchmark')
sourceDataFeedsForBenchmark_List_via_modifiedByUserId = relationship('main:sourceDataFeedsForBenchmark, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:user')
user_List = relationship('main:user, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client = relationship('main:client, remote_side=[clientId] ,cascade_backrefs=True, backref='main:valuesForReport')
valuesForReport_List = relationship('main:valuesForReport, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client_via_createdByUserId = relationship('main:client, remote_side=[createdByUserId] ,cascade_backrefs=True, backref='main:valuesForReport')
valuesForReport_List_via_createdByUserId = relationship('main:valuesForReport, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
client_via_modifiedByUserId = relationship('main:client, remote_side=[modifiedByUserId] ,cascade_backrefs=True, backref='main:valuesForReport')
valuesForReport_List_via_modifiedByUserId = relationship('main:valuesForReport, remote_side=[id] ,cascade_backrefs=True, backref='main:client')
clientReportDetail = relationship('main:clientReportDetail, remote_side=[yearClient] ,cascade_backrefs=True, backref='main:hpa_verbiage_applied')
hpa_verbiage_applied_List = relationship('main:hpa_verbiage_applied, remote_side=[yearClient] ,cascade_backrefs=True, backref='main:clientReportDetail')
clientReportDetail = relationship('main:clientReportDetail, remote_side=[yearClient] ,cascade_backrefs=True, backref='main:valuesForReport')
valuesForReport_List = relationship('main:valuesForReport, remote_side=[yearClient] ,cascade_backrefs=True, backref='main:clientReportDetail')
entity = relationship('main:entity, remote_side=[entityId] ,cascade_backrefs=True, backref='main:mappedArea')
mappedArea_List = relationship('main:mappedArea, remote_side=[id] ,cascade_backrefs=True, backref='main:entity')
entity = relationship('main:entity, remote_side=[entityId] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel_List = relationship('main:mappedFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:entity')
entity = relationship('main:entity, remote_side=[entityId] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSecondLevel_List = relationship('main:mappedSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:entity')
entity = relationship('main:entity, remote_side=[entityId] ,cascade_backrefs=True, backref='main:mappedSubArea')
mappedSubArea_List = relationship('main:mappedSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:entity')
entity = relationship('main:entity, remote_side=[entityId] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear_List = relationship('main:scenarioYear, remote_side=[id] ,cascade_backrefs=True, backref='main:entity')
hpa_verbiage_default = relationship('main:hpa_verbiage_default, remote_side=[verbiage_default_id] ,cascade_backrefs=True, backref='main:hpa_verbiage_applied')
hpa_verbiage_applied_List = relationship('main:hpa_verbiage_applied, remote_side=[verbiage_default_id] ,cascade_backrefs=True, backref='main:hpa_verbiage_default')
impactArea = relationship('main:impactArea, remote_side=[impactAreaId] ,cascade_backrefs=True, backref='main:impact')
impact_List = relationship('main:impact, remote_side=[id] ,cascade_backrefs=True, backref='main:impactArea')
impactArea = relationship('main:impactArea, remote_side=[impactAreaId] ,cascade_backrefs=True, backref='main:impactTemplate')
impactTemplate_List = relationship('main:impactTemplate, remote_side=[id] ,cascade_backrefs=True, backref='main:impactArea')
impactAreaClass_1 = relationship('main:impactAreaClass, remote_side=[impactAreaClassId] ,cascade_backrefs=True, backref='main:impactArea')
impactArea_List = relationship('main:impactArea, remote_side=[id] ,cascade_backrefs=True, backref='main:impactAreaClass')
impactFunction = relationship('main:impactFunction, remote_side=[impactFunctionId] ,cascade_backrefs=True, backref='main:impact')
impact_List = relationship('main:impact, remote_side=[id] ,cascade_backrefs=True, backref='main:impactFunction')
impactFunction = relationship('main:impactFunction, remote_side=[impactFunctionId] ,cascade_backrefs=True, backref='main:impactTemplate')
impactTemplate_List = relationship('main:impactTemplate, remote_side=[id] ,cascade_backrefs=True, backref='main:impactFunction')
mappedArea = relationship('main:mappedArea, remote_side=[mappedAreaId] ,cascade_backrefs=True, backref='main:mappedSubArea')
mappedSubArea_List = relationship('main:mappedSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:mappedArea')
mappedFirstLevel = relationship('main:mappedFirstLevel, remote_side=[mappedFirstId] ,cascade_backrefs=True, backref='main:eliminationFirstLevel')
eliminationFirstLevel_List = relationship('main:eliminationFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel = relationship('main:mappedFirstLevel, remote_side=[mappedFirstId] ,cascade_backrefs=True, backref='main:leafJctnFirstLevel')
leafJctnFirstLevel_List = relationship('main:leafJctnFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel = relationship('main:mappedFirstLevel, remote_side=[mappedFirstId] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSecondLevel_List = relationship('main:mappedSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedSecondLevel = relationship('main:mappedSecondLevel, remote_side=[mappedSecondId] ,cascade_backrefs=True, backref='main:eliminationSecondLevel')
eliminationSecondLevel_List = relationship('main:eliminationSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSecondLevel = relationship('main:mappedSecondLevel, remote_side=[mappedSecondId] ,cascade_backrefs=True, backref='main:leafJctnSecondLevel')
leafJctnSecondLevel_List = relationship('main:leafJctnSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSubArea = relationship('main:mappedSubArea, remote_side=[mappedSubAreaId] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel_List = relationship('main:mappedFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:mappedSubArea')
motivation = relationship('main:motivation, remote_side=[motivationId] ,cascade_backrefs=True, backref='main:motivatedActor')
motivatedActor_List = relationship('main:motivatedActor, remote_side=[id] ,cascade_backrefs=True, backref='main:motivation')
motivationClass = relationship('main:motivationClass, remote_side=[motivationClassId] ,cascade_backrefs=True, backref='main:motivation')
motivation_List = relationship('main:motivation, remote_side=[id] ,cascade_backrefs=True, backref='main:motivationClass')
person = relationship('main:person, remote_side=[championId] ,cascade_backrefs=True, backref='main:actor')
actor_List = relationship('main:actor, remote_side=[id] ,cascade_backrefs=True, backref='main:person')
person = relationship('main:person, remote_side=[altContactId] ,cascade_backrefs=True, backref='main:client')
client_List = relationship('main:client, remote_side=[id] ,cascade_backrefs=True, backref='main:person')
person_via_mainContactId = relationship('main:person, remote_side=[mainContactId] ,cascade_backrefs=True, backref='main:client')
client_List_via_mainContactId = relationship('main:client, remote_side=[id] ,cascade_backrefs=True, backref='main:person')
person = relationship('main:person, remote_side=[clientPersonId] ,cascade_backrefs=True, backref='main:clientReportDetail')
clientReportDetail_List = relationship('main:clientReportDetail, remote_side=[id] ,cascade_backrefs=True, backref='main:person')
person_via_entryPersonId = relationship('main:person, remote_side=[entryPersonId] ,cascade_backrefs=True, backref='main:clientReportDetail')
clientReportDetail_List_via_entryPersonId = relationship('main:clientReportDetail, remote_side=[id] ,cascade_backrefs=True, backref='main:person')
person_via_teamCoachId = relationship('main:person, remote_side=[teamCoachId] ,cascade_backrefs=True, backref='main:clientReportDetail')
clientReportDetail_List_via_teamCoachId = relationship('main:clientReportDetail, remote_side=[id] ,cascade_backrefs=True, backref='main:person')
person = relationship('main:person, remote_side=[personId] ,cascade_backrefs=True, backref='main:user')
user_List = relationship('main:user, remote_side=[id] ,cascade_backrefs=True, backref='main:person')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:assembledAlteration')
assembledAlteration_List = relationship('main:assembledAlteration, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:assembledArea')
assembledArea_List = relationship('main:assembledArea, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledFirstLevel_List = relationship('main:assembledFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:assembledSecondLevel')
assembledSecondLevel_List = relationship('main:assembledSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:assembledSubArea')
assembledSubArea_List = relationship('main:assembledSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:eliminationFirstLevel')
eliminationFirstLevel_List = relationship('main:eliminationFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:eliminationSecondLevel')
eliminationSecondLevel_List = relationship('main:eliminationSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSet = relationship('main:recastSet, remote_side=[recastSetId] ,cascade_backrefs=True, backref='main:recastSetMembership')
recastSetMembership_List = relationship('main:recastSetMembership, remote_side=[id] ,cascade_backrefs=True, backref='main:recastSet')
recastSetType = relationship('main:recastSetType, remote_side=[recastSetTypeName] ,cascade_backrefs=True, backref='main:recastSet')
recastSet_List = relationship('main:recastSet, remote_side=[name] ,cascade_backrefs=True, backref='main:recastSetType')
scenarioYear = relationship('main:scenarioYear, remote_side=[uid] ,cascade_backrefs=True, backref='main:accountUpload')
accountUpload_List = relationship('main:accountUpload, remote_side=[uid] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear = relationship('main:scenarioYear, remote_side=[scenarioYearId] ,cascade_backrefs=True, backref='main:alteration')
alteration_List = relationship('main:alteration, remote_side=[id] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear = relationship('main:scenarioYear, remote_side=[scenarioYearId] ,cascade_backrefs=True, backref='main:mappedArea')
mappedArea_List = relationship('main:mappedArea, remote_side=[id] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear = relationship('main:scenarioYear, remote_side=[scenarioYearId] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel_List = relationship('main:mappedFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear = relationship('main:scenarioYear, remote_side=[scenarioYearId] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSecondLevel_List = relationship('main:mappedSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear = relationship('main:scenarioYear, remote_side=[scenarioYearId] ,cascade_backrefs=True, backref='main:mappedSubArea')
mappedSubArea_List = relationship('main:mappedSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear = relationship('main:scenarioYear, remote_side=[scenarioYearId] ,cascade_backrefs=True, backref='main:mapping')
mapping_List = relationship('main:mapping, remote_side=[id] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear = relationship('main:scenarioYear, remote_side=[scenarioYearId] ,cascade_backrefs=True, backref='main:recastSetMembership')
recastSetMembership_List = relationship('main:recastSetMembership, remote_side=[id] ,cascade_backrefs=True, backref='main:scenarioYear')
main_sourceBenchmarkData_isFivePrior = relationship('main:sourceBenchmarkData, remote_side=[benchmarkPeriod] ,cascade_backrefs=True, backref='main:sourceBenchmarkData')
main_sourceBenchmarkData_FivePrior = relationship('main:sourceBenchmarkData, remote_side=[benchmarkPeriod] ,cascade_backrefs=True, backref='main:sourceBenchmarkData')
main_sourceBenchmarkData_isPriorYear = relationship('main:sourceBenchmarkData, remote_side=[benchmarkPeriod] ,cascade_backrefs=True, backref='main:sourceBenchmarkData')
main_sourceBenchmarkData_PriorYear = relationship('main:sourceBenchmarkData, remote_side=[benchmarkPeriod] ,cascade_backrefs=True, backref='main:sourceBenchmarkData')
sourceBenchmarkData = relationship('main:sourceBenchmarkData, remote_side=[benchmarkId] ,cascade_backrefs=True, backref='main:sourceDataFeedsForBenchmark')
sourceDataFeedsForBenchmark_List = relationship('main:sourceDataFeedsForBenchmark, remote_side=[id] ,cascade_backrefs=True, backref='main:sourceBenchmarkData')
sourceData = relationship('main:sourceData, remote_side=[sourceDataId] ,cascade_backrefs=True, backref='main:actor')
actor_List = relationship('main:actor, remote_side=[id] ,cascade_backrefs=True, backref='main:sourceData')
sourceData = relationship('main:sourceData, remote_side=[sourceDataId] ,cascade_backrefs=True, backref='main:impact')
impact_List = relationship('main:impact, remote_side=[id] ,cascade_backrefs=True, backref='main:sourceData')
sourceData = relationship('main:sourceData, remote_side=[sourceDataId] ,cascade_backrefs=True, backref='main:motivatedActor')
motivatedActor_List = relationship('main:motivatedActor, remote_side=[id] ,cascade_backrefs=True, backref='main:sourceData')
sourceData = relationship('main:sourceData, remote_side=[sourceDataId] ,cascade_backrefs=True, backref='main:motivation')
motivation_List = relationship('main:motivation, remote_side=[id] ,cascade_backrefs=True, backref='main:sourceData')
main_sourceData_hasStartYear = relationship('main:sourceData, remote_side=[clientId] ,cascade_backrefs=True, backref='main:sourceData')
main_sourceData_PriorFiveYear = relationship('main:sourceData, remote_side=[clientId] ,cascade_backrefs=True, backref='main:sourceData')
main_sourceData_isPriorYear = relationship('main:sourceData, remote_side=[clientId] ,cascade_backrefs=True, backref='main:sourceData')
main_sourceData_PriorYear = relationship('main:sourceData, remote_side=[clientId] ,cascade_backrefs=True, backref='main:sourceData')
targetArea = relationship('main:targetArea, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:assembledArea')
assembledArea_List = relationship('main:assembledArea, remote_side=[id] ,cascade_backrefs=True, backref='main:targetArea')
targetArea = relationship('main:targetArea, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:mappedArea')
mappedArea_List = relationship('main:mappedArea, remote_side=[id] ,cascade_backrefs=True, backref='main:targetArea')
targetArea = relationship('main:targetArea, remote_side=[accountAreaId] ,cascade_backrefs=True, backref='main:targetFirstLevel')
targetFirstLevel_List = relationship('main:targetFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetArea')
targetArea = relationship('main:targetArea, remote_side=[accountAreaId] ,cascade_backrefs=True, backref='main:targetSecondLevel')
targetSecondLevel_List = relationship('main:targetSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetArea')
targetArea = relationship('main:targetArea, remote_side=[accountAreaId] ,cascade_backrefs=True, backref='main:targetSubArea')
targetSubArea_List = relationship('main:targetSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:targetArea')
targetFirstLevel = relationship('main:targetFirstLevel, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:assembledFirstLevel')
assembledFirstLevel_List = relationship('main:assembledFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetFirstLevel')
targetFirstLevel = relationship('main:targetFirstLevel, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:mappedFirstLevel')
mappedFirstLevel_List = relationship('main:mappedFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetFirstLevel')
targetFirstLevel = relationship('main:targetFirstLevel, remote_side=[accountFirstId] ,cascade_backrefs=True, backref='main:targetSecondLevel')
targetSecondLevel_List = relationship('main:targetSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetFirstLevel')
targetSecondLevel = relationship('main:targetSecondLevel, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:assembledSecondLevel')
assembledSecondLevel_List = relationship('main:assembledSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetSecondLevel')
targetSecondLevel = relationship('main:targetSecondLevel, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:mappedSecondLevel')
mappedSecondLevel_List = relationship('main:mappedSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetSecondLevel')
targetSubArea = relationship('main:targetSubArea, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:assembledSubArea')
assembledSubArea_List = relationship('main:assembledSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:targetSubArea')
targetSubArea = relationship('main:targetSubArea, remote_side=[targetIdStructured] ,cascade_backrefs=True, backref='main:mappedSubArea')
mappedSubArea_List = relationship('main:mappedSubArea, remote_side=[id] ,cascade_backrefs=True, backref='main:targetSubArea')
targetSubArea = relationship('main:targetSubArea, remote_side=[accountSubAreaId] ,cascade_backrefs=True, backref='main:targetFirstLevel')
targetFirstLevel_List = relationship('main:targetFirstLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetSubArea')
targetSubArea = relationship('main:targetSubArea, remote_side=[accountSubAreaId] ,cascade_backrefs=True, backref='main:targetSecondLevel')
targetSecondLevel_List = relationship('main:targetSecondLevel, remote_side=[id] ,cascade_backrefs=True, backref='main:targetSubArea')
typeBalSheet = relationship('main:typeBalSheet, remote_side=[costMarket] ,cascade_backrefs=True, backref='main:entity')
entity_List = relationship('main:entity, remote_side=[name] ,cascade_backrefs=True, backref='main:typeBalSheet')
typeBalSheet = relationship('main:typeBalSheet, remote_side=[costMarket] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear_List = relationship('main:scenarioYear, remote_side=[name] ,cascade_backrefs=True, backref='main:typeBalSheet')
typeIncomeStmt = relationship('main:typeIncomeStmt, remote_side=[cashAccrual] ,cascade_backrefs=True, backref='main:entity')
entity_List = relationship('main:entity, remote_side=[name] ,cascade_backrefs=True, backref='main:typeIncomeStmt')
typeIncomeStmt = relationship('main:typeIncomeStmt, remote_side=[cashAccrual] ,cascade_backrefs=True, backref='main:scenarioYear')
scenarioYear_List = relationship('main:scenarioYear, remote_side=[name] ,cascade_backrefs=True, backref='main:typeIncomeStmt')
user = relationship('main:user, remote_side=[createdByUserId] ,cascade_backrefs=True, backref='main:sourceData')
sourceData_List = relationship('main:sourceData, remote_side=[id] ,cascade_backrefs=True, backref='main:user')
user_via_modifiedByUserId = relationship('main:user, remote_side=[modifiedByUserId] ,cascade_backrefs=True, backref='main:sourceData')
sourceData_List_via_modifiedByUserId = relationship('main:sourceData, remote_side=[id] ,cascade_backrefs=True, backref='main:user')

=========================
       applications 
=========================

=========================
       rules 
=========================
# ENTITY: TargetArea

def fn_validation_72(row: models.TargetArea, old_row: models.TargetArea, logic_row: LogicRow):
     return (row.areaCode>=0 and row.areaCode<10)

'''
     RuleType: validation
     Title: single digit area code
     Name: validation_72
     Entity: TargetArea
     Comments: None
'''
Rule.constraint(validate=models.TargetArea,
         calling=fn_validation_72,
         error_msg="The area code must be a single digit 0-9")

# ENTITY: AssembledFirstLevel

'''
     RuleType: sum
     Title: eliminationBalanceList = sum(eliminationFirstLevel_List.amount)
     Name: sum_eliminationBalanceList
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.sum(derive=models.AssembledFirstLevel.eliminationBalanceList,
         as_sum_of=models.EliminationFirstLevelList.amount)

'''
     RuleType: sum
     Title: alteredBalChildren = sum(assembledSecondLevel_List.alteredBalance where balance != null)
     Name: sum_alteredBalChildren
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.sum(derive=models.AssembledFirstLevel.alteredBalChildren, 
         as_sum_of=models.AssembledSecondLevelList.alteredBalance,
         where=lambda row: balance is not None )

def fn_formula_eliminationBalance(row: models.AssembledFirstLevel, old_row: models.AssembledFirstLevel, logic_row: LogicRow):
     return (row.leaf)  if  row.eliminationBalanceList  else  row.eliminateBalChildren

'''
     RuleType: formula
     Title: eliminationBalance = return (row.leaf) ? row.eliminationBalanceList : row.eliminateBalChildren;
     Name: formula_eliminationBalance
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.formula(derive=models.AssembledFirstLevel.eliminationBalance,
         calling=fn_formula_eliminationBalance)

'''
     RuleType: sum
     Title: combinedBalChildren = sum(assembledSecondLevel_List.combinedBalance where balance != null)
     Name: sum_combinedBalChildren
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.sum(derive=models.AssembledFirstLevel.combinedBalChildren, 
         as_sum_of=models.AssembledSecondLevelList.combinedBalance,
         where=lambda row: balance is not None )

'''
     RuleType: sum
     Title: eliminateBalChildren = sum(assembledSecondLevel_List.eliminationBalance where balance != null)
     Name: sum_eliminateBalChildren
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.sum(derive=models.AssembledFirstLevel.eliminateBalChildren, 
         as_sum_of=models.AssembledSecondLevelList.eliminationBalance,
         where=lambda row: balance is not None )

'''
     RuleType: sum
     Title: combinedBalanceList = sum(leafJctnFirstLevel_List.balance)
     Name: sum_combinedBalanceList
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.sum(derive=models.AssembledFirstLevel.combinedBalanceList,
         as_sum_of=models.LeafJctnFirstLevelList.balance)

def fn_formula_alteredBalance(row: models.AssembledFirstLevel, old_row: models.AssembledFirstLevel, logic_row: LogicRow):
     return (row.leaf)  if  row.alteredBalance  else  row.alteredBalChildren

'''
     RuleType: formula
     Title: alteredBalance = return (row.leaf) ? row.alteredBalance : row.alteredBalChildren;
     Name: formula_alteredBalance
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.formula(derive=models.AssembledFirstLevel.alteredBalance,
         calling=fn_formula_alteredBalance)

def fn_formula_balance(row: models.AssembledFirstLevel, old_row: models.AssembledFirstLevel, logic_row: LogicRow):
     return row.combinedBalance+row.eliminationBalance+row.alteredBalance

'''
     RuleType: formula
     Title: balance = return row.combinedBalance+row.eliminationBalance+row.alteredBalance;
     Name: formula_balance
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.formula(derive=models.AssembledFirstLevel.balance,
         calling=fn_formula_balance)

def fn_formula_locked(row: models.AssembledFirstLevel, old_row: models.AssembledFirstLevel, logic_row: LogicRow):
     return row.recastSet.locked

'''
     RuleType: formula
     Title: locked = return row.recastSet.locked;
     Name: formula_locked
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.formula(derive=models.AssembledFirstLevel.locked,
         calling=fn_formula_locked)

def fn_formula_combinedBalance(row: models.AssembledFirstLevel, old_row: models.AssembledFirstLevel, logic_row: LogicRow):
     return (row.leaf)  if  row.combinedBalanceList  else  row.combinedBalChildren

'''
     RuleType: formula
     Title: combinedBalance = return (row.leaf) ? row.combinedBalanceList : row.combinedBalChildren;
     Name: formula_combinedBalance
     Entity: AssembledFirstLevel
     Comments: None
'''
Rule.formula(derive=models.AssembledFirstLevel.combinedBalance,
         calling=fn_formula_combinedBalance)

# ENTITY: LeafJctnSecondLevel

def fn_formula_balance(row: models.LeafJctnSecondLevel, old_row: models.LeafJctnSecondLevel, logic_row: LogicRow):
     if !row.locked):
    return row.mappedSecondLevel.balance
else:
    return row.balance


'''
     RuleType: formula
     Title: balance = if (!row.locked){
     Name: formula_balance
     Entity: LeafJctnSecondLevel
     Comments: None
'''
Rule.formula(derive=models.LeafJctnSecondLevel.balance,
         calling=fn_formula_balance)

def fn_formula_locked(row: models.LeafJctnSecondLevel, old_row: models.LeafJctnSecondLevel, logic_row: LogicRow):
     return row.assembledSecondLevel.locked

'''
     RuleType: formula
     Title: locked = return row.assembledSecondLevel.locked;
     Name: formula_locked
     Entity: LeafJctnSecondLevel
     Comments: None
'''
Rule.formula(derive=models.LeafJctnSecondLevel.locked,
         calling=fn_formula_locked)

# ENTITY: ValuesForReport

def fn_formula_letterGrade(row: models.ValuesForReport, old_row: models.ValuesForReport, logic_row: LogicRow):
     if row.grade==3.0):
	return 'A+'
elif  (row.grade>2.3):
	return 'A'
elif  (row.grade>2.0):
	return 'A-'
elif  (row.grade>1.7):
	return 'B+'
elif  (row.grade>1.3):
	return 'B'
elif  (row.grade>1.0):
	return 'B-'
elif  (row.grade>0.7):
	return 'C+'
elif  (row.grade>0.3):
	return 'C'
else:return 'C-'

'''
     RuleType: formula
     Title: letterGrade = if (row.grade==3.0){
     Name: formula_letterGrade
     Entity: ValuesForReport
     Comments: None
'''
Rule.formula(derive=models.ValuesForReport.letterGrade,
         calling=fn_formula_letterGrade)

# ENTITY: AssembledSubArea

'''
     RuleType: sum
     Title: elimBalSecond = sum(assembledFirstLevel_List.eliminateBalChildren)
     Name: sum_elimBalSecond
     Entity: AssembledSubArea
     Comments: None
'''
Rule.sum(derive=models.AssembledSubArea.elimBalSecond,
         as_sum_of=models.AssembledFirstLevelList.eliminateBalChildren)

'''
     RuleType: sum
     Title: combinedBalFirst = sum(assembledFirstLevel_List.combinedBalanceList)
     Name: sum_combinedBalFirst
     Entity: AssembledSubArea
     Comments: None
'''
Rule.sum(derive=models.AssembledSubArea.combinedBalFirst,
         as_sum_of=models.AssembledFirstLevelList.combinedBalanceList)

'''
     RuleType: sum
     Title: altBalFirst = sum(assembledFirstLevel_List.alteredBalance where leaf  = 1)
     Name: sum_altBalFirst
     Entity: AssembledSubArea
     Comments: None
'''
Rule.sum(derive=models.AssembledSubArea.altBalFirst, 
         as_sum_of=models.AssembledFirstLevelList.alteredBalance,
         where=lambda row: leaf = 1; )

'''
     RuleType: sum
     Title: elimBalFirst = sum(assembledFirstLevel_List.eliminationBalanceList)
     Name: sum_elimBalFirst
     Entity: AssembledSubArea
     Comments: None
'''
Rule.sum(derive=models.AssembledSubArea.elimBalFirst,
         as_sum_of=models.AssembledFirstLevelList.eliminationBalanceList)

'''
     RuleType: sum
     Title: combinedBalSecond = sum(assembledFirstLevel_List.combinedBalChildren)
     Name: sum_combinedBalSecond
     Entity: AssembledSubArea
     Comments: None
'''
Rule.sum(derive=models.AssembledSubArea.combinedBalSecond,
         as_sum_of=models.AssembledFirstLevelList.combinedBalChildren)

'''
     RuleType: sum
     Title: altBalSecond = sum(assembledFirstLevel_List.alteredBalChildren)
     Name: sum_altBalSecond
     Entity: AssembledSubArea
     Comments: None
'''
Rule.sum(derive=models.AssembledSubArea.altBalSecond,
         as_sum_of=models.AssembledFirstLevelList.alteredBalChildren)

# ENTITY: RecastSet

'''
     RuleType: count
     Title: scenarioMembers count
     Name: count_scenarioMemberCount
     Entity: RecastSet
     Comments: None
'''
Rule.count(derive=models.RecastSet.scenarioMemberCount,
         as_count_of=models.RecastSetMembershipList)

def fn_formula_eliminationBalance(row: models.RecastSet, old_row: models.RecastSet, logic_row: LogicRow):
     return (row.elimBalAE - row.elimBalLQR)

'''
     RuleType: formula
     Title: eliminationBalance = return (row.elimBalAE - row.elimBalLQR);
     Name: formula_eliminationBalance
     Entity: RecastSet
     Comments: None
'''
Rule.formula(derive=models.RecastSet.eliminationBalance,
         calling=fn_formula_eliminationBalance)

def fn_validation_42(row: models.RecastSet, old_row: models.RecastSet, logic_row: LogicRow):
     return (row.analysisYear>2000 and row.analysisYear<2100)

'''
     RuleType: validation
     Title: Year is four digits
     Name: validation_42
     Entity: RecastSet
     Comments: None
'''
Rule.constraint(validate=models.RecastSet,
         calling=fn_validation_42,
         error_msg="Please enter a valid four-digit year.")

def fn_validation_43(row: models.RecastSet, old_row: models.RecastSet, logic_row: LogicRow):
     if row.recastSetSeq>0 and row.recastSetSeq<100):
    return True
else:
    return False


'''
     RuleType: validation
     Title: Sequence is two digit
     Name: validation_43
     Entity: RecastSet
     Comments: None
'''
Rule.constraint(validate=models.RecastSet,
         calling=fn_validation_43,
         error_msg="Please enter a number between (0-100).")

def fn_formula_recastSetCode(row: models.RecastSet, old_row: models.RecastSet, logic_row: LogicRow):
      sc = 0
sc = row.clientId * 1000000
sc +=  row.analysisYear*100
sc += row.recastSetSeq
return sc

'''
     RuleType: formula
     Title: Generate RecastSetCode
     Name: formula_recastSetCode
     Entity: RecastSet
     Comments: None
'''
Rule.formula(derive=models.RecastSet.recastSetCode,
         calling=fn_formula_recastSetCode)

'''
     RuleType: sum
     Title: elimBalLQR = sum(assembledArea_List.eliminationBalance where areaCode != 1 && areaCode !=5)
     Name: sum_elimBalLQR
     Entity: RecastSet
     Comments: None
'''
Rule.sum(derive=models.RecastSet.elimBalLQR, 
         as_sum_of=models.AssembledAreaList.eliminationBalance,
         where=lambda row: areaCode is not 1 && areaCode is not5 )

'''
     RuleType: sum
     Title: elimBalAE = sum(assembledArea_List.eliminationBalance where if (areaCode == 1 || areaCode ==5){true} else {false};)
     Name: sum_elimBalAE
     Entity: RecastSet
     Comments: None
'''
Rule.sum(derive=models.RecastSet.elimBalAE, 
         as_sum_of=models.AssembledAreaList.eliminationBalance,
         where=lambda row: areaCode is= 1 || areaCode is=5 )

# ENTITY: AccountUpload

def fn_validation_1(row: models.AccountUpload, old_row: models.AccountUpload, logic_row: LogicRow):
     return (logic_row.is_updated() or (logic_row.is_inserted()  and row.uid == row.scenarioYear.uid and row.scenarioYear.hasBeenUploaded == False and row.scenarioYear.inactive == False))

'''
     RuleType: validation
     Title: Validation: return (logicContext.verb == "UPDATE" || (logicContext.verb == "INSERT" && row.uid == row.scenarioYear.uid && row.scenarioYear.hasBeenUploaded === false && row.scenarioYear.inactive ===...
     Name: validation_1
     Entity: AccountUpload
     Comments: None
'''
Rule.constraint(validate=models.AccountUpload,
         calling=fn_validation_1,
         error_msg="The data you are attempting to load does not have a valid unique permission id.  You must be provided a valid, active, unused key prior to upload.  Please contact support.")

# ENTITY: Entity

def fn_validation_29(row: models.Entity, old_row: models.Entity, logic_row: LogicRow):
     return (row.entityNumber>0 and row.entityNumber<100)

'''
     RuleType: validation
     Title: entityNumber is two digits
     Name: validation_29
     Entity: Entity
     Comments: None
'''
Rule.constraint(validate=models.Entity,
         calling=fn_validation_29,
         error_msg="You must enter a number between 0 and 100.")

# ENTITY: TargetSubArea

def fn_validation_77(row: models.TargetSubArea, old_row: models.TargetSubArea, logic_row: LogicRow):
     return (row.subAreaCode>=0 and row.subAreaCode<100)

'''
     RuleType: validation
     Title: sub area code is two digit
     Name: validation_77
     Entity: TargetSubArea
     Comments: None
'''
Rule.constraint(validate=models.TargetSubArea,
         calling=fn_validation_77,
         error_msg="subAreaCode must be a two-digit number 0-99.")

# ENTITY: SourceData

# ENTITY: TargetFirstLevel

def fn_validation_73(row: models.TargetFirstLevel, old_row: models.TargetFirstLevel, logic_row: LogicRow):
     return (row.accountFirstCode>=0 and row.accountFirstCode<100)

'''
     RuleType: validation
     Title: account first code two digits
     Name: validation_73
     Entity: TargetFirstLevel
     Comments: None
'''
Rule.constraint(validate=models.TargetFirstLevel,
         calling=fn_validation_73,
         error_msg="The account first code must be a number 0-99")

def fn_validation_74(row: models.TargetFirstLevel, old_row: models.TargetFirstLevel, logic_row: LogicRow):
     if row.isAccrualAdjustable):
    return (row.targetForAccrualAdj == 4 or  row.targetForAccrualAdj == 5)
else:
    return True


'''
     RuleType: validation
     Title: Validation: if (row.isAccrualAdjustable){
     Name: validation_74
     Entity: TargetFirstLevel
     Comments: None
'''
Rule.constraint(validate=models.TargetFirstLevel,
         calling=fn_validation_74,
         error_msg="You can only target Revenue or Expense accounts.  Enter 4 for Revenue and 5 for Expense.")

# ENTITY: TargetSecondLevel

def fn_validation_75(row: models.TargetSecondLevel, old_row: models.TargetSecondLevel, logic_row: LogicRow):
     return (row.accountSecondCode>=0 and row.accountSecondCode<100)

'''
     RuleType: validation
     Title: account second code is two digits
     Name: validation_75
     Entity: TargetSecondLevel
     Comments: None
'''
Rule.constraint(validate=models.TargetSecondLevel,
         calling=fn_validation_75,
         error_msg="The account second code must be a number 0-99.")

def fn_validation_76(row: models.TargetSecondLevel, old_row: models.TargetSecondLevel, logic_row: LogicRow):
     if row.isAccrualAdjustable):
    return (row.targetForAccrualAdj == 4 or  row.targetForAccrualAdj == 5)
else:
    return True


'''
     RuleType: validation
     Title: Validation: if (row.isAccrualAdjustable){
     Name: validation_76
     Entity: TargetSecondLevel
     Comments: None
'''
Rule.constraint(validate=models.TargetSecondLevel,
         calling=fn_validation_76,
         error_msg="You can only target Revenue or Expense accounts.  Enter 4 for Revenue and 5 for Expense.")

# ENTITY: ClientReportDetail

def fn_formula_letterGrade(row: models.ClientReportDetail, old_row: models.ClientReportDetail, logic_row: LogicRow):
     if row.gradeCumulativePoints==15.0):
	return 'A+'
elif  (row.gradeCumulativePoints>11.5):
	return 'A'
elif  (row.gradeCumulativePoints>10.0):
	return 'A-'
elif  (row.gradeCumulativePoints>8.5):
	return 'B+'
elif  (row.gradeCumulativePoints>6.5):
	return 'B'
elif  (row.gradeCumulativePoints>5.0):
	return 'B-'
elif  (row.gradeCumulativePoints>3.5):
	return 'C+'
elif  (row.gradeCumulativePoints>1.5):
	return 'C'
else:return 'C-'

'''
     RuleType: formula
     Title: letterGrade = if (row.gradeCumulativePoints==15.0){
     Name: formula_letterGrade
     Entity: ClientReportDetail
     Comments: None
'''
Rule.formula(derive=models.ClientReportDetail.letterGrade,
         calling=fn_formula_letterGrade)

'''
     RuleType: sum
     Title: gradeCumulativePoints = sum(valuesForReport_List.grade)
     Name: sum_gradeCumulativePoints
     Entity: ClientReportDetail
     Comments: None
'''
Rule.sum(derive=models.ClientReportDetail.gradeCumulativePoints,
         as_sum_of=models.ValuesForReportList.grade)

# ENTITY: EliminationFirstLevel

def fn_validation_27(row: models.EliminationFirstLevel, old_row: models.EliminationFirstLevel, logic_row: LogicRow):
      return !row.recastSet.locked

'''
     RuleType: validation
     Title: Validation:  return !row.recastSet.locked;
     Name: validation_27
     Entity: EliminationFirstLevel
     Comments: None
'''
Rule.constraint(validate=models.EliminationFirstLevel,
         calling=fn_validation_27,
         error_msg="This Recast Set has been locked.  You are not allowed to add or modify elimination entries once a set is locked.  Contact Support.")

# ENTITY: LeafJctnFirstLevel

def fn_formula_balance(row: models.LeafJctnFirstLevel, old_row: models.LeafJctnFirstLevel, logic_row: LogicRow):
     if !row.locked):
    return row.mappedFirstLevel.balance
else:
    return row.balance


'''
     RuleType: formula
     Title: balance = if (!row.locked){
     Name: formula_balance
     Entity: LeafJctnFirstLevel
     Comments: None
'''
Rule.formula(derive=models.LeafJctnFirstLevel.balance,
         calling=fn_formula_balance)

def fn_formula_locked(row: models.LeafJctnFirstLevel, old_row: models.LeafJctnFirstLevel, logic_row: LogicRow):
     return row.assembledFirstLevel.locked

'''
     RuleType: formula
     Title: locked = return row.assembledFirstLevel.locked;
     Name: formula_locked
     Entity: LeafJctnFirstLevel
     Comments: None
'''
Rule.formula(derive=models.LeafJctnFirstLevel.locked,
         calling=fn_formula_locked)

# ENTITY: MappedSubArea

'''
     RuleType: sum
     Title: mappedBalance = sum(mappedFirstLevel_List.mappedBalance)
     Name: sum_mappedBalance
     Entity: MappedSubArea
     Comments: None
'''
Rule.sum(derive=models.MappedSubArea.mappedBalance,
         as_sum_of=models.MappedFirstLevelList.mappedBalance)

'''
     RuleType: sum
     Title: accrualBalance = sum(mappedFirstLevel_List.accrualBalance)
     Name: sum_accrualBalance
     Entity: MappedSubArea
     Comments: None
'''
Rule.sum(derive=models.MappedSubArea.accrualBalance,
         as_sum_of=models.MappedFirstLevelList.accrualBalance)

'''
     RuleType: sum
     Title: balance = sum(mappedFirstLevel_List.balance)
     Name: sum_balance
     Entity: MappedSubArea
     Comments: None
'''
Rule.sum(derive=models.MappedSubArea.balance, 
         as_sum_of=models.MappedFirstLevelList.balance,
         where=lambda row:  )

# ENTITY: EliminationSecondLevel

def fn_validation_28(row: models.EliminationSecondLevel, old_row: models.EliminationSecondLevel, logic_row: LogicRow):
     return !row.recastSet.locked

'''
     RuleType: validation
     Title: Validation: return !row.recastSet.locked;
     Name: validation_28
     Entity: EliminationSecondLevel
     Comments: None
'''
Rule.constraint(validate=models.EliminationSecondLevel,
         calling=fn_validation_28,
         error_msg="This Recast Set is locked.  You are not allowed to add or modify elimination entries once a set has been locked.  Contact Support.")

# ENTITY: MappedFirstLevel

'''
     RuleType: sum
     Title: mappedBalChildren = sum(mappedSecondLevel_List.mappedBalance where balance != null)
     Name: sum_mappedBalChildren
     Entity: MappedFirstLevel
     Comments: None
'''
Rule.sum(derive=models.MappedFirstLevel.mappedBalChildren, 
         as_sum_of=models.MappedSecondLevelList.mappedBalance,
         where=lambda row: balance is not None )

def fn_formula_accrualBalance(row: models.MappedFirstLevel, old_row: models.MappedFirstLevel, logic_row: LogicRow):
     return (row.leaf)  if  row.accrualBalance  else  row.accrualBalChildren

'''
     RuleType: formula
     Title: accrualBalance = return (row.leaf) ? row.accrualBalance : row.accrualBalChildren
     Name: formula_accrualBalance
     Entity: MappedFirstLevel
     Comments: None
'''
Rule.formula(derive=models.MappedFirstLevel.accrualBalance,
         calling=fn_formula_accrualBalance)

'''
     RuleType: sum
     Title: accrualBalChildren = sum(mappedSecondLevel_List.accrualBalance where balance != null)
     Name: sum_accrualBalChildren
     Entity: MappedFirstLevel
     Comments: None
'''
Rule.sum(derive=models.MappedFirstLevel.accrualBalChildren, 
         as_sum_of=models.MappedSecondLevelList.accrualBalance,
         where=lambda row: balance is not None )

def fn_formula_mappedBalance(row: models.MappedFirstLevel, old_row: models.MappedFirstLevel, logic_row: LogicRow):
     return (row.leaf)  if  row.mappedBalance  else  row.mappedBalChildren

'''
     RuleType: formula
     Title: mappedBalance = return (row.leaf) ? row.mappedBalance : row.mappedBalChildren
     Name: formula_mappedBalance
     Entity: MappedFirstLevel
     Comments: None
'''
Rule.formula(derive=models.MappedFirstLevel.mappedBalance,
         calling=fn_formula_mappedBalance)

def fn_formula_balance(row: models.MappedFirstLevel, old_row: models.MappedFirstLevel, logic_row: LogicRow):
     return (row.leaf)  if  row.balance  else  row.balanceChildren

'''
     RuleType: formula
     Title: balance = return (row.leaf) ? row.balance : row.balanceChildren;
     Name: formula_balance
     Entity: MappedFirstLevel
     Comments: None
'''
Rule.formula(derive=models.MappedFirstLevel.balance,
         calling=fn_formula_balance)

'''
     RuleType: sum
     Title: balanceChildren = sum(mappedSecondLevel_List.balance where balance != null)
     Name: sum_balanceChildren
     Entity: MappedFirstLevel
     Comments: None
'''
Rule.sum(derive=models.MappedFirstLevel.balanceChildren, 
         as_sum_of=models.MappedSecondLevelList.balance,
         where=lambda row: balance is not None )

# ENTITY: AnalysisTemplate

def fn_validation_5(row: models.AnalysisTemplate, old_row: models.AnalysisTemplate, logic_row: LogicRow):
     return (row.analysisYear == None or (row.analysisYear>2000 and row.analysisYear<2100))

'''
     RuleType: validation
     Title: Year must be four digits
     Name: validation_5
     Entity: AnalysisTemplate
     Comments: None
'''
Rule.constraint(validate=models.AnalysisTemplate,
         calling=fn_validation_5,
         error_msg="If not left blank (null), the year must be between 2000 and 2100.")

# ENTITY: SourceBenchmarkData

def fn_event_59(row: models.SourceBenchmarkData, old_row: models.SourceBenchmarkData, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': False, 'delete': False}
     row.priorYear=row.dataYear-1
row.priorFiveYear=row.dataYear-4

'''
     RuleType: event
     Title: add prior years
     Name: event_59
     Entity: SourceBenchmarkData
     Comments: None
'''
Rule.row_event(on_class=models.SourceBenchmarkData,
         calling=fn_event_59)

# ENTITY: MappedArea

'''
     RuleType: sum
     Title: mappedBalance = sum(mappedSubArea_List.mappedBalance)
     Name: sum_mappedBalance
     Entity: MappedArea
     Comments: None
'''
Rule.sum(derive=models.MappedArea.mappedBalance,
         as_sum_of=models.MappedSubAreaList.mappedBalance)

'''
     RuleType: sum
     Title: accrualBalance = sum(mappedSubArea_List.accrualBalance)
     Name: sum_accrualBalance
     Entity: MappedArea
     Comments: None
'''
Rule.sum(derive=models.MappedArea.accrualBalance,
         as_sum_of=models.MappedSubAreaList.accrualBalance)

'''
     RuleType: sum
     Title: balance = sum(mappedSubArea_List.balance)
     Name: sum_balance
     Entity: MappedArea
     Comments: None
'''
Rule.sum(derive=models.MappedArea.balance,
         as_sum_of=models.MappedSubAreaList.balance)

# ENTITY: AssembledSecondLevel

'''
     RuleType: sum
     Title: combinedBalance = sum(leafJctnSecondLevel_List.balance)
     Name: sum_combinedBalance
     Entity: AssembledSecondLevel
     Comments: None
'''
Rule.sum(derive=models.AssembledSecondLevel.combinedBalance,
         as_sum_of=models.LeafJctnSecondLevelList.balance)

def fn_formula_balance(row: models.AssembledSecondLevel, old_row: models.AssembledSecondLevel, logic_row: LogicRow):
     return row.combinedBalance + row.eliminationBalance + row.alteredBalance

'''
     RuleType: formula
     Title: balance = return row.combinedBalance + row.eliminationBalance + row.alteredBalance;
     Name: formula_balance
     Entity: AssembledSecondLevel
     Comments: None
'''
Rule.formula(derive=models.AssembledSecondLevel.balance,
         calling=fn_formula_balance)

'''
     RuleType: sum
     Title: eliminationBalance = sum(eliminationSecondLevel_List.amount)
     Name: sum_eliminationBalance
     Entity: AssembledSecondLevel
     Comments: None
'''
Rule.sum(derive=models.AssembledSecondLevel.eliminationBalance,
         as_sum_of=models.EliminationSecondLevelList.amount)

def fn_formula_locked(row: models.AssembledSecondLevel, old_row: models.AssembledSecondLevel, logic_row: LogicRow):
     return row.recastSet.locked

'''
     RuleType: formula
     Title: locked = return row.recastSet.locked;
     Name: formula_locked
     Entity: AssembledSecondLevel
     Comments: None
'''
Rule.formula(derive=models.AssembledSecondLevel.locked,
         calling=fn_formula_locked)

# ENTITY: ScenarioYear

'''
     RuleType: parentCopy
     Title: costMarket = parentcopy(entity.costMarket)
     Name: parentCopy_costMarket
     Entity: ScenarioYear
     Comments: None
'''
Rule.copy(derive=models.ScenarioYear.costMarket,
         from_parent=models.Entity.costMarket)

def fn_validation_49(row: models.ScenarioYear, old_row: models.ScenarioYear, logic_row: LogicRow):
     return (row.analysisYear>2000 and row.analysisYear<2100)

'''
     RuleType: validation
     Title: year is four digits
     Name: validation_49
     Entity: ScenarioYear
     Comments: None
'''
Rule.constraint(validate=models.ScenarioYear,
         calling=fn_validation_49,
         error_msg="Please enter a valid four digit year.")

'''
     RuleType: parentCopy
     Title: cashAccrual = parentcopy(entity.cashAccrual)
     Name: parentCopy_cashAccrual
     Entity: ScenarioYear
     Comments: None
'''
Rule.copy(derive=models.ScenarioYear.cashAccrual,
         from_parent=models.Entity.cashAccrual)

def fn_eventCommit_52(row: models.ScenarioYear, old_row: models.ScenarioYear, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': False}
     if row.countUploaded == 1):
    row.hasBeenUploaded = True


'''
     RuleType: commitEvent
     Title: Auto mark hasBeenUploaded
     Name: eventCommit_52
     Entity: ScenarioYear
     Comments: None
'''
Rule.commit_row_event(on_class=models.ScenarioYear,
         calling=fn_eventCommit_52

'''
     RuleType: count
     Title: countUploaded = count(accountUpload_List)
     Name: count_countUploaded
     Entity: ScenarioYear
     Comments: None
'''
Rule.count(derive=models.ScenarioYear.countUploaded,
         as_count_of=models.AccountUploadList)

def fn_formula_uid(row: models.ScenarioYear, old_row: models.ScenarioYear, logic_row: LogicRow):
      uid = row.clientId * 1000000000000
uid += row.entity.entityNumber * 10000000000
uid +=  row.analysisYear*1000000
uid +=  Math.random()*1000000 
return parseInt(uid)

'''
     RuleType: formula
     Title: GenerateUID
     Name: formula_uid
     Entity: ScenarioYear
     Comments: None
'''
Rule.formula(derive=models.ScenarioYear.uid,
         calling=fn_formula_uid)

'''
     RuleType: sum
     Title: accrualBalance = sum(mappedArea_List.accrualBalance)
     Name: sum_accrualBalance
     Entity: ScenarioYear
     Comments: None
'''
Rule.sum(derive=models.ScenarioYear.accrualBalance,
         as_sum_of=models.MappedAreaList.accrualBalance)

def fn_formula_scenarioCode(row: models.ScenarioYear, old_row: models.ScenarioYear, logic_row: LogicRow):
      sc = 0
sc = row.clientId * 100000000
sc += row.entity.entityNumber * 1000000
sc +=  row.analysisYear*100
sc += row.scenarioSeq
return sc

'''
     RuleType: formula
     Title: Generate Scenario Code
     Name: formula_scenarioCode
     Entity: ScenarioYear
     Comments: None
'''
Rule.formula(derive=models.ScenarioYear.scenarioCode,
         calling=fn_formula_scenarioCode)

def fn_validation_50(row: models.ScenarioYear, old_row: models.ScenarioYear, logic_row: LogicRow):
     return (row.scenarioSeq>0 and row.scenarioSeq<100)

'''
     RuleType: validation
     Title: Sequence is two digits
     Name: validation_50
     Entity: ScenarioYear
     Comments: None
'''
Rule.constraint(validate=models.ScenarioYear,
         calling=fn_validation_50,
         error_msg="This must be a number between zero and 99")

'''
     RuleType: parentCopy
     Title: fiscalYearEnd = parentcopy(entity.fiscalYearEnd)
     Name: parentCopy_fiscalYearEnd
     Entity: ScenarioYear
     Comments: None
'''
Rule.copy(derive=models.ScenarioYear.fiscalYearEnd,
         from_parent=models.Entity.fiscalYearEnd)

def fn_validation_51(row: models.ScenarioYear, old_row: models.ScenarioYear, logic_row: LogicRow):
     return row.entity.clientId == row.clientId 

'''
     RuleType: validation
     Title: Entity is of Client
     Name: validation_51
     Entity: ScenarioYear
     Comments: None
'''
Rule.constraint(validate=models.ScenarioYear,
         calling=fn_validation_51,
         error_msg="The entity that you have selected is not for the client your have entered.")

# ENTITY: SourceDataFeedsForBenchmark

def fn_event_61(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.grossRevenue += row.grossRevenue
else:
    if  old_row.grossRevenue == row.grossRevenue):
    
    else:
        if old_row.grossRevenue == None):
           row.sourceBenchmarkData.grossRevenue += row.grossRevenue
          else:
             change = row.grossRevenue-old_row.grossRevenue
            row.sourceBenchmarkData.grossRevenue += change
        
    



'''
     RuleType: event
     Title: benchmarkGrossRevenue
     Name: event_61
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_61)

def fn_event_66(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.netDistributionsAndTax += row.netDistributionsAndTax
else:
    if  old_row.netDistributionsAndTax == row.netDistributionsAndTax):
    
    else:
        if old_row.netDistributionsAndTax == None):
           row.sourceBenchmarkData.netDistributionsAndTax += row.netDistributionsAndTax
          else:
             change = row.netDistributionsAndTax-old_row.netDistributionsAndTax
            row.sourceBenchmarkData.netDistributionsAndTax += change
        
    


'''
     RuleType: event
     Title: benchmarkNetDistributionsAndTax
     Name: event_66
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_66)

def fn_event_70(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.nonCurrentLiabilities += row.nonCurrentLiabilities
else:
    if  old_row.nonCurrentLiabilities == row.nonCurrentLiabilities):
    
    else:
        if old_row.nonCurrentLiabilities == None):
           row.sourceBenchmarkData.nonCurrentLiabilities += row.nonCurrentLiabilities
          else:
             change = row.nonCurrentLiabilities-old_row.nonCurrentLiabilities
            row.sourceBenchmarkData.nonCurrentLiabilities += change
        
    


'''
     RuleType: event
     Title: benchmarkNonCurrentLiabilities
     Name: event_70
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_70)

def fn_event_71(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.creditLimit += row.creditLimit
else:
    if  old_row.creditLimit == row.creditLimit):
    
    else:
        if old_row.creditLimit == None):
           row.sourceBenchmarkData.creditLimit += row.creditLimit
          else:
             change = row.creditLimit-old_row.creditLimit
            row.sourceBenchmarkData.creditLimit += change
        
    


'''
     RuleType: event
     Title: benchmarkCreditLimit
     Name: event_71
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_71)

def fn_event_67(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.currentAssets += row.currentAssets
else:
    if  old_row.currentAssets == row.currentAssets):
    
    else:
        if old_row.currentAssets == None):
           row.sourceBenchmarkData.currentAssets += row.currentAssets
          else:
             change = row.currentAssets-old_row.currentAssets
            row.sourceBenchmarkData.currentAssets += change
        
    


'''
     RuleType: event
     Title: benchmarkCurrentAssets
     Name: event_67
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_67)

def fn_event_68(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.nonCurrentAssets += row.nonCurrentAssets
else:
    if  old_row.nonCurrentAssets == row.nonCurrentAssets):
    
    else:
        if old_row.nonCurrentAssets == None):
           row.sourceBenchmarkData.nonCurrentAssets += row.nonCurrentAssets
          else:
             change = row.nonCurrentAssets-old_row.nonCurrentAssets
            row.sourceBenchmarkData.nonCurrentAssets += change
        
    


'''
     RuleType: event
     Title: benchmarkNonCurrentAssets
     Name: event_68
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_68)

def fn_event_64(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.productionExpense += row.productionExpense
else:
    if  old_row.productionExpense == row.productionExpense):
    
    else:
        if old_row.productionExpense == None):
           row.sourceBenchmarkData.productionExpense += row.productionExpense
          else:
             change = row.productionExpense-old_row.productionExpense
            row.sourceBenchmarkData.productionExpense += change
        
    


'''
     RuleType: event
     Title: benchmarkProductionExpense
     Name: event_64
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_64)

def fn_event_65(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.netInterest += row.netInterest
else:
    if  old_row.netInterest == row.netInterest):
    
    else:
        if old_row.netInterest == None):
           row.sourceBenchmarkData.netInterest += row.netInterest
          else:
             change = row.netInterest-old_row.netInterest
            row.sourceBenchmarkData.netInterest += change
        
    


'''
     RuleType: event
     Title: benchmarkNetInterest
     Name: event_65
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_65)

def fn_event_69(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.currentLiabilities += row.currentLiabilities
else:
    if  old_row.currentLiabilities == row.currentLiabilities):
    
    else:
        if old_row.currentLiabilities == None):
           row.sourceBenchmarkData.currentLiabilities += row.currentLiabilities
          else:
             change = row.currentLiabilities-old_row.currentLiabilities
            row.sourceBenchmarkData.currentLiabilities += change
        
    


'''
     RuleType: event
     Title: benchmarkCurrentLiabilities
     Name: event_69
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_69)

def fn_event_62(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': False, 'delete': False}
     if logic_row.is_inserted() ):
  
    row.sourceBenchmarkData.participantCount += 1


'''
     RuleType: event
     Title: participantCount
     Name: event_62
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_62)

def fn_event_63(row: models.SourceDataFeedsForBenchmark, old_row: models.SourceDataFeedsForBenchmark, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': True}
     if logic_row.is_inserted() ):
    row.sourceBenchmarkData.costOfGoods += row.costOfGoods
else:
    if  old_row.costOfGoods == row.costOfGoods):
    
    else:
        if old_row.costOfGoods == None):
           row.sourceBenchmarkData.costOfGoods += row.costOfGoods
          else:
             change = row.costOfGoods-old_row.costOfGoods
            row.sourceBenchmarkData.costOfGoods += change
        
    


'''
     RuleType: event
     Title: benchmarkCostOfGoods
     Name: event_63
     Entity: SourceDataFeedsForBenchmark
     Comments: None
'''
Rule.row_event(on_class=models.SourceDataFeedsForBenchmark,
         calling=fn_event_63)

# ENTITY: AssembledArea

'''
     RuleType: sum
     Title: elimBalSecond = sum(assembledSubArea_List.elimBalSecond)
     Name: sum_elimBalSecond
     Entity: AssembledArea
     Comments: None
'''
Rule.sum(derive=models.AssembledArea.elimBalSecond,
         as_sum_of=models.AssembledSubAreaList.elimBalSecond)

'''
     RuleType: sum
     Title: combinedBalFirst = sum(assembledSubArea_List.combinedBalFirst)
     Name: sum_combinedBalFirst
     Entity: AssembledArea
     Comments: None
'''
Rule.sum(derive=models.AssembledArea.combinedBalFirst,
         as_sum_of=models.AssembledSubAreaList.combinedBalFirst)

'''
     RuleType: sum
     Title: altBalFirst = sum(assembledSubArea_List.altBalFirst)
     Name: sum_altBalFirst
     Entity: AssembledArea
     Comments: None
'''
Rule.sum(derive=models.AssembledArea.altBalFirst,
         as_sum_of=models.AssembledSubAreaList.altBalFirst)

'''
     RuleType: sum
     Title: elimBalFirst = sum(assembledSubArea_List.elimBalFirst)
     Name: sum_elimBalFirst
     Entity: AssembledArea
     Comments: None
'''
Rule.sum(derive=models.AssembledArea.elimBalFirst,
         as_sum_of=models.AssembledSubAreaList.elimBalFirst)

'''
     RuleType: sum
     Title: combinedBalSecond = sum(assembledSubArea_List.combinedBalSecond)
     Name: sum_combinedBalSecond
     Entity: AssembledArea
     Comments: None
'''
Rule.sum(derive=models.AssembledArea.combinedBalSecond,
         as_sum_of=models.AssembledSubAreaList.combinedBalSecond)

'''
     RuleType: sum
     Title: altBalSecond = sum(assembledSubArea_List.altBalSecond)
     Name: sum_altBalSecond
     Entity: AssembledArea
     Comments: None
'''
Rule.sum(derive=models.AssembledArea.altBalSecond,
         as_sum_of=models.AssembledSubAreaList.altBalSecond)

# ENTITY: Actor

def fn_validation_2(row: models.Actor, old_row: models.Actor, logic_row: LogicRow):
     return (row.baseDataYear>2000 and row.baseDataYear<2100)

'''
     RuleType: validation
     Title: year is four digits
     Name: validation_2
     Entity: Actor
     Comments: None
'''
Rule.constraint(validate=models.Actor,
         calling=fn_validation_2,
         error_msg="The year must be between 2000 and 2100")

'''
     RuleType: count
     Title: actorCount = count(motivatedActor_List)
     Name: count_actorCount
     Entity: Actor
     Comments: None
'''
Rule.count(derive=models.Actor.actorCount,
         as_count_of=models.MotivatedActorList)

'''
     RuleType: parentCopy
     Title: baseDataYear = parentcopy(sourceData.dataYear)
     Name: parentCopy_dataYear
     Entity: Actor
     Comments: None
'''
Rule.copy(derive=models.Actor.baseDataYear,
         from_parent=models.SourceData.dataYear)

# ENTITY: Client

def fn_validation_24(row: models.Client, old_row: models.Client, logic_row: LogicRow):
     return (row.id>998 and row.id<10000)

'''
     RuleType: validation
     Title: ClientId is four digits
     Name: validation_24
     Entity: Client
     Comments: None
'''
Rule.constraint(validate=models.Client,
         calling=fn_validation_24,
         error_msg="The client Id must be a four digit number.")

# ENTITY: Impact

def fn_event_32(row: models.Impact, old_row: models.Impact, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': True, 'delete': False}
      startYear = row.impactStartsYear - row.baseDataYear,
fctn = row.impactFunctionId,
mag = row.impactMagnitude,
rate = row.impactRate,
base = row.impactBase


if fctn == 1):
	# cycle
	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else myCycle(mag,rate,base,0)
    row.impactTwo = (startYear > 2)  if  0 else myCycle(mag,rate,base,1)
    row.impactThree = (startYear > 3)  if  0 else myCycle(mag,rate,base,2)
    row.impactFour = (startYear > 4)  if  0 else myCycle(mag,rate,base,3)
    row.impactFive = (startYear > 5)  if  0 else myCycle(mag,rate,base,4)
    row.impactSix = (startYear > 6)  if  0 else myCycle(mag,rate,base,5)
    row.impactSeven = (startYear > 7)  if  0 else myCycle(mag,rate,base,6)
    row.impactEight = (startYear > 8)  if  0 else myCycle(mag,rate,base,7)
    row.impactNine = (startYear > 9)  if  0 else myCycle(mag,rate,base,8)
    row.impactTen = (startYear > 10)  if  0 else myCycle(mag,rate,base,9)

if fctn == 2):
	# one shot
	# if row.impactAreaSub ==9 then it is a initial baseline 
	# and impactZero as well as impactOne get set with the mag.  
	# Zero does not accumulate in the accumualtor in the webapp.
	 popZero = (row.impactAreaSub ==9 and startYear == 1)  if  mag else 0
	row.impactZero = popZero
	row.impactOne = (startYear == 1)  if  mag else 0
    row.impactTwo = (startYear == 2)  if  mag else 0
    row.impactThree = (startYear == 3)  if  mag else 0
    row.impactFour = (startYear == 4)  if  mag else 0
    row.impactFive = (startYear == 5)  if  mag else 0
    row.impactSix = (startYear == 6)  if  mag else 0
    row.impactSeven = (startYear == 7)  if  mag else 0
    row.impactEight = (startYear == 8)  if  mag else 0
    row.impactNine = (startYear == 9)  if  mag else 0
    row.impactTen = (startYear == 10)  if  mag else 0

if fctn == 3):
	#steady state
	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else mag
    row.impactTwo = (startYear > 2)  if  0 else mag
    row.impactThree = (startYear > 3)  if  0 else mag
    row.impactFour = (startYear > 4)  if  0 else mag
    row.impactFive = (startYear > 5)  if  0 else mag
    row.impactSix = (startYear > 6)  if  0 else mag
    row.impactSeven = (startYear > 7)  if  0 else mag
    row.impactEight = (startYear > 8)  if  0 else mag
    row.impactNine = (startYear > 9)  if  0 else mag
    row.impactTen = (startYear > 10)  if  0 else mag


if fctn == 4):
    row.impactZero = 0
	# manual entry

if fctn == 5):
	#ramp up
	
	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else mag-mag*mySimplePower(rate,startYear-2)
    row.impactTwo = (startYear > 2)  if  0 else mag-mag*mySimplePower(rate,startYear-3)
    row.impactThree = (startYear > 3)  if  0 else mag-mag*mySimplePower(rate,startYear-4)
    row.impactFour = (startYear > 4)  if  0 else mag-mag*mySimplePower(rate,startYear-5)
    row.impactFive = (startYear > 5)  if  0 else mag-mag*mySimplePower(rate,startYear-6)
    row.impactSix = (startYear > 6)  if  0 else mag-mag*mySimplePower(rate,startYear-7)
    row.impactSeven = (startYear > 7)  if  0 else mag-mag*mySimplePower(rate,startYear-8)
    row.impactEight = (startYear > 8)  if  0 else mag-mag*mySimplePower(rate,startYear-9)
    row.impactNine = (startYear > 9)  if  0 else mag-mag*mySimplePower(rate,startYear-10)
    row.impactTen = (startYear > 10)  if  0 else mag-mag*mySimplePower(rate,startYear-11)

if fctn == 6):
	#ramp down
	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else mag*mySimplePower(rate,(0<base) if 0 else startYear+base-2)
    row.impactTwo = (startYear > 2)  if  0 else mag*mySimplePower(rate,(1<base) if 0 else startYear+base-3)
    row.impactThree = (startYear > 3)  if  0 else mag*mySimplePower(rate,(2<base) if 0 else startYear+base-4)
    row.impactFour = (startYear > 4)  if  0 else mag*mySimplePower(rate,(3<base) if 0 else startYear+base-5)
    row.impactFive = (startYear > 5)  if  0 else mag*mySimplePower(rate,(4<base) if 0 else startYear+base-6)
    row.impactSix = (startYear > 6)  if  0 else mag*mySimplePower(rate,(5<base) if 0 else startYear+base-7)
    row.impactSeven = (startYear > 7)  if  0 else mag*mySimplePower(rate,(6<base) if 0 else startYear+base-8)
    row.impactEight = (startYear > 8)  if  0 else mag*mySimplePower(rate,(7<base) if 0 else startYear+base-9)
    row.impactNine = (startYear > 9)  if  0 else mag*mySimplePower(rate,(8<base) if 0 else startYear+base-10)
    row.impactTen = (startYear > 10)  if  0 else mag*mySimplePower(rate,(9<base) if 0 else startYear+base-11)

if fctn == 7 or fctn == 8):
	# linear
	rate = (fctn == 8)  if  -rate else rate
	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else myLinear(rate,1-startYear,mag)
    row.impactTwo = (startYear > 2)  if  0 else myLinear(rate,2-startYear,mag)
    row.impactThree = (startYear > 3)  if  0 else myLinear(rate,3-startYear,mag)
    row.impactFour = (startYear > 4)  if  0 else myLinear(rate,4-startYear,mag)
    row.impactFive = (startYear > 5)  if  0 else myLinear(rate,5-startYear,mag)
    row.impactSix = (startYear > 6)  if  0 else myLinear(rate,6-startYear,mag)
    row.impactSeven = (startYear > 7)  if  0 else myLinear(rate,7-startYear,mag)
    row.impactEight = (startYear > 8)  if  0 else myLinear(rate,8-startYear,mag)
    row.impactNine = (startYear > 9)  if  0 else myLinear(rate,9-startYear,mag)
    row.impactTen = (startYear > 10)  if  0 else myLinear(rate,10-startYear,mag)

if fctn == 9 or fctn == 10):
	#growth or decay  (just the change without the magnitude)
     decay = (fctn==10) if -1 else 1

	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,1-startYear))
	row.impactTwo = (startYear > 2)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,2-startYear))
	row.impactThree = (startYear > 3)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,3-startYear))
	row.impactFour = (startYear > 4)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,4-startYear))
	row.impactFive = (startYear > 5)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,5-startYear))
	row.impactSix = (startYear > 6)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,6-startYear))
	row.impactSeven = (startYear > 7)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,7-startYear))
	row.impactEight = (startYear > 8)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,8-startYear))
	row.impactNine = (startYear > 9)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,9-startYear))
	row.impactTen = (startYear > 10)  if  0 else decay*mag*(-decay+decay*mySimplePower(1+decay*rate,10-startYear))

if fctn==11 or fctn==12):
 	#s curve or cummulative distribution def up and down
 	 middleYear = startYear -1 + .5*base
 	row.impactZero = 0
 	row.impactOne = (startYear > 1)  if  0 else myS(fctn,rate*(1-startYear-base/2),mag)
 	row.impactTwo = (startYear > 2)  if  0 else myS(fctn,rate*(2-startYear-base/2),mag)
 	row.impactThree = (startYear > 3)  if  0 else myS(fctn,rate*(3-startYear-base/2),mag)
 	row.impactFour = (startYear > 4)  if  0 else myS(fctn,rate*(4-startYear-base/2),mag)
 	row.impactFive = (startYear > 5)  if  0 else myS(fctn,rate*(5-startYear-base/2),mag)
 	row.impactSix = (startYear > 6)  if  0 else myS(fctn,rate*(6-startYear-base/2),mag)
 	row.impactSeven = (startYear > 7)  if  0 else myS(fctn,rate*(7-startYear-base/2),mag)
	row.impactEight = (startYear > 8)  if  0 else myS(fctn,rate*(8-startYear-base/2),mag)
 	row.impactNine = (startYear > 9)  if  0 else myS(fctn,rate*(9-startYear-base/2),mag)
 	row.impactTen = (startYear > 10)  if  0 else myS(fctn,rate*(10-startYear-base/2),mag)
 

if fctn==13):
    #bell  mag=height, rate=std dev, base=center
	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else mag*Math.pow(Math.E,-1*(0-base)*(0-base)/(2*rate*rate))
    row.impactTwo = (startYear > 2)  if  0 else mag*Math.pow(Math.E,-1*(1-base)*(1-base)/(2*rate*rate))
    row.impactThree = (startYear > 3)  if  0 else mag*Math.pow(Math.E,-1*(2-base)*(2-base)/(2*rate*rate))
    row.impactFour = (startYear > 4)  if  0 else mag*Math.pow(Math.E,-1*(3-base)*(3-base)/(2*rate*rate))
    row.impactFive = (startYear > 5)  if  0 else mag*Math.pow(Math.E,-1*(4-base)*(4-base)/(2*rate*rate))
    row.impactSix = (startYear > 6)  if  0 else mag*Math.pow(Math.E,-1*(5-base)*(5-base)/(2*rate*rate))
    row.impactSeven = (startYear > 7)  if  0 else mag*Math.pow(Math.E,-1*(6-base)*(6-base)/(2*rate*rate))
    row.impactEight = (startYear > 8)  if  0 else mag*Math.pow(Math.E,-1*(7-base)*(7-base)/(2*rate*rate))
    row.impactNine = (startYear > 9)  if  0 else mag*Math.pow(Math.E,-1*(8-base)*(8-base)/(2*rate*rate))
    row.impactTen = (startYear > 10)  if  0 else mag*Math.pow(Math.E,-1*(9-base)*(9-base)/(2*rate*rate))

if fctn == 14):
    # amortization  takes the following iables and returns else schedPrinc, IntExp, changeCE, changeNonCE, changeCL, Change NonCL
	# mag is loan amount, rate is interest rate, base is term in years
	# rate is the rate of interest to be paid on the loan (adjustable and baloons not supported)
	# base is the term of the loan
	# startYear = startYear
	# impactVarOne = -1 to make payment in year1, not -1 to make payment in next year as typically done
	 account = row.impactAreaId, actSub = row.impactAreaSub, aclrtPymt = (row.impactVarOne==-1),
	    pymnt = mag*rate*(1+(1/(-1+(Math.pow((1+rate),base)))))
    # if row.impactAreaSub ==9 then it is a initial baseline 
	# and impactZero as well as impactOne get set with the mag.  
	# Zero does not accumulate in the accumualtor in the webapp.
	row.impactZero = (actSub ==8 or actSub ==9)  if  myAmort(mag, rate, base, account, pymnt, startYear,1,aclrtPymt,actSub)  else  0
    row.impactOne = myAmort(mag, rate, base, account, pymnt, startYear,1,aclrtPymt,actSub)
    row.impactTwo = myAmort(mag, rate, base, account, pymnt, startYear,2,aclrtPymt,actSub)
    row.impactThree = myAmort(mag, rate, base, account, pymnt, startYear,3,aclrtPymt,actSub)
    row.impactFour = myAmort(mag, rate, base, account, pymnt, startYear,4,aclrtPymt,actSub)
    row.impactFive = myAmort(mag, rate, base, account, pymnt, startYear,5,aclrtPymt,actSub)
    row.impactSix = myAmort(mag, rate, base, account, pymnt, startYear,6,aclrtPymt,actSub)
    row.impactSeven = myAmort(mag, rate, base, account, pymnt, startYear,7,aclrtPymt,actSub)
    row.impactEight = myAmort(mag, rate, base, account, pymnt, startYear,8,aclrtPymt,actSub)
    row.impactNine = myAmort(mag, rate, base, account, pymnt, startYear,9,aclrtPymt,actSub)
    row.impactTen = myAmort(mag, rate, base, account, pymnt, startYear,10,aclrtPymt,actSub)

if fctn == 15):
	#growth (magnitude plus chnage)
    row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else mag*mySimplePower((1+rate),(1-startYear))
	row.impactTwo = (startYear > 2)  if  0 else mag*mySimplePower((1+rate),(2-startYear))
	row.impactThree = (startYear > 3)  if  0 else mag*mySimplePower((1+rate),(3-startYear))
	row.impactFour = (startYear > 4)  if  0 else mag*mySimplePower((1+rate),(4-startYear))
	row.impactFive = (startYear > 5)  if  0 else mag*mySimplePower((1+rate),(5-startYear))
	row.impactSix = (startYear > 6)  if  0 else mag*mySimplePower((1+rate),(6-startYear))
	row.impactSeven = (startYear > 7)  if  0 else mag*mySimplePower((1+rate),(7-startYear))
	row.impactEight = (startYear > 8)  if  0 else mag*mySimplePower((1+rate),(8-startYear))
	row.impactNine = (startYear > 9)  if  0 else mag*mySimplePower((1+rate),(9-startYear))
	row.impactTen = (startYear > 10)  if  0 else mag*mySimplePower((1+rate),(10-startYear))

if fctn == 16):
	#decay (magnitude plus chnage)
    row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else mag*mySimplePower((1-rate),((1-base<=0) if 0 else 1-startYear-base))
	row.impactTwo = (startYear > 2)  if  0 else mag*mySimplePower((1-rate),((2-base<=0) if 0 else 2-startYear-base))
	row.impactThree = (startYear > 3)  if  0 else mag*mySimplePower((1-rate),((3-base<=0) if 0 else 3-startYear-base))
	row.impactFour = (startYear > 4)  if  0 else mag*mySimplePower((1-rate),((4-base<=0) if 0 else 4-startYear-base))
	row.impactFive = (startYear > 5)  if  0 else mag*mySimplePower((1-rate),((5-base<=0) if 0 else 5-startYear-base))
	row.impactSix = (startYear > 6)  if  0 else mag*mySimplePower((1-rate),((6-base<=0) if 0 else 6-startYear-base))
	row.impactSeven = (startYear > 7)  if  0 else mag*mySimplePower((1-rate),((7-base<=0) if 0 else 7-startYear-base))
	row.impactEight = (startYear > 8)  if  0 else mag*mySimplePower((1-rate),((8-base<=0) if 0 else 8-startYear-base))
	row.impactNine = (startYear > 9)  if  0 else mag*mySimplePower((1-rate),((9-base<=0) if 0 else 9-startYear-base))
	row.impactTen = (startYear > 10)  if  0 else mag*mySimplePower((1-rate),((10-base<=0) if 0 else 10-startYear-base))

if fctn == 17):
    # appreciation or depreciation
    # mag = starting market value
    # rate = depr (-.03) or appr (+.045) rate
    # base = salvage value
    # startYear = startYear
     one = mag*Math.pow((1+rate),1-startYear), 
    two = mag*Math.pow((1+rate),2-startYear),
    three = mag*Math.pow((1+rate),3-startYear), 
    four = mag*Math.pow((1+rate),4-startYear),
    five = mag*Math.pow((1+rate),5-startYear), 
    six = mag*Math.pow((1+rate),6-startYear),
    seven = mag*Math.pow((1+rate),7-startYear), 
    eight = mag*Math.pow((1+rate),8-startYear),
    nine = mag*Math.pow((1+rate),9-startYear), 
    ten = mag*Math.pow((1+rate),10-startYear),
    iOne = (one<base) if base else one,
    iTwo = (two<base) if base else two,
    iThree =(three<base) if base else three,
    iFour = (four<base) if base else four,
    iFive = (five<base) if base else five,
    iSix = (six<base) if base else six,
    iSeven =(seven<base) if base else seven,
    iEight =(eight<base) if base else eight,
    iNine = (nine<base) if base else nine,
    iTen = (ten<base) if base else ten,
    impactOne = (1<startYear) if 0 else iOne,
    impactTwo = (2<startYear) if 0 else iTwo,
    impactThree =(3<startYear) if 0 else iThree,
    impactFour = (4<startYear) if 0 else iFour,
    impactFive = (5<startYear) if 0 else iFive,
    impactSix = (6<startYear) if 0 else iSix,
    impactSeven = (7<startYear) if 0 else iSeven,
    impactEight = (8<startYear) if 0 else iEight,
    impactNine = (9<startYear) if 0 else iNine,
    impactTen = (10<startYear) if 0 else iTen
    row.impactZero = 0
    row.impactOne = (1==startYear) if impactOne-mag else impactOne
    row.impactTwo = (2==startYear) if impactTwo-impactOne-mag else impactTwo-impactOne
    row.impactThree = (3==startYear) if impactThree-impactTwo-mag else impactThree-impactTwo
    row.impactFour = (4==startYear) if impactFour-impactThree-mag else impactFour-impactThree
    row.impactFive = (5==startYear) if impactFive-impactFour-mag else impactFive-impactFour
    row.impactSix = (6==startYear) if impactSix-impactFive-mag else impactSix-impactFive
    row.impactSeven = (7==startYear) if impactSeven-impactSix-mag else impactSeven-impactSix
    row.impactEight = (8==startYear) if impactEight-impactSeven-mag else impactEight-impactSeven
    row.impactNine = (9==startYear) if impactNine-impactEight-mag else impactNine-impactEight
    row.impactTen = (10==startYear) if impactTen-impactNine-mag else impactTen-impactNine

if fctn == 18):
	row.impactZero = 0
	row.impactOne = (startYear > 1)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactTwo = (startYear > 2)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactThree = (startYear > 3)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactFour = (startYear > 4)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactFive = (startYear > 5)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactSix = (startYear > 6)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactSeven = (startYear > 7)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactEight = (startYear > 8)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactNine = (startYear > 9)  if  0 else 2*mag*(Math.random()-0.5)
	row.impactTen = (startYear > 10)  if  0 else 2*mag*(Math.random()-0.5)

def mySimplePower(b,expo):
	return Math.pow(b,expo)

# def myExponential(mag, base, g,r,h,v,t,f):
# 	 impact = mag * (v + g * Math.pow(r,t+h)),
# 	i = (impact<0)  if  0 else impact-mag
#     # nested ternary.  Note t+1 since starts at zero
# 	return (f == 15)  if  ((t+1>base) if 0 else impact) else i
# 
def myLinear(m,x,b):
    return m*x+b

def myCycle(a,b,c,x):
    return a*Math.sin(((2*Math.PI)/b)*(x+c))

def myAmort(p, i, n, acct, pymnt, startYear, yr, aclrtPymt):
    	#this gets called a lot.  80 times for actorTemplateId=2
	#10 times each for the 8 rows that are def 14 rows in that template 
	#mag, rate, base, account, pymnt, startYear,yr,aclrtPymt,actSub
	#(p, i, n, acct, pymnt, startYear, yr, aclrtPymt,actSub)
	# if startYear is 3 and aclrtPymt is FALSE, then yr=4 is paymentYear 1
	# if startYear is 3 and aclrtPymt is TRUE, then yr=3 is paymentYear 1
	 paymentYear = (aclrtPymt) if yr-startYear+1 else yr-startYear
    if yr == startYear and (actSub == 8 or actSub == 9)):
		# note 8 and 9 are reserved for working with first year
		 princPortionFirst = pymnt-(p*i) 
		return (acct == 1) if  -princPortionFirst else (acct == 2 or acct == 3) if  princPortionFirst else (acct == 4) if  p-princPortionFirst else 0
	elif  (yr >= startYear and actSub !== 8 and actSub !== 9 and paymentYear >0):
        # here we are active with payments.         
			remainingPrinc = myRemainingPrinc(p, i, pymnt, paymentYear, n),
			remainingPrincNext = myRemainingPrinc(p, i, pymnt, paymentYear+1, n),
            netIntr = remainingPrinc*i,
			netIntrNext = remainingPrincNext*i,  
			ppmt = (netIntr >0) if pymnt - netIntr else 0,
			ppmtNext = (netIntrNext >0) if pymnt - netIntrNext else 0
			
        # with all functions, we want to return the change for the year impacting that account, 
		# even for balance sheet accounts (1,2,3,4) -- just the change as they accumulate elsewhere
		if acct == 1 or acct==4):
			return -ppmtNext
		elif  (acct == 2):
			return ppmtNext  			
		elif acct == 3):
			if actSub == 1):
				return -ppmt 
			else:
				return ppmtNext 
			
        elif acct == 11):
            return netIntr  # this is the current year interest pymnt
		elif acct == 12):
			return ppmt  # this is the current year princ pymnt
        else:
            return 0
        
    else:
        return 0
    

def myRemainingPrinc(p, i, pymnt, pYr, n):
    # this returns the principal remaining after pYr payments
     x = 0,  pr=p
	if pYr <= n):
		# x, pr=p
		for (x = 1 x < pYr x++):
		    # this is what I will owe in total after I add my interest 
		    # for the year and then make my payment.  This will give me
		    # the remaining principal balance after so many years
			pr = pr* (1+i) -pymnt
		
		return pr
	else:
		return 0
	

def myS(f,z,a):
	if z <= -8.0):
        return (f==11) if 0 else 1
     elif z >=  8.0):
        return (f==11) if 1 else 0
    else:
         sum =0,term = z, pdf = Math.exp(-z*z / 2) / Math.sqrt(2 * Math.PI),i=3
        while ((sum + term) != sum):
            sum  = sum + term
            term = (term * z * z / i)
            i =i + 2
        
        return (f==11) if a*(0.5 + sum * pdf) else  a*(1-(0.5 + sum * pdf))        
    


'''
     RuleType: event
     Title: calculate Year Impacts
     Name: event_32
     Entity: Impact
     Comments: None
'''
Rule.row_event(on_class=models.Impact,
         calling=fn_event_32)

'''
     RuleType: parentCopy
     Title: dataYear = parentcopy(actor.baseDataYear)
     Name: parentCopy_dataYear
     Entity: Impact
     Comments: None
'''
Rule.copy(derive=models.Impact.baseDataYear,
         from_parent=models.Actor.baseDataYear)

def fn_validation_31(row: models.Impact, old_row: models.Impact, logic_row: LogicRow):
     return (row.impactStartsYear>row.baseDataYear)

'''
     RuleType: validation
     Title: Impact after source year
     Name: validation_31
     Entity: Impact
     Comments: None
'''
Rule.constraint(validate=models.Impact,
         calling=fn_validation_31,
         error_msg="Your impact cannot start in the base year or before.  Choose a later year")

def fn_validation_30(row: models.Impact, old_row: models.Impact, logic_row: LogicRow):
     return (row.baseDataYear>2000 and row.baseDataYear<2100)

'''
     RuleType: validation
     Title: Four Digit Year
     Name: validation_30
     Entity: Impact
     Comments: None
'''
Rule.constraint(validate=models.Impact,
         calling=fn_validation_30,
         error_msg="Select a year between 2000 and 2100.  Enter four digits.")

# ENTITY: RecastSetMembership

def fn_event_48(row: models.RecastSetMembership, old_row: models.RecastSetMembership, logic_row: LogicRow):
     #AppliesTo: {'insert': True, 'update': False, 'delete': False}
     row.analysisYear = row.scenarioYear.analysisYear

'''
     RuleType: event
     Title: Add Year to membership members
     Name: event_48
     Entity: RecastSetMembership
     Comments: None
'''
Rule.row_event(on_class=models.RecastSetMembership,
         calling=fn_event_48)

# ENTITY: Motivation

'''
     RuleType: count
     Title: motivationCount = count(motivatedActor_List)
     Name: count_motivationCount
     Entity: Motivation
     Comments: None
'''
Rule.count(derive=models.Motivation.motivationCount,
         as_count_of=models.MotivatedActorList)


=========================
       functions 
=========================

=========================
       data_sources 
=========================
------------------------------------------------------------
Database: MYSQL 
  URL:jdbc:mysql://209.135.132.111:3306 
  User: user Schema: None
------------------------------------------------------------

create table accountUpload (
   id int unsigned  AUTO_INCREMENT
   ,uid bigint unsigned  
   ,uniqueAccountNumber int unsigned  
   ,accountName varchar(128) character set latin1 collation latin1_swedish_ci  
   ,balance decimal(16,2)  
   ,creditBalance decimal(16,2)  
   ,debitBalance decimal(16,2)  
   ,areaClarifier varchar(64) character set latin1 collation latin1_swedish_ci  
   ,subAreaClarifier varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountLevel int  
   ,detail varchar(256) character set latin1 collation latin1_swedish_ci  
   ,processed tinyint(1)  
   ,mappable tinyint(1)  
   ,signChangePotential tinyint(1)  
   ,signChanged tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table actionPlanScenario (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,baseDataYear int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,entryPerson varchar(64) character set latin1 collation latin1_swedish_ci  
   ,loggedInPerson varchar(64) character set latin1 collation latin1_swedish_ci  
   ,yearClient int  
   ,reportYear int  
   ,companyDisplayName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,clientPersonDisplayName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,letterGrade varchar(5) character set latin1 collation latin1_swedish_ci  
   ,gradeCumulativePoints decimal(10,6)  
   ,entryPersonId int  
   ,clientPersonId int  
   ,description text character set latin1 collation latin1_swedish_ci  
   ,analysisWriteUp text character set latin1 collation latin1_swedish_ci  
   ,selectedActorIds varchar(256) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table actionPlanScenarioDetail (
   id int unsigned  AUTO_INCREMENT
   ,reportElementId int  
   ,actionPlanSecenarioId int unsigned  
   ,clientId int unsigned  
   ,baseDataYear int unsigned  
   ,accountName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountFormat varchar(64) character set latin1 collation latin1_swedish_ci  
   ,year0 decimal(20,6)  
   ,year1 decimal(20,6)  
   ,year2 decimal(20,6)  
   ,year3 decimal(20,6)  
   ,year4 decimal(20,6)  
   ,year5 decimal(20,6)  
   ,year6 decimal(20,6)  
   ,year7 decimal(20,6)  
   ,year8 decimal(20,6)  
   ,year9 decimal(20,6)  
   ,year10 decimal(20,6)  
   ,reportYear int unsigned  
   ,yearClient int unsigned  
   ,average decimal(20,6)  
   ,slope decimal(20,6)  
   ,grade decimal(10,6)  
   ,letterGrade varchar(5) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table actor (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,sourceDataId int unsigned  
   ,actorTemplateId int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,actorCount int unsigned  
   ,priority int  
   ,actorGroup int  
   ,baseDataYear int unsigned  
   ,championId int unsigned  
   ,description text character set latin1 collation latin1_swedish_ci  
   ,selectedA tinyint(1)  
   ,selectedB tinyint(1)  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table actorTemplate (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,actorTemplateClassId int unsigned  
   ,fieldsOnActorForm int  
   ,description text character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table actorTemplateClass (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,description varchar(512) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table alteration (
   id int unsigned  AUTO_INCREMENT
   ,scenarioYearId int unsigned  
   ,clientId int unsigned  
   ,alterationType varchar(64) character set latin1 collation latin1_swedish_ci  
   ,sourceLeafFirstLvlId int unsigned  
   ,sourceLeafSecLvlId int unsigned  
   ,destLeafFirstLvlId int unsigned  
   ,destLeafSecLvlId int unsigned  
   ,sourceChange decimal(16,2)  
   ,destinationChange decimal(16,2)  
   ,designation varchar(256) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,sourceComment varchar(256) character set latin1 collation latin1_swedish_ci  
   ,overrideSourceComment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,destComment varchar(256) character set latin1 collation latin1_swedish_ci  
   ,overrideDestComment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table analysisTarget (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table analysisTemplate (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,analysisYear int unsigned  
   ,instructions text character set latin1 collation latin1_swedish_ci  
   ,structuredTemplate text character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table assembledAlteration (
   id int unsigned  AUTO_INCREMENT
   ,recastSetId int unsigned  
   ,clientId int unsigned  
   ,alterationType varchar(64) character set latin1 collation latin1_swedish_ci  
   ,sourceLeafFirstLvlId int unsigned  
   ,sourceLeafSecLvlId int unsigned  
   ,destLeafFirstLvlId int unsigned  
   ,destLeafSecLvlId int unsigned  
   ,sourceChange decimal(16,2)  
   ,destinationChange decimal(16,2)  
   ,designation varchar(256) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,sourceComment varchar(256) character set latin1 collation latin1_swedish_ci  
   ,overrideSourceComment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,destComment varchar(256) character set latin1 collation latin1_swedish_ci  
   ,overrideDestComment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table assembledArea (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,recastSetId int unsigned  
   ,areaOrder int unsigned  
   ,areaCode int  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,locked tinyint(1)  
   ,balance int  
   ,balFirst decimal(16,2)  
   ,balSecond decimal(16,2)  
   ,combinedBalance decimal(16,2)  
   ,combinedBalFirst decimal(16,2)  
   ,combinedBalSecond decimal(16,2)  
   ,eliminationBalance decimal(16,2)  
   ,elimBalFirst decimal(16,2)  
   ,elimBalSecond decimal(16,2)  
   ,alteredBalance decimal(16,2)  
   ,altBalFirst decimal(16,2)  
   ,altBalSecond decimal(16,2)  
   ,comment varchar(64) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table assembledFirstLevel (
   id int unsigned  AUTO_INCREMENT
   ,accountFirstOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountFirstUniqueNum int unsigned  
   ,accountFirstCode int unsigned  
   ,clientId int unsigned  
   ,recastSetId int unsigned  
   ,assembledSubAreaId int unsigned  
   ,leaf tinyint(1)  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,locked tinyint(1)  
   ,balanceChildren decimal(16,2)  
   ,combinedBalChildren decimal(16,2)  
   ,eliminateBalChildren decimal(16,2)  
   ,alteredBalChildren decimal(16,2)  
   ,balance decimal(16,2)  
   ,balanceList decimal(16,2)  
   ,combinedBalance decimal(16,2)  
   ,eliminationBalance decimal(16,2)  
   ,alteredBalance decimal(16,2)  
   ,combinedBalanceList decimal(16,2)  
   ,eliminationBalanceList decimal(16,2)  
   ,inactive tinyint(1)  
   ,comment varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table assembledSecondLevel (
   id int unsigned  AUTO_INCREMENT
   ,accountSecondOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountSecondUniqueNum int unsigned  
   ,accountSecondCode int unsigned  
   ,clientId int unsigned  
   ,recastSetId int unsigned  
   ,assembledFirstId int unsigned  
   ,leaf tinyint(1)  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,locked tinyint(1)  
   ,balance decimal(16,2)  
   ,combinedBalance decimal(16,2)  
   ,eliminationBalance decimal(16,2)  
   ,alteredBalance decimal(16,2)  
   ,inactive tinyint(1)  
   ,comment varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table assembledSubArea (
   id int unsigned  AUTO_INCREMENT
   ,subAreaOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,subAreaCode int unsigned  
   ,clientId int unsigned  
   ,recastSetId int unsigned  
   ,assembledAreaId int unsigned  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,locked tinyint(1)  
   ,balance int  
   ,balFirst decimal(16,2)  
   ,balSecond decimal(16,2)  
   ,combinedBalance decimal(16,2)  
   ,combinedBalFirst decimal(16,2)  
   ,combinedBalSecond decimal(16,2)  
   ,eliminationBalance decimal(16,2)  
   ,elimBalFirst decimal(16,2)  
   ,elimBalSecond decimal(16,2)  
   ,alteredBalance decimal(16,2)  
   ,altBalFirst decimal(16,2)  
   ,altBalSecond decimal(16,2)  
   ,comment varchar(64) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table client (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,alias varchar(64) character set latin1 collation latin1_swedish_ci  
   ,oldAgIQNumber int unsigned  
   ,description varchar(64) character set latin1 collation latin1_swedish_ci  
   ,mainContactId int unsigned  
   ,altContactId int unsigned  
   ,startDate date  
   ,endDate date  
   ,isMainHpaEntity tinyint(1)  
   ,comment text character set latin1 collation latin1_swedish_ci  
   ,lat decimal(16,10)  
   ,lon decimal(16,10)  
   ,latlonaccur decimal(16,10)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('alias')


# PRIMARY KEY('name')


# PRIMARY KEY('id')


create table clientReportDetail (
   id int unsigned  AUTO_INCREMENT
   ,yearClient int unsigned  
   ,reportName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,entryPersonDisplayName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,clientPersonDisplayName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,companyDisplayName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,reportYear int unsigned  
   ,clientId int unsigned  
   ,entryPersonId int unsigned  
   ,clientPersonId int unsigned  
   ,teamCoachId int unsigned  
   ,isBenchmarkable tinyint(1)  
   ,reportLevel int unsigned  
   ,classification varchar(256) character set latin1 collation latin1_swedish_ci  
   ,clientDataGathered date  
   ,dataAdjustmentsProcessed date  
   ,dataEnteredInAnalyzer date  
   ,draftWritten date  
   ,grammarReviewed date  
   ,deliveryApproved date  
   ,sentToClient date  
   ,deliveredToClient date  
   ,clientReportClosed date  
   ,isFfTeam tinyint(1)  
   ,hasSignificantNonCrop tinyint(1)  
   ,isFullIn tinyint(1)  
   ,isAsiClient tinyint(1)  
   ,isFfgInvestor tinyint(1)  
   ,ffgInvestedDate date  
   ,priorHPAExists tinyint(1)  
   ,acreageCropable decimal(10,2)  
   ,gmClass int unsigned  
   ,ffStartYear int unsigned  
   ,ffNetBillableAcre decimal(10,2)  
   ,accountingBasis varchar(64) character set latin1 collation latin1_swedish_ci  
   ,typeConsolidation varchar(64) character set latin1 collation latin1_swedish_ci  
   ,gradeCumulativePoints decimal(10,6)  
   ,letterGrade varchar(5) character set latin1 collation latin1_swedish_ci  
   ,comment varchar(256) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


# PRIMARY KEY('yearClient')


create table eliminationFirstLevel (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,recastSetId int unsigned  
   ,mappedFirstId int unsigned  
   ,assembledFirstId int unsigned  
   ,amount decimal(16,2)  
   ,locked tinyint(1)  
   ,designation varchar(256) character set latin1 collation latin1_swedish_ci  
   ,comment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,wasEliminationTarget tinyint(1)  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table eliminationSecondLevel (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,recastSetId int unsigned  
   ,mappedSecondId int unsigned  
   ,assembledSecondId int unsigned  
   ,amount decimal(16,2)  
   ,locked tinyint(1)  
   ,designation varchar(256) character set latin1 collation latin1_swedish_ci  
   ,comment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,wasEliminationTarget tinyint(1)  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table entity (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,entityNumber int unsigned  
   ,ceuuid varchar(64) character set latin1 collation latin1_swedish_ci  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,firstYear int  
   ,lastYear int  
   ,fiscalYearEnd date  
   ,cashAccrual varchar(64) character set latin1 collation latin1_swedish_ci  
   ,costMarket varchar(64) character set latin1 collation latin1_swedish_ci  
   ,isManagerialEntity tinyint(1)  
   ,stdSourceSystemId int unsigned  
   ,inactive tinyint(1)  
   ,comment text character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('ceuuid')


# PRIMARY KEY('id')


# PRIMARY KEY('clientId', 'entityNumber')


create table help (
   id int unsigned  AUTO_INCREMENT
   ,locationCode varchar(64) character set latin1 collation latin1_swedish_ci  
   ,helpTitle varchar(64) character set latin1 collation latin1_swedish_ci  
   ,mediaFolder varchar(64) character set latin1 collation latin1_swedish_ci  
   ,mediaCode varchar(64) character set latin1 collation latin1_swedish_ci  
   ,introText varchar(256) character set latin1 collation latin1_swedish_ci  
   ,bodyHtmlText text character set latin1 collation latin1_swedish_ci  
   ,screencastNames varchar(256) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('locationCode')


# PRIMARY KEY('id')


create table hpa_analysis_factor (
   hpa_analysis_factor_id bigint unsigned  AUTO_INCREMENT
   ,description_short varchar(20) character set latin1 collation latin1_swedish_ci  
   ,hpa_chart_table_control_id int  
   ,description_long text character set latin1 collation latin1_swedish_ci  
)

# PRIMARY KEY('hpa_analysis_factor_id')


# PRIMARY KEY('hpa_analysis_factor_id')


create table hpa_chart_table_control (
   id bigint unsigned  AUTO_INCREMENT
   ,report_element_id int  
   ,itemSequenceId int unsigned  
   ,display_on_table tinyint(1)  
   ,display_in_detailed_analysis tinyint(1)  
   ,presentation_id int  
   ,section_id int  
   ,presentation_order int  
   ,positive_slope_is varchar(16) character set latin1 collation latin1_swedish_ci  
   ,num_format varchar(16) character set latin1 collation latin1_swedish_ci  
   ,mincolor varchar(50) character set latin1 collation latin1_swedish_ci  
   ,mina float  
   ,avga float  
   ,max float  
   ,element_name varchar(80) character set latin1 collation latin1_swedish_ci  
   ,alt_prsn_sign int  
   ,alt_prsn_wording varchar(50) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


# PRIMARY KEY('id')


create table hpa_verbiage_applied (
   verbiage_applied_id bigint unsigned  AUTO_INCREMENT
   ,verbiage_default_id int unsigned  
   ,benchmark_id int unsigned  
   ,user_name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,reportYear int unsigned  
   ,yearClient int unsigned  
   ,clientId int unsigned  
   ,report_employed int  
   ,hpa_report_section varchar(25) character set latin1 collation latin1_swedish_ci  
   ,hpa_report_section_order int  
   ,is_html_format tinyint(1)  
   ,remark_icon_id int  
   ,remark_threshold_low decimal(21,9)  
   ,remark_threshold_high decimal(21,9)  
   ,remark text character set latin1 collation latin1_swedish_ci  
   ,hpa_report_subsection varchar(50) character set latin1 collation latin1_swedish_ci  
   ,keep_remark tinyint(1)  
   ,exclude_template_remark tinyint(1)  
   ,report_element_id int  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('verbiage_applied_id')


# PRIMARY KEY('verbiage_applied_id')


create table hpa_verbiage_default (
   verbiage_default_id int unsigned  
   ,remark_name varchar(25) character set latin1 collation latin1_swedish_ci  
   ,is_inactive_status tinyint(1)  
   ,remark_version int  
   ,remark_class varchar(25) character set latin1 collation latin1_swedish_ci  
   ,hpa_report_section varchar(25) character set latin1 collation latin1_swedish_ci  
   ,is_html_format tinyint(1)  
   ,remark_icon_id int  
   ,remark_threshold_low decimal(21,9)  
   ,remark_threshold_high decimal(21,9)  
   ,remark text character set latin1 collation latin1_swedish_ci  
   ,hpa_report_subsection varchar(50) character set latin1 collation latin1_swedish_ci  
   ,hpa_report_section_order int  
   ,comment_assessment int  
   ,hpa_analysis_factor_id int  
   ,report_element_id int  
   ,hpa_report_subsection_id int  
   ,stmt_997_oper int  
   ,stmt_997_cap int  
   ,stmt_997_liq int  
   ,stmt_997_solv int  
   ,stmt_997_perf int  
   ,stmt_997_gen int  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('verbiage_default_id')


# PRIMARY KEY('verbiage_default_id')


create table impact (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,impactAreaId int unsigned  
   ,impactAreaSub int unsigned  
   ,actorId int unsigned  
   ,actorTemplateId int unsigned  
   ,sourceDataId int unsigned  
   ,baseDataYear int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,description text character set latin1 collation latin1_swedish_ci  
   ,impactFunctionId int unsigned  
   ,impactStartsYear int unsigned  
   ,impactRate decimal(16,10)  
   ,impactMagnitude decimal(16,2)  
   ,impactBase decimal(16,6)  
   ,impactVarOne decimal(16,6)  
   ,impactVarTwo decimal(16,6)  
   ,impactVarThree decimal(16,6)  
   ,impactVarFour decimal(16,6)  
   ,impactVarFive decimal(16,6)  
   ,impactVarSix decimal(16,6)  
   ,impactVarSeven decimal(16,6)  
   ,impactVarEight decimal(16,6)  
   ,impactZero decimal(16,2)  
   ,impactOne decimal(16,2)  
   ,impactTwo decimal(16,2)  
   ,impactThree decimal(16,2)  
   ,impactFour decimal(16,2)  
   ,impactFive decimal(16,2)  
   ,impactSix decimal(16,2)  
   ,impactSeven decimal(16,2)  
   ,impactEight decimal(16,2)  
   ,impactNine decimal(16,2)  
   ,impactTen decimal(16,2)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


# PRIMARY KEY('sourceDataId', 'actorId', 'impactAreaId', 'impactAreaSub')


create table impactArea (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactAccountArea varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactAccountStmt varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactAreaClass varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactAreaClassId int unsigned  
   ,description varchar(512) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table impactAreaClass (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,description varchar(512) character set latin1 collation latin1_swedish_ci  
   ,accountArea varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountStmt varchar(64) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table impactFunction (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,description text character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table impactTemplate (
   id int unsigned  AUTO_INCREMENT
   ,actorTemplateId int unsigned  
   ,impactAreaId int unsigned  
   ,impactAreaSub int unsigned  
   ,actorTemplateClassId int unsigned  
   ,impactFunctionId int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactMagDirections varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactBaseDirections varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactRateDirections varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactStartsYear int unsigned  
   ,impactVar1Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactVar2Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactVar3Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactVar4Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactVar5Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactVar6Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactVar7Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactVar8Directions varchar(64) character set latin1 collation latin1_swedish_ci  
   ,impactRate decimal(16,10)  
   ,impactMagnitude decimal(16,2)  
   ,impactBase decimal(16,10)  
   ,impactVarOne decimal(16,6)  
   ,impactVarTwo decimal(16,6)  
   ,impactVarThree decimal(16,6)  
   ,impactVarFour decimal(16,6)  
   ,impactVarFive decimal(16,6)  
   ,impactVarSix decimal(16,6)  
   ,impactVarSeven decimal(16,6)  
   ,impactVarEight decimal(16,6)  
   ,impactOne decimal(16,2)  
   ,impactTwo decimal(16,2)  
   ,impactThree decimal(16,2)  
   ,impactFour decimal(16,2)  
   ,impactFive decimal(16,2)  
   ,impactSix decimal(16,2)  
   ,impactSeven decimal(16,2)  
   ,impactEight decimal(16,2)  
   ,impactNine decimal(16,2)  
   ,impactTen decimal(16,2)  
   ,description varchar(512) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


# PRIMARY KEY('actorTemplateId', 'impactAreaId', 'impactAreaSub')


create table leafJctnFirstLevel (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,mappedFirstId int unsigned  
   ,assembledFirstId int unsigned  
   ,balance decimal(16,2)  
   ,locked tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table leafJctnSecondLevel (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,mappedSecondId int unsigned  
   ,assembledSecondId int unsigned  
   ,balance decimal(16,2)  
   ,locked tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table mappedArea (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,entityId int unsigned  
   ,scenarioYearId int unsigned  
   ,areaCode int  
   ,areaOrder int unsigned  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,balance decimal(16,2)  
   ,mappedBalance decimal(16,2)  
   ,accrualBalance decimal(16,2)  
   ,comment varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table mappedFirstLevel (
   id int unsigned  AUTO_INCREMENT
   ,accountFirstOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountFirstUniqueNum int unsigned  
   ,accountFirstCode int unsigned  
   ,clientId int unsigned  
   ,entityId int unsigned  
   ,scenarioYearId int unsigned  
   ,mappedSubAreaId int unsigned  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,leaf tinyint(1)  
   ,isAccrualAdjustable tinyint(1)  
   ,targetForAccrualAdj int unsigned  
   ,balance decimal(16,2)  
   ,creditBalance decimal(16,2)  
   ,debitBalance decimal(16,2)  
   ,mappedBalance decimal(16,2)  
   ,accrualBalance decimal(16,2)  
   ,balanceChildren decimal(16,2)  
   ,mappedBalChildren decimal(16,2)  
   ,accrualBalChildren decimal(16,2)  
   ,inactive tinyint(1)  
   ,comment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table mappedSecondLevel (
   id int unsigned  AUTO_INCREMENT
   ,accountSecondOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountSecondUniqueNum int unsigned  
   ,accountSecondCode int unsigned  
   ,clientId int unsigned  
   ,entityId int unsigned  
   ,scenarioYearId int unsigned  
   ,mappedFirstId int unsigned  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,leaf tinyint(1)  
   ,isAccrualAdjustable tinyint(1)  
   ,targetForAccrualAdj int unsigned  
   ,balance decimal(16,2)  
   ,creditBalance decimal(16,2)  
   ,debitBalance decimal(16,2)  
   ,mappedBalance decimal(16,2)  
   ,accrualBalance decimal(16,2)  
   ,inactive tinyint(1)  
   ,comment varchar(1028) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table mappedSubArea (
   id int unsigned  AUTO_INCREMENT
   ,subAreaOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,subAreaCode int unsigned  
   ,targetId int unsigned  
   ,targetIdStructured int unsigned  
   ,clientId int unsigned  
   ,entityId int unsigned  
   ,scenarioYearId int unsigned  
   ,mappedAreaId int unsigned  
   ,inactive tinyint(1)  
   ,balance decimal(16,2)  
   ,mappedBalance decimal(16,2)  
   ,accrualBalance decimal(16,2)  
   ,comment varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table mapping (
   id int unsigned  AUTO_INCREMENT
   ,scenarioYearId int unsigned  
   ,accountUploadId int unsigned  
   ,accountUpUniqueNum int unsigned  
   ,targetFirstLevelId int unsigned  
   ,targetSecondLevelId int unsigned  
   ,designation varchar(256) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table mappingGlobal (
   id int unsigned  AUTO_INCREMENT
   ,sampleYearId int unsigned  
   ,accountUpUniqueNum int unsigned  
   ,targetFirstLevelId int unsigned  
   ,targetSecondLevelId int unsigned  
   ,designation varchar(256) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table motivatedActor (
   id int unsigned  AUTO_INCREMENT
   ,motivationId int unsigned  
   ,actorId int unsigned  
   ,sourceDataId int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('sourceDataId', 'motivationId', 'actorId')


# PRIMARY KEY('id')


create table motivation (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,motivationClassId int unsigned  
   ,sourceDataId int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,motivationCount int unsigned  
   ,priority int  
   ,neededWithinYears int  
   ,description text character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table motivationClass (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,description varchar(512) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table person (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,firstName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,lastName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,middleName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,nickName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,dateOfBirth date  
   ,dateOfPassing date  
   ,address1 varchar(64) character set latin1 collation latin1_swedish_ci  
   ,address2 varchar(64) character set latin1 collation latin1_swedish_ci  
   ,city varchar(2) character set latin1 collation latin1_swedish_ci  
   ,stateCode varchar(2) character set latin1 collation latin1_swedish_ci  
   ,zip int  
   ,phoneLand varchar(64) character set latin1 collation latin1_swedish_ci  
   ,fax varchar(64) character set latin1 collation latin1_swedish_ci  
   ,phoneMobile varchar(64) character set latin1 collation latin1_swedish_ci  
   ,phoneMobileAlt varchar(64) character set latin1 collation latin1_swedish_ci  
   ,email varchar(64) character set latin1 collation latin1_swedish_ci  
   ,thumbnail blob  
   ,imagePath text character set latin1 collation latin1_swedish_ci  
   ,comment text character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table recastSet (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,clientId int unsigned  
   ,recastSetTypeName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,scenarioMemberCount int unsigned  
   ,assembledMemberCount int unsigned  
   ,targetId int unsigned  
   ,recastSetSeq int unsigned  
   ,recastSetCode bigint unsigned  
   ,locked tinyint(1)  
   ,analysisYear int unsigned  
   ,hasTarget tinyint(1)  
   ,eliminationBalance decimal(16,2)  
   ,elimBalAE decimal(16,2)  
   ,elimBalLQR decimal(16,2)  
   ,comment varchar(256) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


# PRIMARY KEY('recastSetCode')


create table recastSetMembership (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,clientId int unsigned  
   ,recastSetId int unsigned  
   ,scenarioYearId int unsigned  
   ,analysisYear int unsigned  
   ,targetId int unsigned  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('recastSetId', 'scenarioYearId')


# PRIMARY KEY('id')


create table recastSetType (
   name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,description varchar(512) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('name')


create table report (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,caption varchar(64) character set latin1 collation latin1_swedish_ci  
   ,reportMetaData varchar(256) character set latin1 collation latin1_swedish_ci  
   ,executableNamePath varchar(64) character set latin1 collation latin1_swedish_ci  
   ,executableName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,executableFileType varchar(64) character set latin1 collation latin1_swedish_ci  
   ,isClientUserSafe tinyint(1)  
   ,hideParameterPage tinyint(1)  
   ,outputFormat varchar(64) character set latin1 collation latin1_swedish_ci  
   ,imageSource varchar(128) character set latin1 collation latin1_swedish_ci  
   ,tipNotes varchar(256) character set latin1 collation latin1_swedish_ci  
   ,hideExcelChoice tinyint(1)  
   ,xlsExecutableNamePath varchar(64) character set latin1 collation latin1_swedish_ci  
   ,xlsExecutableName varchar(64) character set latin1 collation latin1_swedish_ci  
   ,xlsExecutableFileType varchar(64) character set latin1 collation latin1_swedish_ci  
   ,detailedDescription text character set latin1 collation latin1_swedish_ci  
   ,defaultParameterString varchar(256) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('name')


# PRIMARY KEY('id')


create table scenarioYear (
   id int unsigned  AUTO_INCREMENT
   ,clientId int unsigned  
   ,entityId int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,scenarioSeq int unsigned  
   ,scenarioCode bigint unsigned  
   ,analysisYear int unsigned  
   ,analysisTemplateId int unsigned  
   ,uid bigint unsigned  
   ,populateManually tinyint(1)  
   ,hasBeenUploaded tinyint(1)  
   ,autoMapped tinyint(1)  
   ,hasTarget tinyint(1)  
   ,targetId int unsigned  
   ,fiscalYearEnd date  
   ,cashAccrual varchar(64) character set latin1 collation latin1_swedish_ci  
   ,costMarket varchar(64) character set latin1 collation latin1_swedish_ci  
   ,dateSourceDocument date  
   ,inactive tinyint(1)  
   ,countUploaded int  
   ,accrualBalance decimal(16,2)  
   ,comment varchar(256) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


# PRIMARY KEY('scenarioCode')


# PRIMARY KEY('uid')


create table sourceBenchmarkData (
   id int unsigned  
   ,benchmarkPeriod int unsigned  
   ,dataYear int  
   ,priorYear int  
   ,priorFiveYear int  
   ,participantCount int  
   ,grossRevenue decimal(16,2)  
   ,costOfGoods decimal(16,2)  
   ,productionExpense decimal(16,2)  
   ,netInterest decimal(16,2)  
   ,netDistributionsAndTax decimal(16,2)  
   ,currentAssets decimal(16,2)  
   ,currentLiabilities decimal(16,2)  
   ,nonCurrentAssets decimal(16,2)  
   ,nonCurrentLiabilities decimal(16,2)  
   ,creditLimit decimal(16,2)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table sourceData (
   id int unsigned  AUTO_INCREMENT
   ,dataYear int  
   ,priorYear int  
   ,priorFiveYear int  
   ,clientId int unsigned  
   ,locked bit(1)  
   ,forecastType varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdByUserId int unsigned  
   ,modifiedByUserId int unsigned  
   ,grossRevenue decimal(16,2)  
   ,costOfGoods decimal(16,2)  
   ,productionExpense decimal(16,2)  
   ,netInterest decimal(16,2)  
   ,netDistributionsAndTax decimal(16,2)  
   ,currentAssets decimal(16,2)  
   ,currentLiabilities decimal(16,2)  
   ,nonCurrentAssets decimal(16,2)  
   ,nonCurrentLiabilities decimal(16,2)  
   ,creditLimit decimal(16,2)  
   ,fte decimal(16,2)  
   ,comment varchar(512) character set latin1 collation latin1_swedish_ci  
   ,acreage decimal(16,2)  
   ,head decimal(16,2)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


# PRIMARY KEY('dataYear', 'clientId')


create table sourceDataFeedsForBenchmark (
   dataYear int unsigned  
   ,id int unsigned  
   ,priorYear int  
   ,priorFiveYear int  
   ,benchmarkId int unsigned  
   ,forecastType varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdByUserId int unsigned  
   ,modifiedByUserId int unsigned  
   ,grossRevenue decimal(16,2)  
   ,costOfGoods decimal(16,2)  
   ,productionExpense decimal(16,2)  
   ,netInterest decimal(16,2)  
   ,netDistributionsAndTax decimal(16,2)  
   ,currentAssets decimal(16,2)  
   ,currentLiabilities decimal(16,2)  
   ,nonCurrentAssets decimal(16,2)  
   ,nonCurrentLiabilities decimal(16,2)  
   ,creditLimit decimal(16,2)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
   ,clientId int unsigned  
)

# PRIMARY KEY('id')


create table targetArea (
   id int unsigned  AUTO_INCREMENT
   ,targetId int unsigned  
   ,areaCode int unsigned  
   ,areaOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,balance decimal(16,2)  
   ,creditBalance decimal(16,2)  
   ,debitBalance decimal(16,2)  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table targetFirstLevel (
   id int unsigned  AUTO_INCREMENT
   ,accountFirstUniqueNum int unsigned  
   ,accountFirstOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountFirstCode int unsigned  
   ,targetId int unsigned  
   ,accountAreaId int unsigned  
   ,accountSubAreaId int unsigned  
   ,leaf tinyint(1)  
   ,isAccrualAdjustable tinyint(1)  
   ,targetForAccrualAdj int unsigned  
   ,balance decimal(16,2)  
   ,creditBalance decimal(16,2)  
   ,debitBalance decimal(16,2)  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table targetSecondLevel (
   id int unsigned  AUTO_INCREMENT
   ,accountSecondOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,accountSecondCode int unsigned  
   ,targetId int unsigned  
   ,accountAreaId int unsigned  
   ,accountSubAreaId int unsigned  
   ,accountFirstId int unsigned  
   ,leaf tinyint(1)  
   ,isAccrualAdjustable tinyint(1)  
   ,targetForAccrualAdj int unsigned  
   ,balance decimal(16,2)  
   ,creditBalance decimal(16,2)  
   ,debitBalance decimal(16,2)  
   ,inactive tinyint(1)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table targetSubArea (
   id int unsigned  AUTO_INCREMENT
   ,subAreaOrder int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,subAreaCode int unsigned  
   ,targetId int unsigned  
   ,accountAreaId int unsigned  
   ,inactive tinyint(1)  
   ,balance decimal(16,2)  
   ,creditBalance decimal(16,2)  
   ,debitBalance decimal(16,2)  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


create table trainingResource (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,targetUserClass varchar(64) character set latin1 collation latin1_swedish_ci  
   ,Description text character set latin1 collation latin1_swedish_ci  
   ,videoEmbedHtml text character set latin1 collation latin1_swedish_ci  
   ,videoLinkUrl varchar(64) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('name')


# PRIMARY KEY('id')


create table typeBalSheet (
   name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,comment varchar(512) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('name')


create table typeIncomeStmt (
   name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,inactive tinyint(1)  
   ,comment varchar(512) character set latin1 collation latin1_swedish_ci  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('name')


create table user (
   id int unsigned  AUTO_INCREMENT
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,personId int unsigned  
   ,clientId int unsigned  
   ,passwordHint varchar(64) character set latin1 collation latin1_swedish_ci  
   ,startDate date  
   ,endDate date  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('name')


# PRIMARY KEY('id')


create table valuesForReport (
   id int unsigned  
   ,reportYear int unsigned  
   ,clientId int unsigned  
   ,yearClient int unsigned  
   ,itemSequenceId int unsigned  
   ,name varchar(64) character set latin1 collation latin1_swedish_ci  
   ,year1 decimal(20,6)  
   ,year2 decimal(20,6)  
   ,year3 decimal(20,6)  
   ,year4 decimal(20,6)  
   ,year5 decimal(20,6)  
   ,average decimal(20,6)  
   ,slope decimal(20,6)  
   ,grade decimal(10,6)  
   ,letterGrade varchar(5) character set latin1 collation latin1_swedish_ci  
   ,createdByUserId int unsigned  
   ,modifiedByUserId int unsigned  
   ,createdTs timestamp  
   ,modifiedTs timestamp  
   ,deletedTs timestamp  
)

# PRIMARY KEY('id')


  ALTER TABLE ADD CONSTRAINT fk_actionScenarioDetail_clientId_in_ FOREIGN KEY actionPlanScenarioDetail(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_actionScenario_clientId_in_ FOREIGN KEY actionPlanScenario(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_actionScenario_id_in_ FOREIGN KEY actionPlanScenarioDetail(actionPlanSecenarioId) REFERENCES actionPlanScenario(id)


  ALTER TABLE ADD CONSTRAINT fk_actorTemplate_classId_in_ FOREIGN KEY actorTemplate(actorTemplateClassId) REFERENCES actorTemplateClass(id)


  ALTER TABLE ADD CONSTRAINT fk_actor_championId_in_ FOREIGN KEY actor(championId) REFERENCES person(id)


  ALTER TABLE ADD CONSTRAINT fk_actor_clientId_in_ FOREIGN KEY actor(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_actor_sourceId_in_ FOREIGN KEY actor(sourceDataId) REFERENCES sourceData(id)


  ALTER TABLE ADD CONSTRAINT fk_actor_templateId_in_ FOREIGN KEY actor(actorTemplateId) REFERENCES actorTemplate(id)


  ALTER TABLE ADD CONSTRAINT fk_alteration_has_client_ FOREIGN KEY alteration(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_assAlt_has_client_ FOREIGN KEY assembledAlteration(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_assembledId_of_eliminationFirstLevel_ FOREIGN KEY eliminationFirstLevel(assembledFirstId) REFERENCES assembledFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_assembledId_of_eliminationSecondLevel_ FOREIGN KEY eliminationSecondLevel(assembledSecondId) REFERENCES assembledSecondLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_clientId_for_eliminationFirstLevel_ FOREIGN KEY eliminationFirstLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_clientId_for_eliminationSecondLevel_ FOREIGN KEY eliminationSecondLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_client_altContactId_of_ FOREIGN KEY client(altContactId) REFERENCES person(id)


  ALTER TABLE ADD CONSTRAINT fk_client_id_of_ FOREIGN KEY clientReportDetail(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_client_mainContactId_of_ FOREIGN KEY client(mainContactId) REFERENCES person(id)


  ALTER TABLE ADD CONSTRAINT fk_client_person_id_of_ FOREIGN KEY clientReportDetail(clientPersonId) REFERENCES person(id)


  ALTER TABLE ADD CONSTRAINT fk_coach_person_id_of_ FOREIGN KEY clientReportDetail(teamCoachId) REFERENCES person(id)


  ALTER TABLE ADD CONSTRAINT fk_entity_of_client_ FOREIGN KEY entity(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_entry_person_id_of_ FOREIGN KEY clientReportDetail(entryPersonId) REFERENCES person(id)


  ALTER TABLE ADD CONSTRAINT fk_hpa_va_client_clientId_of_ FOREIGN KEY hpa_verbiage_applied(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_hpa_va_crd_yearClient_of FOREIGN KEY hpa_verbiage_applied(yearClient) REFERENCES clientReportDetail(yearClient)


  ALTER TABLE ADD CONSTRAINT fk_hpa_va_verbiage_default_id_of_ FOREIGN KEY hpa_verbiage_applied(verbiage_default_id) REFERENCES hpa_verbiage_default(verbiage_default_id)


  ALTER TABLE ADD CONSTRAINT fk_impactArea_classId_in_ FOREIGN KEY impactArea(impactAreaClassId) REFERENCES impactAreaClass(id)


  ALTER TABLE ADD CONSTRAINT fk_impactTemplate_actorTempId_in_ FOREIGN KEY impactTemplate(actorTemplateId) REFERENCES actorTemplate(id)


  ALTER TABLE ADD CONSTRAINT fk_impactTemplate_areaId_in_ FOREIGN KEY impactTemplate(impactAreaId) REFERENCES impactArea(id)


  ALTER TABLE ADD CONSTRAINT fk_impactTemplate_functionId_in_ FOREIGN KEY impactTemplate(impactFunctionId) REFERENCES impactFunction(id)


  ALTER TABLE ADD CONSTRAINT fk_impact_actorId_in_ FOREIGN KEY impact(actorId) REFERENCES actor(id)


  ALTER TABLE ADD CONSTRAINT fk_impact_areaId_in_ FOREIGN KEY impact(impactAreaId) REFERENCES impactArea(id)


  ALTER TABLE ADD CONSTRAINT fk_impact_clientId_in_ FOREIGN KEY impact(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_impact_functionId_in_ FOREIGN KEY impact(impactFunctionId) REFERENCES impactFunction(id)


  ALTER TABLE ADD CONSTRAINT fk_impact_sourceId_in_ FOREIGN KEY impact(sourceDataId) REFERENCES sourceData(id)


  ALTER TABLE ADD CONSTRAINT fk_is_area_in_template_ FOREIGN KEY targetArea(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_assembledArea_for_assembledSubArea_ FOREIGN KEY assembledSubArea(assembledAreaId) REFERENCES assembledArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_assembledFirst_for_assembledSecond_ FOREIGN KEY assembledSecondLevel(assembledFirstId) REFERENCES assembledFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_assembledSubArea_for_assembledFirst_ FOREIGN KEY assembledFirstLevel(assembledSubAreaId) REFERENCES assembledSubArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_assembledArea_ FOREIGN KEY assembledArea(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_assembledFirst_ FOREIGN KEY assembledFirstLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_assembledSecond_ FOREIGN KEY assembledSecondLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_assembledSubArea_ FOREIGN KEY assembledSubArea(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_mappedArea_ FOREIGN KEY mappedArea(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_mappedFirst_ FOREIGN KEY mappedFirstLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_mappedSecond_ FOREIGN KEY mappedSecondLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_mappedSubArea_ FOREIGN KEY mappedSubArea(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_client_for_recastSet_ FOREIGN KEY recastSet(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_entity_for_mappedArea_ FOREIGN KEY mappedArea(entityId) REFERENCES entity(id)


  ALTER TABLE ADD CONSTRAINT fk_is_entity_for_mappedFirst_ FOREIGN KEY mappedFirstLevel(entityId) REFERENCES entity(id)


  ALTER TABLE ADD CONSTRAINT fk_is_entity_for_mappedSecond_ FOREIGN KEY mappedSecondLevel(entityId) REFERENCES entity(id)


  ALTER TABLE ADD CONSTRAINT fk_is_entity_for_mappedSubArea_ FOREIGN KEY mappedSubArea(entityId) REFERENCES entity(id)


  ALTER TABLE ADD CONSTRAINT fk_is_firstAccount_in_template_ FOREIGN KEY targetFirstLevel(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_firstAccount_of_accountArea_ FOREIGN KEY targetFirstLevel(accountAreaId) REFERENCES targetArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_firstAccount_of_accountSubArea_ FOREIGN KEY targetFirstLevel(accountSubAreaId) REFERENCES targetSubArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_leafJctnFirst_of_client_ FOREIGN KEY leafJctnFirstLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_leafJctnSecond_of_client_ FOREIGN KEY leafJctnSecondLevel(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_leafJctn_of_assFirstLevel_ FOREIGN KEY leafJctnFirstLevel(assembledFirstId) REFERENCES assembledFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_leafJctn_of_assSecondLevel_ FOREIGN KEY leafJctnSecondLevel(assembledSecondId) REFERENCES assembledSecondLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_leafJctn_of_mappedFirstLevel_ FOREIGN KEY leafJctnFirstLevel(mappedFirstId) REFERENCES mappedFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_leafJctn_of_mappedSecondLevel_ FOREIGN KEY leafJctnSecondLevel(mappedSecondId) REFERENCES mappedSecondLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_mappedArea_for_mappedSubArea_ FOREIGN KEY mappedSubArea(mappedAreaId) REFERENCES mappedArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_mappedFirst_for_mappedSecond_ FOREIGN KEY mappedSecondLevel(mappedFirstId) REFERENCES mappedFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_mappedSubArea_for_mappedFirst_ FOREIGN KEY mappedFirstLevel(mappedSubAreaId) REFERENCES mappedSubArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_member_of_scenarioYear_ FOREIGN KEY accountUpload(uid) REFERENCES scenarioYear(uid)


  ALTER TABLE ADD CONSTRAINT fk_is_recastSet_for_assembledArea_ FOREIGN KEY assembledArea(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_is_recastSet_for_assembledFirst_ FOREIGN KEY assembledFirstLevel(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_is_recastSet_for_assembledSecond_ FOREIGN KEY assembledSecondLevel(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_is_recastSet_for_assembledSubArea_ FOREIGN KEY assembledSubArea(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_is_scenarioYear_for_mappedArea_ FOREIGN KEY mappedArea(scenarioYearId) REFERENCES scenarioYear(id)


  ALTER TABLE ADD CONSTRAINT fk_is_scenarioYear_for_mappedFirst_ FOREIGN KEY mappedFirstLevel(scenarioYearId) REFERENCES scenarioYear(id)


  ALTER TABLE ADD CONSTRAINT fk_is_scenarioYear_for_mappedSecond_ FOREIGN KEY mappedSecondLevel(scenarioYearId) REFERENCES scenarioYear(id)


  ALTER TABLE ADD CONSTRAINT fk_is_scenarioYear_for_mappedSubArea_ FOREIGN KEY mappedSubArea(scenarioYearId) REFERENCES scenarioYear(id)


  ALTER TABLE ADD CONSTRAINT fk_is_scenarioYear_in_membership_ FOREIGN KEY recastSetMembership(scenarioYearId) REFERENCES scenarioYear(id)


  ALTER TABLE ADD CONSTRAINT fk_is_scenarioYear_of_clientEntity_ FOREIGN KEY scenarioYear(entityId) REFERENCES entity(id)


  ALTER TABLE ADD CONSTRAINT fk_is_scenarioYear_of_client_ FOREIGN KEY scenarioYear(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_is_secondAccount_in_template_ FOREIGN KEY targetSecondLevel(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_secondAccount_of_accountArea_ FOREIGN KEY targetSecondLevel(accountAreaId) REFERENCES targetArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_secondAccount_of_accountSubArea_ FOREIGN KEY targetSecondLevel(accountSubAreaId) REFERENCES targetSubArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_secondAccount_of_firstAccount_ FOREIGN KEY targetSecondLevel(accountFirstId) REFERENCES targetFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_set_of_membership_ FOREIGN KEY recastSetMembership(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_is_subArea_in_area_ FOREIGN KEY targetSubArea(accountAreaId) REFERENCES targetArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_subArea_in_template_ FOREIGN KEY targetSubArea(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_assembledArea_ FOREIGN KEY assembledArea(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_assembledFirstLevel_ FOREIGN KEY assembledFirstLevel(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_assembledSecondLevel_ FOREIGN KEY assembledSecondLevel(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_assembledSubArea_ FOREIGN KEY assembledSubArea(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_mappedArea_ FOREIGN KEY mappedArea(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_mappedFirst_ FOREIGN KEY mappedFirstLevel(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_mappedSecond_ FOREIGN KEY mappedSecondLevel(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_mappedSubArea_ FOREIGN KEY mappedSubArea(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_recastSet_ FOREIGN KEY recastSet(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetSource_for_scenarioYear_ FOREIGN KEY scenarioYear(targetId) REFERENCES analysisTarget(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_assembledArea_ FOREIGN KEY assembledArea(targetIdStructured) REFERENCES targetArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_assembledFirstLevel_ FOREIGN KEY assembledFirstLevel(targetIdStructured) REFERENCES targetFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_assembledSubArea_ FOREIGN KEY assembledSubArea(targetIdStructured) REFERENCES targetSubArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_assSecondLevel_ FOREIGN KEY assembledSecondLevel(targetIdStructured) REFERENCES targetSecondLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_mappedArea_ FOREIGN KEY mappedArea(targetIdStructured) REFERENCES targetArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_mappedFirstLevel_ FOREIGN KEY mappedFirstLevel(targetIdStructured) REFERENCES targetFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_mappedSecondLevel_ FOREIGN KEY mappedSecondLevel(targetIdStructured) REFERENCES targetSecondLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_is_targetStructure_for_mappedSubArea_ FOREIGN KEY mappedSubArea(targetIdStructured) REFERENCES targetSubArea(id)


  ALTER TABLE ADD CONSTRAINT fk_is_type_for_recastSet_ FOREIGN KEY recastSet(recastSetTypeName) REFERENCES recastSetType(name)


  ALTER TABLE ADD CONSTRAINT fk_is_type_in_balSheet_ FOREIGN KEY scenarioYear(costMarket) REFERENCES typeBalSheet(name)


  ALTER TABLE ADD CONSTRAINT fk_is_type_in_incomeStmt_ FOREIGN KEY scenarioYear(cashAccrual) REFERENCES typeIncomeStmt(name)


  ALTER TABLE ADD CONSTRAINT fk_mappedId_of_eliminationFirstLevel_ FOREIGN KEY eliminationFirstLevel(mappedFirstId) REFERENCES mappedFirstLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_mappedId_of_eliminationSecondLevel_ FOREIGN KEY eliminationSecondLevel(mappedSecondId) REFERENCES mappedSecondLevel(id)


  ALTER TABLE ADD CONSTRAINT fk_motivatedActor_actorId_in_ FOREIGN KEY motivatedActor(actorId) REFERENCES actor(id)


  ALTER TABLE ADD CONSTRAINT fk_motivatedActor_motivationId_in_ FOREIGN KEY motivatedActor(motivationId) REFERENCES motivation(id)


  ALTER TABLE ADD CONSTRAINT fk_motivatedActor_sourceId_in_ FOREIGN KEY motivatedActor(sourceDataId) REFERENCES sourceData(id)


  ALTER TABLE ADD CONSTRAINT fk_motivation_classId_in_ FOREIGN KEY motivation(motivationClassId) REFERENCES motivationClass(id)


  ALTER TABLE ADD CONSTRAINT fk_motivation_clientId_in_ FOREIGN KEY motivation(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_motivation_sourceId_in_ FOREIGN KEY motivation(sourceDataId) REFERENCES sourceData(id)


  ALTER TABLE ADD CONSTRAINT fk_recastSet_of_alteration_ FOREIGN KEY assembledAlteration(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_recastSet_of_eliminationFirstLevel_ FOREIGN KEY eliminationFirstLevel(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_recastSet_of_eliminationSecondLevel_ FOREIGN KEY eliminationSecondLevel(recastSetId) REFERENCES recastSet(id)


  ALTER TABLE ADD CONSTRAINT fk_scenarioYear_of_alteration_ FOREIGN KEY alteration(scenarioYearId) REFERENCES scenarioYear(id)


  ALTER TABLE ADD CONSTRAINT fk_scenarioYear_of_mapping_ FOREIGN KEY mapping(scenarioYearId) REFERENCES scenarioYear(id)


  ALTER TABLE ADD CONSTRAINT fk_sourceDataFeedsForBenchmark_benchmarkId_of_ FOREIGN KEY sourceDataFeedsForBenchmark(benchmarkId) REFERENCES sourceBenchmarkData(id)


  ALTER TABLE ADD CONSTRAINT fk_sourceDataFeedsForBenchmark_createdByUserId_of_ FOREIGN KEY sourceDataFeedsForBenchmark(createdByUserId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_sourceDataFeedsForBenchmark_modifiedByUserId_of_ FOREIGN KEY sourceDataFeedsForBenchmark(modifiedByUserId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_sourceData_clientId_of_ FOREIGN KEY sourceData(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_sourceData_createdByUserId_of_ FOREIGN KEY sourceData(createdByUserId) REFERENCES user(id)


  ALTER TABLE ADD CONSTRAINT fk_sourceData_modifiedByUserId_of_ FOREIGN KEY sourceData(modifiedByUserId) REFERENCES user(id)


  ALTER TABLE ADD CONSTRAINT fk_this_scenarioYear_uses_template_ FOREIGN KEY scenarioYear(analysisTemplateId) REFERENCES analysisTemplate(id)


  ALTER TABLE ADD CONSTRAINT fk_type_in_balSheet_ FOREIGN KEY entity(costMarket) REFERENCES typeBalSheet(name)


  ALTER TABLE ADD CONSTRAINT fk_type_in_incomeStmt_ FOREIGN KEY entity(cashAccrual) REFERENCES typeIncomeStmt(name)


  ALTER TABLE ADD CONSTRAINT fk_upload_of_mapping_ FOREIGN KEY mapping(accountUploadId) REFERENCES accountUpload(id)


  ALTER TABLE ADD CONSTRAINT fk_user_clientId_of_ FOREIGN KEY user(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_user_personId_of_ FOREIGN KEY user(personId) REFERENCES person(id)


  ALTER TABLE ADD CONSTRAINT fk_valuesForReport_clientId_of_ FOREIGN KEY valuesForReport(clientId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_valuesForReport_createdByUserId_of_ FOREIGN KEY valuesForReport(createdByUserId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_valuesForReport_modifiedByUserId_of_ FOREIGN KEY valuesForReport(modifiedByUserId) REFERENCES client(id)


  ALTER TABLE ADD CONSTRAINT fk_yearClient_reportDetails_of_ FOREIGN KEY valuesForReport(yearClient) REFERENCES clientReportDetail(yearClient)


=========================
       custom_endpoints 
=========================

=========================
       listeners 
=========================
